"use strict";
/**
 * Â© Copyright IBM Corporation 2022, 2023. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ChangesResultIterableIterator = void 0;
var changesParamsHelper_1 = require("./changesParamsHelper");
var changesFollower_1 = require("./changesFollower");
var ibm_cloud_sdk_core_1 = require("ibm-cloud-sdk-core");
var util_1 = require("util");
var TransientErrorSuppression;
(function (TransientErrorSuppression) {
    /** @internal */
    TransientErrorSuppression[TransientErrorSuppression["ALWAYS"] = 0] = "ALWAYS";
    TransientErrorSuppression[TransientErrorSuppression["NEVER"] = 1] = "NEVER";
    TransientErrorSuppression[TransientErrorSuppression["TIMER"] = 2] = "TIMER";
})(TransientErrorSuppression || (TransientErrorSuppression = {}));
var ChangesResultIterableIterator = /** @class */ (function () {
    function ChangesResultIterableIterator(client, params, mode, errorTolerance) {
        var _this = this;
        this.cancellable = new Promise(function (_resolve, reject) {
            _this.cancel = reject;
        });
        this.timeoutPromise = (0, util_1.promisify)(setTimeout);
        this.cancelToken = 'CloudantChangesIteratorCancel';
        this.doneResult = {
            done: true,
            value: undefined,
        };
        this.logger = (0, ibm_cloud_sdk_core_1.getNewLogger)('cloudant-node-sdk');
        this.baseDelay = 100;
        this.expRetryGate = Math.floor(Math.log2(changesParamsHelper_1.ChangesParamsHelper.LONGPOLL_TIMEOUT / this.baseDelay));
        this.inflight = null;
        // Default to "infinite"
        this.pending = Number.MAX_VALUE;
        this.stopped = false;
        this.retry = 0;
        this.client = client;
        this.params = params;
        this.mode = mode;
        this.errorTolerance = errorTolerance;
        if (this.params.limit !== undefined) {
            this.logger.debug("Applying changes limit ".concat(this.params.limit));
            this.countDown = this.params.limit;
        }
        if (this.errorTolerance === 0) {
            this.transientErrorSuppression = TransientErrorSuppression.NEVER;
            this.logger.debug('Not suppressing errors.');
        }
        else if (this.errorTolerance === Number.MAX_VALUE) {
            this.transientErrorSuppression = TransientErrorSuppression.ALWAYS;
            this.logger.debug('Maximum error suppression.');
        }
        else {
            this.transientErrorSuppression = TransientErrorSuppression.TIMER;
            this.logger.debug("Suppress errors for ".concat(this.errorTolerance, " ms."));
        }
        if (this.params.since === undefined) {
            this.since = this.mode === changesFollower_1.Mode.LISTEN ? 'now' : '0';
        }
        else {
            this.since = this.params.since;
        }
        this.promisedConfig = this.configure();
        this.successTimestamp = Date.now();
    }
    ChangesResultIterableIterator.prototype.configure = function () {
        return __awaiter(this, void 0, void 0, function () {
            var _this = this;
            return __generator(this, function (_a) {
                if (this.params.includeDocs) {
                    return [2 /*return*/, this.client
                            .getDatabaseInformation({
                            db: this.params.db,
                        })
                            .then(function (info) {
                            if (info.result &&
                                'doc_count' in info.result &&
                                info.result.doc_count > 0 &&
                                'sizes' in info.result &&
                                'external' in info.result.sizes &&
                                info.result.sizes.external > 0) {
                                // Calculate an average doc size + typical change content size
                                // and try to keep each batch to be about 5 MB
                                _this.params.limit =
                                    Math.floor((5 * 1024 * 1024) /
                                        (info.result.sizes.external / info.result.doc_count + 500)) || 1;
                            }
                        })];
                }
                else {
                    this.params.limit = changesFollower_1.ChangesFollower.BATCH_SIZE;
                    return [2 /*return*/, Promise.resolve()];
                }
                return [2 /*return*/];
            });
        });
    };
    ChangesResultIterableIterator.prototype[Symbol.asyncIterator] = function () {
        return this;
    };
    ChangesResultIterableIterator.prototype.return = function (value) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                this.logger.debug('Iterator return entry.');
                if (!this.stopped) {
                    this.logger.debug('Setting stopped flag.');
                    this.stopped = true;
                    if (this.inflight) {
                        this.logger.debug('Cancelling inflight requests.');
                        this.cancel(new Error(this.cancelToken));
                    }
                }
                this.logger.debug('Iterator return exiting done.');
                return [2 /*return*/, this.doneResult];
            });
        });
    };
    ChangesResultIterableIterator.prototype.next = function (value) {
        return __awaiter(this, void 0, void 0, function () {
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        this.logger.debug('Iterator next entry.');
                        // Stop the iterator if stopped is set to true.
                        if (this.stopped) {
                            this.logger.debug('Already stopped, iterator next exiting done.');
                            return [2 /*return*/, this.doneResult];
                        }
                        // Await the async config and also
                        // yield to the event loop so our long-running requests don't enqueue
                        // more long-running requests on the same microtask queue and
                        // end up blocking I/O.
                        return [4 /*yield*/, Promise.all([
                                this.promisedConfig,
                                new Promise(function (resolve) { return setImmediate(resolve); }),
                            ])];
                    case 1:
                        // Await the async config and also
                        // yield to the event loop so our long-running requests don't enqueue
                        // more long-running requests on the same microtask queue and
                        // end up blocking I/O.
                        _a.sent();
                        this.logger.debug('Making next request.');
                        this.inflight = Promise.race([
                            this.cancellable,
                            this.client.postChanges(changesParamsHelper_1.ChangesParamsHelper.cloneParams(this.params, this.since, this.countDown && this.countDown < this.params.limit
                                ? this.countDown
                                : undefined)),
                        ])
                            .then(function (response) {
                            _this.logger.debug('Got next response.');
                            // Reset the retry counter
                            _this.retry = 0;
                            if (_this.transientErrorSuppression === TransientErrorSuppression.TIMER) {
                                _this.logger.debug('Setting new timestamp for timer suppression');
                                _this.successTimestamp = Date.now();
                            }
                            _this.since = response.result.last_seq;
                            _this.pending = response.result.pending;
                            if (_this.mode === changesFollower_1.Mode.FINITE && _this.pending === 0) {
                                _this.logger.debug('No more changes pending, setting stopped flag.');
                                _this.stopped = true;
                            }
                            if (_this.countDown !== undefined) {
                                _this.logger.debug('Decrementing limit.');
                                _this.countDown -= response.result.results.length;
                                if (_this.countDown <= 0) {
                                    _this.logger.debug('Limit reached, setting stopped flag.');
                                    _this.stopped = true;
                                }
                            }
                            _this.logger.debug('Iterator next exiting with result.');
                            return { done: false, value: response.result };
                        })
                            .catch(function (err) {
                            _this.logger.debug("Caught error ".concat(err.message));
                            if (err.message === _this.cancelToken) {
                                _this.logger.debug('Iterator next exiting cancelled.');
                                return _this.doneResult;
                            }
                            switch (_this.transientErrorSuppression) {
                                case TransientErrorSuppression.ALWAYS:
                                    break;
                                case TransientErrorSuppression.TIMER:
                                    if (Date.now() < _this.successTimestamp + _this.errorTolerance) {
                                        break;
                                    }
                                    _this.logger.debug('Error tolerance deadline exceeded.');
                                // In the case the timer has been exceeded we want to throw so
                                // fall through
                                case TransientErrorSuppression.NEVER:
                                    _this.logger.verbose("ChangesResultStream stream: ".concat(err.message));
                                    throw err;
                            }
                            switch (err.code) {
                                case 400:
                                case 401:
                                case 403:
                                case 404:
                                    // Terminal error, stop running
                                    _this.logger.debug('Terminal error');
                                    _this.logger.verbose("ChangesResultStream stream: ".concat(err.message));
                                    throw err;
                                default:
                                    // Note this includes Errors
                                    // which handles cases like disconnections and incomplete
                                    // bodies where we may have received a successful response
                                    // code, but couldn't e.g. parse the body
                                    _this.logger.verbose("Suppressing transient error ".concat(err.message, "."));
                                    var emptyChangesResultPromise_1 = {
                                        done: false,
                                        value: {
                                            last_seq: _this.since,
                                            pending: _this.pending,
                                            results: [],
                                        },
                                    };
                                    var expDelay = void 0;
                                    if (_this.retry > _this.expRetryGate) {
                                        // If we've exceeded the cap, use the timeout value
                                        expDelay = changesParamsHelper_1.ChangesParamsHelper.LONGPOLL_TIMEOUT;
                                    }
                                    else {
                                        expDelay = Math.pow(2, _this.retry) * _this.baseDelay;
                                    }
                                    var delay = Math.round(Math.random() * expDelay) + 1;
                                    _this.logger.debug("Backing off for ".concat(delay, " ms."));
                                    _this.retry++;
                                    return _this.timeoutPromise(delay).then(function () {
                                        _this.logger.debug("Iterator next exiting with empty result.");
                                        return emptyChangesResultPromise_1;
                                    });
                            }
                        })
                            .finally(function () {
                            _this.inflight = null;
                        });
                        return [2 /*return*/, this.inflight];
                }
            });
        });
    };
    return ChangesResultIterableIterator;
}());
exports.ChangesResultIterableIterator = ChangesResultIterableIterator;
//# sourceMappingURL=changesResultIterator.js.map