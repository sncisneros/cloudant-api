/**
 * (C) Copyright IBM Corp. 2023.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/// <reference types="node" />
/// <reference types="node" />
/// <reference types="node" />
import { IncomingHttpHeaders, OutgoingHttpHeaders } from 'http';
import { SDKLogger, UserOptions } from 'ibm-cloud-sdk-core';
import CloudantBaseService from '../lib/cloudantBaseService';
/**
 * NoSQL database based on Apache CouchDB
 *
 * See: https://cloud.ibm.com/docs/services/Cloudant/
 */
declare class CloudantV1 extends CloudantBaseService {
    static _logger: SDKLogger;
    static DEFAULT_SERVICE_URL: string;
    static DEFAULT_SERVICE_NAME: string;
    /*************************
     * Factory method
     ************************/
    /**
     * Constructs an instance of CloudantV1 with passed in options and external configuration.
     *
     * @param {UserOptions} [options] - The parameters to send to the service.
     * @param {string} [options.serviceName] - The name of the service to configure
     * @param {Authenticator} [options.authenticator] - The Authenticator object used to authenticate requests to the service
     * @param {string} [options.serviceUrl] - The URL for the service
     * @returns {CloudantV1}
     */
    static newInstance(options: UserOptions): CloudantV1;
    /**
     * Construct a CloudantV1 object.
     *
     * @param {Object} options - Options for the service.
     * @param {string} [options.serviceUrl] - The base url to use when contacting the service. The base url may differ between IBM Cloud regions.
     * @param {OutgoingHttpHeaders} [options.headers] - Default headers that shall be included with every request to the service.
     * @param {Authenticator} options.authenticator - The Authenticator object used to authenticate requests to the service
     * @constructor
     * @returns {CloudantV1}
     */
    constructor(options: UserOptions);
    /*************************
     * server
     ************************/
    /**
     * Retrieve server instance information.
     *
     * When you access the root of an instance, IBM Cloudant returns meta-information about the instance. The response
     * includes a JSON structure that contains information about the server, including a welcome message and the server's
     * version.
     *
     * **Tip:**  The authentication for this endpoint is only enforced when using IAM.
     *
     * @param {Object} [params] - The parameters to send to the service.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<CloudantV1.Response<CloudantV1.ServerInformation>>}
     */
    getServerInformation(params?: CloudantV1.GetServerInformationParams): Promise<CloudantV1.Response<CloudantV1.ServerInformation>>;
    /**
     * Retrieve cluster membership information.
     *
     * Displays the nodes that are part of the cluster as `cluster_nodes`. The field, `all_nodes`, displays all nodes this
     * node knows about, including the ones that are part of the cluster. This endpoint is useful when you set up a
     * cluster.
     *
     * @param {Object} [params] - The parameters to send to the service.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<CloudantV1.Response<CloudantV1.MembershipInformation>>}
     */
    getMembershipInformation(params?: CloudantV1.GetMembershipInformationParams): Promise<CloudantV1.Response<CloudantV1.MembershipInformation>>;
    /**
     * Retrieve one or more UUIDs.
     *
     * Requests one or more Universally Unique Identifiers (UUIDs) from the instance. The response is a JSON object that
     * provides a list of UUIDs.
     *
     * **Tip:**  The authentication for this endpoint is only enforced when using IAM.
     *
     * @param {Object} [params] - The parameters to send to the service.
     * @param {number} [params.count] - Query parameter to specify the number of UUIDs to return.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<CloudantV1.Response<CloudantV1.UuidsResult>>}
     */
    getUuids(params?: CloudantV1.GetUuidsParams): Promise<CloudantV1.Response<CloudantV1.UuidsResult>>;
    /**
     * Retrieve provisioned throughput capacity information.
     *
     * View the amount of provisioned throughput capacity that is allocated to an IBM Cloudant instance and what is the
     * target provisioned throughput capacity.
     *
     * @param {Object} [params] - The parameters to send to the service.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<CloudantV1.Response<CloudantV1.CapacityThroughputInformation>>}
     */
    getCapacityThroughputInformation(params?: CloudantV1.GetCapacityThroughputInformationParams): Promise<CloudantV1.Response<CloudantV1.CapacityThroughputInformation>>;
    /**
     * Update the target provisioned throughput capacity.
     *
     * Sets the target provisioned throughput capacity for an IBM Cloudant instance. When target capacity is changed, the
     * current capacity asynchronously changes to meet the target capacity.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {number} params.blocks - A number of blocks of throughput units. A block consists of 100 reads/sec, 50
     * writes/sec, and 5 global queries/sec of provisioned throughput capacity.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<CloudantV1.Response<CloudantV1.CapacityThroughputInformation>>}
     */
    putCapacityThroughputConfiguration(params: CloudantV1.PutCapacityThroughputConfigurationParams): Promise<CloudantV1.Response<CloudantV1.CapacityThroughputInformation>>;
    /*************************
     * changes
     ************************/
    /**
     * Retrieve change events for all databases.
     *
     * **This endpoint is not available in IBM Cloudant.**
     *
     * Lists changes to databases, like a global changes feed. Types of changes include updating the database and creating
     * or deleting a database. Like the changes feed, the feed is not guaranteed to return changes in the correct order
     * and might repeat changes. Polling modes for this method work like polling modes for the changes feed.
     *
     * @param {Object} [params] - The parameters to send to the service.
     * @param {string} [params.feed] - Query parameter to specify the changes feed type.
     * @param {number} [params.heartbeat] - Query parameter to specify the period in milliseconds after which an empty
     * line is sent in the results. Off by default and only applicable for
     * `continuous` and `eventsource` feeds. Overrides any timeout to keep the feed alive indefinitely. May also be `true`
     * to use a value of `60000`.
     *
     * **Note:** Delivery of heartbeats cannot be relied on at specific intervals. If your application runs in an
     * environment where idle network connections may break, `heartbeat` is not suitable as a keepalive mechanism.
     * Instead, consider one of the following options:
     *   * Use the `timeout` parameter with a value that is compatible with your network environment.
     *   * Switch to scheduled usage of one of the non-continuous changes feed types
     *     (`normal` or `longpoll`).
     *   * Use TCP keepalive.
     * @param {number} [params.timeout] - Query parameter to specify the maximum period in milliseconds to wait for a
     * change before the response is sent, even if there are no results. Only applicable for `longpoll` or `continuous`
     * feeds. Default value is specified by `httpd/changes_timeout` configuration option. Note that `60000` value is also
     * the default maximum timeout to prevent undetected dead connections.
     * @param {string} [params.since] - Query parameter to specify to start the results from the change immediately after
     * the given update sequence. Can be a valid update sequence or `now` value. Default is `0` i.e. all changes.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<CloudantV1.Response<CloudantV1.DbUpdates>>}
     * @deprecated this method is deprecated and may be removed in a future release
     */
    getDbUpdates(params?: CloudantV1.GetDbUpdatesParams): Promise<CloudantV1.Response<CloudantV1.DbUpdates>>;
    /**
     * Query the database document changes feed.
     *
     * Requests the database changes feed in the same way as `GET /{db}/_changes` does. It is widely used with the
     * `filter` query parameter because it allows one to pass more information to the filter.
     *
     * ### Note
     *
     * Before using the changes feed we recommend reading the
     * [FAQs](https://cloud.ibm.com/docs/Cloudant?topic=Cloudant-faq-using-changes-feed) to understand the limitations and
     * appropriate use cases.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.db - Path parameter to specify the database name.
     * @param {string[]} [params.docIds] - Schema for a list of document IDs.
     * @param {string[]} [params.fields] - JSON array that uses the field syntax. Use this parameter to specify which
     * fields of a document must be returned. If it is omitted or empty, the entire document is returned.
     * @param {JsonObject} [params.selector] - JSON object describing criteria used to select documents. The selector
     * specifies fields in the document, and provides an expression to evaluate with the field content or other data.
     *
     * The selector object must:
     *   * Be structured as valid JSON.
     *   * Contain a valid query expression.
     *
     * Using a selector is significantly more efficient than using a JavaScript filter function, and is the recommended
     * option if filtering on document attributes only.
     *
     * Elementary selector syntax requires you to specify one or more fields, and the corresponding values required for
     * those fields. You can create more complex selector expressions by combining operators.
     *
     * Operators are identified by the use of a dollar sign `$` prefix in the name field.
     *
     * There are two core types of operators in the selector syntax:
     * * Combination operators: applied at the topmost level of selection. They are used to combine selectors. A
     * combination operator takes a single argument. The argument is either another selector, or an array of selectors.
     * * Condition operators: are specific to a field, and are used to evaluate the value stored in that field. For
     * instance, the basic `$eq` operator matches when the specified field contains a value that is equal to the supplied
     * argument. See [the Cloudant Docs](https://cloud.ibm.com/docs/Cloudant?topic=Cloudant-operators) for a list of all
     * available combination and conditional operators.
     * * Only equality operators such as `$eq`, `$gt`, `$gte`, `$lt`, and `$lte` (but not `$ne`) can be used as the basis
     * of a query. You should include at least one of these in a selector.
     *
     * For further reference see
     * [selector syntax](https://cloud.ibm.com/docs/Cloudant?topic=Cloudant-selector-syntax).
     * @param {string} [params.lastEventId] - Header parameter to specify the ID of the last events received by the server
     * on a previous connection. Overrides `since` query parameter.
     * @param {boolean} [params.attEncodingInfo] - Query parameter to specify whether to include the encoding information
     * in attachment stubs if the particular attachment is compressed.
     * @param {boolean} [params.attachments] - Query parameter to specify whether to include attachments bodies in a
     * response.
     * @param {boolean} [params.conflicts] - Query parameter to specify whether to include a list of conflicted revisions
     * in each returned document. Active only when `include_docs` is `true`.
     * @param {boolean} [params.descending] - Query parameter to specify whether to return the documents in descending by
     * key order.
     * @param {string} [params.feed] - Query parameter to specify the changes feed type.
     * @param {string} [params.filter] - Query parameter to specify a filter function from a design document that will
     * filter the changes stream emitting only filtered events. For example: `design_doc/filtername`.
     *
     * Additionally, some keywords are reserved for built-in filters:
     *
     *   * `_design` - Returns only changes to design documents.
     *   * `_doc_ids` - Returns changes for documents with an ID matching one specified in
     *       `doc_ids` request body parameter.
     *   * `_selector` - Returns changes for documents that match the `selector`
     *       request body parameter. The selector syntax is the same as used for
     *       `_find`.
     *   * `_view` - Returns changes for documents that match an existing map
     *       function in the view specified by the query parameter `view`.
     * @param {number} [params.heartbeat] - Query parameter to specify the period in milliseconds after which an empty
     * line is sent in the results. Off by default and only applicable for
     * `continuous` and `eventsource` feeds. Overrides any timeout to keep the feed alive indefinitely. May also be `true`
     * to use a value of `60000`.
     *
     * **Note:** Delivery of heartbeats cannot be relied on at specific intervals. If your application runs in an
     * environment where idle network connections may break, `heartbeat` is not suitable as a keepalive mechanism.
     * Instead, consider one of the following options:
     *   * Use the `timeout` parameter with a value that is compatible with your network environment.
     *   * Switch to scheduled usage of one of the non-continuous changes feed types
     *     (`normal` or `longpoll`).
     *   * Use TCP keepalive.
     * @param {boolean} [params.includeDocs] - Query parameter to specify whether to include the full content of the
     * documents in the response.
     * @param {number} [params.limit] - Query parameter to specify the number of returned documents to limit the result
     * to.
     * @param {number} [params.seqInterval] - Query parameter to specify that the update seq should only be calculated
     * with every Nth result returned. When fetching changes in a batch, setting <code>seq_interval=&lt;batch
     * size&gt;</code>, where &lt;batch size&gt; is the number of results requested per batch, load can be reduced on the
     * source database as computing the seq value across many shards (especially in highly-sharded databases) is
     * expensive.
     * @param {string} [params.since] - Query parameter to specify to start the results from the change immediately after
     * the given update sequence. Can be a valid update sequence or `now` value. Default is `0` i.e. all changes.
     * @param {string} [params.style] - Query parameter to specify how many revisions are returned in the changes array.
     * The default, `main_only`, will only return the current "winning" revision; all_docs will return all leaf revisions
     * (including conflicts and deleted former conflicts).
     * @param {number} [params.timeout] - Query parameter to specify the maximum period in milliseconds to wait for a
     * change before the response is sent, even if there are no results. Only applicable for `longpoll` or `continuous`
     * feeds. Default value is specified by `httpd/changes_timeout` configuration option. Note that `60000` value is also
     * the default maximum timeout to prevent undetected dead connections.
     * @param {string} [params.view] - Query parameter to specify a view function as a filter. Documents pass the filter
     * if the view's map function emits at least one record for them.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<CloudantV1.Response<CloudantV1.ChangesResult>>}
     */
    postChanges(params: CloudantV1.PostChangesParams): Promise<CloudantV1.Response<CloudantV1.ChangesResult>>;
    /**
     * Query the database document changes feed as stream.
     *
     * Requests the database changes feed in the same way as `GET /{db}/_changes` does. It is widely used with the
     * `filter` query parameter because it allows one to pass more information to the filter.
     *
     * ### Note
     *
     * Before using the changes feed we recommend reading the
     * [FAQs](https://cloud.ibm.com/docs/Cloudant?topic=Cloudant-faq-using-changes-feed) to understand the limitations and
     * appropriate use cases.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.db - Path parameter to specify the database name.
     * @param {string[]} [params.docIds] - Schema for a list of document IDs.
     * @param {string[]} [params.fields] - JSON array that uses the field syntax. Use this parameter to specify which
     * fields of a document must be returned. If it is omitted or empty, the entire document is returned.
     * @param {JsonObject} [params.selector] - JSON object describing criteria used to select documents. The selector
     * specifies fields in the document, and provides an expression to evaluate with the field content or other data.
     *
     * The selector object must:
     *   * Be structured as valid JSON.
     *   * Contain a valid query expression.
     *
     * Using a selector is significantly more efficient than using a JavaScript filter function, and is the recommended
     * option if filtering on document attributes only.
     *
     * Elementary selector syntax requires you to specify one or more fields, and the corresponding values required for
     * those fields. You can create more complex selector expressions by combining operators.
     *
     * Operators are identified by the use of a dollar sign `$` prefix in the name field.
     *
     * There are two core types of operators in the selector syntax:
     * * Combination operators: applied at the topmost level of selection. They are used to combine selectors. A
     * combination operator takes a single argument. The argument is either another selector, or an array of selectors.
     * * Condition operators: are specific to a field, and are used to evaluate the value stored in that field. For
     * instance, the basic `$eq` operator matches when the specified field contains a value that is equal to the supplied
     * argument. See [the Cloudant Docs](https://cloud.ibm.com/docs/Cloudant?topic=Cloudant-operators) for a list of all
     * available combination and conditional operators.
     * * Only equality operators such as `$eq`, `$gt`, `$gte`, `$lt`, and `$lte` (but not `$ne`) can be used as the basis
     * of a query. You should include at least one of these in a selector.
     *
     * For further reference see
     * [selector syntax](https://cloud.ibm.com/docs/Cloudant?topic=Cloudant-selector-syntax).
     * @param {string} [params.lastEventId] - Header parameter to specify the ID of the last events received by the server
     * on a previous connection. Overrides `since` query parameter.
     * @param {boolean} [params.attEncodingInfo] - Query parameter to specify whether to include the encoding information
     * in attachment stubs if the particular attachment is compressed.
     * @param {boolean} [params.attachments] - Query parameter to specify whether to include attachments bodies in a
     * response.
     * @param {boolean} [params.conflicts] - Query parameter to specify whether to include a list of conflicted revisions
     * in each returned document. Active only when `include_docs` is `true`.
     * @param {boolean} [params.descending] - Query parameter to specify whether to return the documents in descending by
     * key order.
     * @param {string} [params.feed] - Query parameter to specify the changes feed type.
     * @param {string} [params.filter] - Query parameter to specify a filter function from a design document that will
     * filter the changes stream emitting only filtered events. For example: `design_doc/filtername`.
     *
     * Additionally, some keywords are reserved for built-in filters:
     *
     *   * `_design` - Returns only changes to design documents.
     *   * `_doc_ids` - Returns changes for documents with an ID matching one specified in
     *       `doc_ids` request body parameter.
     *   * `_selector` - Returns changes for documents that match the `selector`
     *       request body parameter. The selector syntax is the same as used for
     *       `_find`.
     *   * `_view` - Returns changes for documents that match an existing map
     *       function in the view specified by the query parameter `view`.
     * @param {number} [params.heartbeat] - Query parameter to specify the period in milliseconds after which an empty
     * line is sent in the results. Off by default and only applicable for
     * `continuous` and `eventsource` feeds. Overrides any timeout to keep the feed alive indefinitely. May also be `true`
     * to use a value of `60000`.
     *
     * **Note:** Delivery of heartbeats cannot be relied on at specific intervals. If your application runs in an
     * environment where idle network connections may break, `heartbeat` is not suitable as a keepalive mechanism.
     * Instead, consider one of the following options:
     *   * Use the `timeout` parameter with a value that is compatible with your network environment.
     *   * Switch to scheduled usage of one of the non-continuous changes feed types
     *     (`normal` or `longpoll`).
     *   * Use TCP keepalive.
     * @param {boolean} [params.includeDocs] - Query parameter to specify whether to include the full content of the
     * documents in the response.
     * @param {number} [params.limit] - Query parameter to specify the number of returned documents to limit the result
     * to.
     * @param {number} [params.seqInterval] - Query parameter to specify that the update seq should only be calculated
     * with every Nth result returned. When fetching changes in a batch, setting <code>seq_interval=&lt;batch
     * size&gt;</code>, where &lt;batch size&gt; is the number of results requested per batch, load can be reduced on the
     * source database as computing the seq value across many shards (especially in highly-sharded databases) is
     * expensive.
     * @param {string} [params.since] - Query parameter to specify to start the results from the change immediately after
     * the given update sequence. Can be a valid update sequence or `now` value. Default is `0` i.e. all changes.
     * @param {string} [params.style] - Query parameter to specify how many revisions are returned in the changes array.
     * The default, `main_only`, will only return the current "winning" revision; all_docs will return all leaf revisions
     * (including conflicts and deleted former conflicts).
     * @param {number} [params.timeout] - Query parameter to specify the maximum period in milliseconds to wait for a
     * change before the response is sent, even if there are no results. Only applicable for `longpoll` or `continuous`
     * feeds. Default value is specified by `httpd/changes_timeout` configuration option. Note that `60000` value is also
     * the default maximum timeout to prevent undetected dead connections.
     * @param {string} [params.view] - Query parameter to specify a view function as a filter. Documents pass the filter
     * if the view's map function emits at least one record for them.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<CloudantV1.Response<NodeJS.ReadableStream>>}
     */
    postChangesAsStream(params: CloudantV1.PostChangesAsStreamParams): Promise<CloudantV1.Response<NodeJS.ReadableStream>>;
    /*************************
     * databases
     ************************/
    /**
     * Retrieve the HTTP headers for a database.
     *
     * Returns the HTTP headers that contain a minimal amount of information about the specified database. Since the
     * response body is empty, using the HEAD method is a lightweight way to check if the database exists or not.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.db - Path parameter to specify the database name.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<CloudantV1.Response<CloudantV1.EmptyObject>>}
     */
    headDatabase(params: CloudantV1.HeadDatabaseParams): Promise<CloudantV1.Response<CloudantV1.EmptyObject>>;
    /**
     * Query a list of all database names in the instance.
     *
     * @param {Object} [params] - The parameters to send to the service.
     * @param {boolean} [params.descending] - Query parameter to specify whether to return the documents in descending by
     * key order.
     * @param {string} [params.endKey] - Query parameter to specify to stop returning records when the specified key is
     * reached. String representation of any JSON type that matches the key type emitted by the view function.
     * @param {number} [params.limit] - Query parameter to specify the number of returned documents to limit the result
     * to.
     * @param {number} [params.skip] - Query parameter to specify the number of records before starting to return the
     * results.
     * @param {string} [params.startKey] - Query parameter to specify to start returning records from the specified key.
     * String representation of any JSON type that matches the key type emitted by the view function.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<CloudantV1.Response<string[]>>}
     */
    getAllDbs(params?: CloudantV1.GetAllDbsParams): Promise<CloudantV1.Response<string[]>>;
    /**
     * Query information about multiple databases.
     *
     * This operation enables you to request information about multiple databases in a single request, instead of issuing
     * multiple `GET /{db}` requests. It returns a list that contains an information object for each database specified in
     * the request.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string[]} params.keys - A list of database names.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<CloudantV1.Response<CloudantV1.DbsInfoResult[]>>}
     */
    postDbsInfo(params: CloudantV1.PostDbsInfoParams): Promise<CloudantV1.Response<CloudantV1.DbsInfoResult[]>>;
    /**
     * Delete a database.
     *
     * Deletes the specified database and all documents and attachments contained within it. To avoid deleting a database,
     * the server responds with a 400 HTTP status code when the request URL includes a `?rev=` parameter. This response
     * suggests that a user wanted to delete a document but forgot to add the document ID to the URL.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.db - Path parameter to specify the database name.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<CloudantV1.Response<CloudantV1.Ok>>}
     */
    deleteDatabase(params: CloudantV1.DeleteDatabaseParams): Promise<CloudantV1.Response<CloudantV1.Ok>>;
    /**
     * Retrieve information about a database.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.db - Path parameter to specify the database name.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<CloudantV1.Response<CloudantV1.DatabaseInformation>>}
     */
    getDatabaseInformation(params: CloudantV1.GetDatabaseInformationParams): Promise<CloudantV1.Response<CloudantV1.DatabaseInformation>>;
    /**
     * Create a database.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.db - Path parameter to specify the database name.
     * @param {boolean} [params.partitioned] - Query parameter to specify whether to enable database partitions when
     * creating a database.
     * @param {number} [params.q] - The number of shards in the database. Each shard is a partition of the hash value
     * range. Cloudant recommends using the default value for most databases. However, if your database is expected to be
     * larger than 250 GB or have a lot of indexes, you may need to adjust the settings. In these cases, it's best to
     * reach out to IBM Cloudant customer support for guidance on how to meet your specific needs and requirements.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<CloudantV1.Response<CloudantV1.Ok>>}
     */
    putDatabase(params: CloudantV1.PutDatabaseParams): Promise<CloudantV1.Response<CloudantV1.Ok>>;
    /*************************
     * documents
     ************************/
    /**
     * Retrieve the HTTP headers for the document.
     *
     * This method supports the same query arguments as the `GET /{db}/{docid}` method, but only the header information
     * (including document size and the revision as an ETag) is returned. The ETag header shows the current revision for
     * the requested document, and the Content-Length specifies the length of the data if the document was requested in
     * full. Add any of the query arguments, then the resulting HTTP headers that correspond to it are returned.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.db - Path parameter to specify the database name.
     * @param {string} params.docId - Path parameter to specify the document ID.
     * @param {string} [params.ifNoneMatch] - Header parameter to specify a double quoted document revision token for
     * cache control.
     * @param {boolean} [params.latest] - Query parameter to specify whether to force retrieving latest leaf revision, no
     * matter what rev was requested.
     * @param {string} [params.rev] - Query parameter to specify a document revision.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<CloudantV1.Response<CloudantV1.EmptyObject>>}
     */
    headDocument(params: CloudantV1.HeadDocumentParams): Promise<CloudantV1.Response<CloudantV1.EmptyObject>>;
    /**
     * Create or modify a document in a database.
     *
     * Creates or modifies a document in the specified database by using the supplied JSON document.
     *
     * For creation, you may specify the document ID but you should not specify the revision. If you don't specify the
     * document ID, then the server generates an ID for your document.
     *
     * For modification, you must specify the document ID and a revision identifier in the JSON document.
     *
     * If your document ID includes the `_local/` or `_design/` prefix, then this operation creates or modifies a local or
     * a design document respectively.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.db - Path parameter to specify the database name.
     * @param {Document | NodeJS.ReadableStream | Buffer} params.document - HTTP request body for Document operations.
     * @param {string} [params.contentType] - The type of the input.
     * @param {string} [params.batch] - Query parameter to specify whether to store in batch mode. The server will respond
     * with a HTTP 202 Accepted response code immediately.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<CloudantV1.Response<CloudantV1.DocumentResult>>}
     */
    postDocument(params: CloudantV1.PostDocumentParams): Promise<CloudantV1.Response<CloudantV1.DocumentResult>>;
    /**
     * Query a list of all documents in a database.
     *
     * Queries the primary index (all document IDs). The results that match the request body parameters are returned in a
     * JSON object, including a list of matching documents with basic contents, such as the ID and revision. When no
     * request body parameters are specified, results for all documents in the database are returned. Optionally, document
     * content or additional metadata can be included in the response.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.db - Path parameter to specify the database name.
     * @param {boolean} [params.attEncodingInfo] - Parameter to specify whether to include the encoding information in
     * attachment stubs if the particular attachment is compressed.
     * @param {boolean} [params.attachments] - Parameter to specify whether to include attachments bodies in a response.
     * @param {boolean} [params.conflicts] - Parameter to specify whether to include a list of conflicted revisions in
     * each returned document. Active only when `include_docs` is `true`.
     * @param {boolean} [params.descending] - Parameter to specify whether to return the documents in descending by key
     * order.
     * @param {boolean} [params.includeDocs] - Parameter to specify whether to include the full content of the documents
     * in the response.
     * @param {boolean} [params.inclusiveEnd] - Parameter to specify whether the specified end key should be included in
     * the result.
     * @param {number} [params.limit] - Parameter to specify the number of returned documents to limit the result to.
     * @param {number} [params.skip] - Parameter to specify the number of records before starting to return the results.
     * @param {boolean} [params.updateSeq] - Parameter to specify whether to include in the response an update_seq value
     * indicating the sequence id of the database the view reflects.
     * @param {string} [params.endKey] - Schema for a document ID.
     * @param {string} [params.key] - Schema for a document ID.
     * @param {string[]} [params.keys] - Schema for a list of document IDs.
     * @param {string} [params.startKey] - Schema for a document ID.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<CloudantV1.Response<CloudantV1.AllDocsResult>>}
     */
    postAllDocs(params: CloudantV1.PostAllDocsParams): Promise<CloudantV1.Response<CloudantV1.AllDocsResult>>;
    /**
     * Query a list of all documents in a database as stream.
     *
     * Queries the primary index (all document IDs). The results that match the request body parameters are returned in a
     * JSON object, including a list of matching documents with basic contents, such as the ID and revision. When no
     * request body parameters are specified, results for all documents in the database are returned. Optionally, document
     * content or additional metadata can be included in the response.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.db - Path parameter to specify the database name.
     * @param {boolean} [params.attEncodingInfo] - Parameter to specify whether to include the encoding information in
     * attachment stubs if the particular attachment is compressed.
     * @param {boolean} [params.attachments] - Parameter to specify whether to include attachments bodies in a response.
     * @param {boolean} [params.conflicts] - Parameter to specify whether to include a list of conflicted revisions in
     * each returned document. Active only when `include_docs` is `true`.
     * @param {boolean} [params.descending] - Parameter to specify whether to return the documents in descending by key
     * order.
     * @param {boolean} [params.includeDocs] - Parameter to specify whether to include the full content of the documents
     * in the response.
     * @param {boolean} [params.inclusiveEnd] - Parameter to specify whether the specified end key should be included in
     * the result.
     * @param {number} [params.limit] - Parameter to specify the number of returned documents to limit the result to.
     * @param {number} [params.skip] - Parameter to specify the number of records before starting to return the results.
     * @param {boolean} [params.updateSeq] - Parameter to specify whether to include in the response an update_seq value
     * indicating the sequence id of the database the view reflects.
     * @param {string} [params.endKey] - Schema for a document ID.
     * @param {string} [params.key] - Schema for a document ID.
     * @param {string[]} [params.keys] - Schema for a list of document IDs.
     * @param {string} [params.startKey] - Schema for a document ID.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<CloudantV1.Response<NodeJS.ReadableStream>>}
     */
    postAllDocsAsStream(params: CloudantV1.PostAllDocsAsStreamParams): Promise<CloudantV1.Response<NodeJS.ReadableStream>>;
    /**
     * Multi-query the list of all documents in a database.
     *
     * Runs multiple queries using the primary index (all document IDs). Returns a JSON object that contains a list of
     * result objects, one for each query, with a structure equivalent to that of a single `_all_docs` request. This
     * enables you to request multiple queries in a single request, in place of multiple `POST /{db}/_all_docs` requests.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.db - Path parameter to specify the database name.
     * @param {AllDocsQuery[]} params.queries - An array of query objects with fields for the parameters of each
     * individual view query to be executed. The field names and their meaning are the same as the query parameters of a
     * regular `/_all_docs` request.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<CloudantV1.Response<CloudantV1.AllDocsQueriesResult>>}
     */
    postAllDocsQueries(params: CloudantV1.PostAllDocsQueriesParams): Promise<CloudantV1.Response<CloudantV1.AllDocsQueriesResult>>;
    /**
     * Multi-query the list of all documents in a database as stream.
     *
     * Runs multiple queries using the primary index (all document IDs). Returns a JSON object that contains a list of
     * result objects, one for each query, with a structure equivalent to that of a single `_all_docs` request. This
     * enables you to request multiple queries in a single request, in place of multiple `POST /{db}/_all_docs` requests.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.db - Path parameter to specify the database name.
     * @param {AllDocsQuery[]} params.queries - An array of query objects with fields for the parameters of each
     * individual view query to be executed. The field names and their meaning are the same as the query parameters of a
     * regular `/_all_docs` request.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<CloudantV1.Response<NodeJS.ReadableStream>>}
     */
    postAllDocsQueriesAsStream(params: CloudantV1.PostAllDocsQueriesAsStreamParams): Promise<CloudantV1.Response<NodeJS.ReadableStream>>;
    /**
     * Bulk modify multiple documents in a database.
     *
     * The bulk document API allows you to create, update, and delete multiple documents at the same time within a single
     * request. The basic operation is similar to creating, updating, or deleting a single document, except that you batch
     * the document structure and information.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.db - Path parameter to specify the database name.
     * @param {BulkDocs | NodeJS.ReadableStream | Buffer} params.bulkDocs - HTTP request body for postBulkDocs.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<CloudantV1.Response<CloudantV1.DocumentResult[]>>}
     */
    postBulkDocs(params: CloudantV1.PostBulkDocsParams): Promise<CloudantV1.Response<CloudantV1.DocumentResult[]>>;
    /**
     * Bulk query revision information for multiple documents.
     *
     * Fetch specific revisions or revision histories for multiple documents in bulk as replicators do.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.db - Path parameter to specify the database name.
     * @param {BulkGetQueryDocument[]} params.docs - List of document items to get in bulk.
     * @param {boolean} [params.attachments] - Query parameter to specify whether to include attachments bodies in a
     * response.
     * @param {boolean} [params.attEncodingInfo] - Query parameter to specify whether to include the encoding information
     * in attachment stubs if the particular attachment is compressed.
     * @param {boolean} [params.latest] - Query parameter to specify whether to force retrieving latest leaf revision, no
     * matter what rev was requested.
     * @param {boolean} [params.revs] - Query parameter to specify whether to include a list of all known document
     * revisions.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<CloudantV1.Response<CloudantV1.BulkGetResult>>}
     */
    postBulkGet(params: CloudantV1.PostBulkGetParams): Promise<CloudantV1.Response<CloudantV1.BulkGetResult>>;
    /**
     * Bulk query revision information for multiple documents as mixed.
     *
     * Fetch specific revisions or revision histories for multiple documents in bulk as replicators do.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.db - Path parameter to specify the database name.
     * @param {BulkGetQueryDocument[]} params.docs - List of document items to get in bulk.
     * @param {boolean} [params.attachments] - Query parameter to specify whether to include attachments bodies in a
     * response.
     * @param {boolean} [params.attEncodingInfo] - Query parameter to specify whether to include the encoding information
     * in attachment stubs if the particular attachment is compressed.
     * @param {boolean} [params.latest] - Query parameter to specify whether to force retrieving latest leaf revision, no
     * matter what rev was requested.
     * @param {boolean} [params.revs] - Query parameter to specify whether to include a list of all known document
     * revisions.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<CloudantV1.Response<NodeJS.ReadableStream>>}
     */
    postBulkGetAsMixed(params: CloudantV1.PostBulkGetAsMixedParams): Promise<CloudantV1.Response<NodeJS.ReadableStream>>;
    /**
     * Bulk query revision information for multiple documents as related.
     *
     * Fetch specific revisions or revision histories for multiple documents in bulk as replicators do.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.db - Path parameter to specify the database name.
     * @param {BulkGetQueryDocument[]} params.docs - List of document items to get in bulk.
     * @param {boolean} [params.attachments] - Query parameter to specify whether to include attachments bodies in a
     * response.
     * @param {boolean} [params.attEncodingInfo] - Query parameter to specify whether to include the encoding information
     * in attachment stubs if the particular attachment is compressed.
     * @param {boolean} [params.latest] - Query parameter to specify whether to force retrieving latest leaf revision, no
     * matter what rev was requested.
     * @param {boolean} [params.revs] - Query parameter to specify whether to include a list of all known document
     * revisions.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<CloudantV1.Response<NodeJS.ReadableStream>>}
     */
    postBulkGetAsRelated(params: CloudantV1.PostBulkGetAsRelatedParams): Promise<CloudantV1.Response<NodeJS.ReadableStream>>;
    /**
     * Bulk query revision information for multiple documents as stream.
     *
     * Fetch specific revisions or revision histories for multiple documents in bulk as replicators do.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.db - Path parameter to specify the database name.
     * @param {BulkGetQueryDocument[]} params.docs - List of document items to get in bulk.
     * @param {boolean} [params.attachments] - Query parameter to specify whether to include attachments bodies in a
     * response.
     * @param {boolean} [params.attEncodingInfo] - Query parameter to specify whether to include the encoding information
     * in attachment stubs if the particular attachment is compressed.
     * @param {boolean} [params.latest] - Query parameter to specify whether to force retrieving latest leaf revision, no
     * matter what rev was requested.
     * @param {boolean} [params.revs] - Query parameter to specify whether to include a list of all known document
     * revisions.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<CloudantV1.Response<NodeJS.ReadableStream>>}
     */
    postBulkGetAsStream(params: CloudantV1.PostBulkGetAsStreamParams): Promise<CloudantV1.Response<NodeJS.ReadableStream>>;
    /**
     * Delete a document.
     *
     * Marks the specified document as deleted by adding a `_deleted` field with the value `true`. Documents with this
     * field are not returned within requests anymore but stay in the database. You must supply the current (latest)
     * revision, either by using the `rev` parameter or by using the `If-Match` header to specify the revision.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.db - Path parameter to specify the database name.
     * @param {string} params.docId - Path parameter to specify the document ID.
     * @param {string} [params.ifMatch] - Header parameter to specify the document revision. Alternative to rev query
     * parameter.
     * @param {string} [params.batch] - Query parameter to specify whether to store in batch mode. The server will respond
     * with a HTTP 202 Accepted response code immediately.
     * @param {string} [params.rev] - Query parameter to specify a document revision.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<CloudantV1.Response<CloudantV1.DocumentResult>>}
     */
    deleteDocument(params: CloudantV1.DeleteDocumentParams): Promise<CloudantV1.Response<CloudantV1.DocumentResult>>;
    /**
     * Retrieve a document.
     *
     * Returns document with the specified `doc_id` from the specified database. Unless you request a specific revision,
     * the latest revision of the document is always returned.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.db - Path parameter to specify the database name.
     * @param {string} params.docId - Path parameter to specify the document ID.
     * @param {string} [params.ifNoneMatch] - Header parameter to specify a double quoted document revision token for
     * cache control.
     * @param {boolean} [params.attachments] - Query parameter to specify whether to include attachments bodies in a
     * response.
     * @param {boolean} [params.attEncodingInfo] - Query parameter to specify whether to include the encoding information
     * in attachment stubs if the particular attachment is compressed.
     * @param {boolean} [params.conflicts] - Query parameter to specify whether to include a list of conflicted revisions
     * in each returned document. Active only when `include_docs` is `true`.
     * @param {boolean} [params.deletedConflicts] - Query parameter to specify whether to include a list of deleted
     * conflicted revisions in the `_deleted_conflicts` property of the returned document.
     * @param {boolean} [params.latest] - Query parameter to specify whether to force retrieving latest leaf revision, no
     * matter what rev was requested.
     * @param {boolean} [params.localSeq] - Query parameter to specify whether to include the last update sequence for the
     * document.
     * @param {boolean} [params.meta] - Query parameter to specify whether to include document meta information. Acts the
     * same as specifying all of the conflicts, deleted_conflicts and open_revs query parameters.
     * @param {string} [params.rev] - Query parameter to specify a document revision.
     * @param {boolean} [params.revs] - Query parameter to specify whether to include a list of all known document
     * revisions.
     * @param {boolean} [params.revsInfo] - Query parameter to specify whether to includes detailed information for all
     * known document revisions.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<CloudantV1.Response<CloudantV1.Document>>}
     */
    getDocument(params: CloudantV1.GetDocumentParams): Promise<CloudantV1.Response<CloudantV1.Document>>;
    /**
     * Retrieve a document as mixed.
     *
     * Returns document with the specified `doc_id` from the specified database. Unless you request a specific revision,
     * the latest revision of the document is always returned.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.db - Path parameter to specify the database name.
     * @param {string} params.docId - Path parameter to specify the document ID.
     * @param {string} [params.ifNoneMatch] - Header parameter to specify a double quoted document revision token for
     * cache control.
     * @param {boolean} [params.attachments] - Query parameter to specify whether to include attachments bodies in a
     * response.
     * @param {boolean} [params.attEncodingInfo] - Query parameter to specify whether to include the encoding information
     * in attachment stubs if the particular attachment is compressed.
     * @param {boolean} [params.conflicts] - Query parameter to specify whether to include a list of conflicted revisions
     * in each returned document. Active only when `include_docs` is `true`.
     * @param {boolean} [params.deletedConflicts] - Query parameter to specify whether to include a list of deleted
     * conflicted revisions in the `_deleted_conflicts` property of the returned document.
     * @param {boolean} [params.latest] - Query parameter to specify whether to force retrieving latest leaf revision, no
     * matter what rev was requested.
     * @param {boolean} [params.localSeq] - Query parameter to specify whether to include the last update sequence for the
     * document.
     * @param {boolean} [params.meta] - Query parameter to specify whether to include document meta information. Acts the
     * same as specifying all of the conflicts, deleted_conflicts and open_revs query parameters.
     * @param {string} [params.rev] - Query parameter to specify a document revision.
     * @param {boolean} [params.revs] - Query parameter to specify whether to include a list of all known document
     * revisions.
     * @param {boolean} [params.revsInfo] - Query parameter to specify whether to includes detailed information for all
     * known document revisions.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<CloudantV1.Response<NodeJS.ReadableStream>>}
     */
    getDocumentAsMixed(params: CloudantV1.GetDocumentAsMixedParams): Promise<CloudantV1.Response<NodeJS.ReadableStream>>;
    /**
     * Retrieve a document as related.
     *
     * Returns document with the specified `doc_id` from the specified database. Unless you request a specific revision,
     * the latest revision of the document is always returned.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.db - Path parameter to specify the database name.
     * @param {string} params.docId - Path parameter to specify the document ID.
     * @param {string} [params.ifNoneMatch] - Header parameter to specify a double quoted document revision token for
     * cache control.
     * @param {boolean} [params.attachments] - Query parameter to specify whether to include attachments bodies in a
     * response.
     * @param {boolean} [params.attEncodingInfo] - Query parameter to specify whether to include the encoding information
     * in attachment stubs if the particular attachment is compressed.
     * @param {boolean} [params.conflicts] - Query parameter to specify whether to include a list of conflicted revisions
     * in each returned document. Active only when `include_docs` is `true`.
     * @param {boolean} [params.deletedConflicts] - Query parameter to specify whether to include a list of deleted
     * conflicted revisions in the `_deleted_conflicts` property of the returned document.
     * @param {boolean} [params.latest] - Query parameter to specify whether to force retrieving latest leaf revision, no
     * matter what rev was requested.
     * @param {boolean} [params.localSeq] - Query parameter to specify whether to include the last update sequence for the
     * document.
     * @param {boolean} [params.meta] - Query parameter to specify whether to include document meta information. Acts the
     * same as specifying all of the conflicts, deleted_conflicts and open_revs query parameters.
     * @param {string} [params.rev] - Query parameter to specify a document revision.
     * @param {boolean} [params.revs] - Query parameter to specify whether to include a list of all known document
     * revisions.
     * @param {boolean} [params.revsInfo] - Query parameter to specify whether to includes detailed information for all
     * known document revisions.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<CloudantV1.Response<NodeJS.ReadableStream>>}
     */
    getDocumentAsRelated(params: CloudantV1.GetDocumentAsRelatedParams): Promise<CloudantV1.Response<NodeJS.ReadableStream>>;
    /**
     * Retrieve a document as stream.
     *
     * Returns document with the specified `doc_id` from the specified database. Unless you request a specific revision,
     * the latest revision of the document is always returned.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.db - Path parameter to specify the database name.
     * @param {string} params.docId - Path parameter to specify the document ID.
     * @param {string} [params.ifNoneMatch] - Header parameter to specify a double quoted document revision token for
     * cache control.
     * @param {boolean} [params.attachments] - Query parameter to specify whether to include attachments bodies in a
     * response.
     * @param {boolean} [params.attEncodingInfo] - Query parameter to specify whether to include the encoding information
     * in attachment stubs if the particular attachment is compressed.
     * @param {boolean} [params.conflicts] - Query parameter to specify whether to include a list of conflicted revisions
     * in each returned document. Active only when `include_docs` is `true`.
     * @param {boolean} [params.deletedConflicts] - Query parameter to specify whether to include a list of deleted
     * conflicted revisions in the `_deleted_conflicts` property of the returned document.
     * @param {boolean} [params.latest] - Query parameter to specify whether to force retrieving latest leaf revision, no
     * matter what rev was requested.
     * @param {boolean} [params.localSeq] - Query parameter to specify whether to include the last update sequence for the
     * document.
     * @param {boolean} [params.meta] - Query parameter to specify whether to include document meta information. Acts the
     * same as specifying all of the conflicts, deleted_conflicts and open_revs query parameters.
     * @param {string} [params.rev] - Query parameter to specify a document revision.
     * @param {boolean} [params.revs] - Query parameter to specify whether to include a list of all known document
     * revisions.
     * @param {boolean} [params.revsInfo] - Query parameter to specify whether to includes detailed information for all
     * known document revisions.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<CloudantV1.Response<NodeJS.ReadableStream>>}
     */
    getDocumentAsStream(params: CloudantV1.GetDocumentAsStreamParams): Promise<CloudantV1.Response<NodeJS.ReadableStream>>;
    /**
     * Create or modify a document.
     *
     * Creates or modifies a document in the specified database.
     *
     * For creation, you must specify the document ID but you should not specify the revision.
     *
     * For modification, you must specify the document ID and a revision  identifier.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.db - Path parameter to specify the database name.
     * @param {string} params.docId - Path parameter to specify the document ID.
     * @param {Document | NodeJS.ReadableStream | Buffer} params.document - HTTP request body for Document operations.
     * @param {string} [params.contentType] - The type of the input.
     * @param {string} [params.ifMatch] - Header parameter to specify the document revision. Alternative to rev query
     * parameter.
     * @param {string} [params.batch] - Query parameter to specify whether to store in batch mode. The server will respond
     * with a HTTP 202 Accepted response code immediately.
     * @param {boolean} [params.newEdits] - Query parameter to specify whether to prevent insertion of conflicting
     * document revisions. If false, a well-formed _rev must be included in the document. False is used by the replicator
     * to insert documents into the target database even if that leads to the creation of conflicts.
     * @param {string} [params.rev] - Query parameter to specify a document revision.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<CloudantV1.Response<CloudantV1.DocumentResult>>}
     */
    putDocument(params: CloudantV1.PutDocumentParams): Promise<CloudantV1.Response<CloudantV1.DocumentResult>>;
    /*************************
     * designDocuments
     ************************/
    /**
     * Retrieve the HTTP headers for a design document.
     *
     * This method supports the same query arguments as the `GET /{db}/_design/{ddoc}` method, but the results include
     * only the header information (including design document size, and the revision as an ETag). The ETag header shows
     * the current revision for the requested design document, and if you requested the design document in full, the
     * Content-Length specifies the length of the data. If you add any of the query arguments, then the resulting HTTP
     * headers correspond to what is returned for the equivalent GET request.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.db - Path parameter to specify the database name.
     * @param {string} params.ddoc - Path parameter to specify the design document name. The design document name is the
     * design document ID excluding the `_design/` prefix.
     * @param {string} [params.ifNoneMatch] - Header parameter to specify a double quoted document revision token for
     * cache control.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<CloudantV1.Response<CloudantV1.EmptyObject>>}
     */
    headDesignDocument(params: CloudantV1.HeadDesignDocumentParams): Promise<CloudantV1.Response<CloudantV1.EmptyObject>>;
    /**
     * Delete a design document.
     *
     * Marks the specified design document as deleted by adding a `_deleted` field with the value `true`. Documents with
     * this field are not returned with requests but stay in the database. You must supply the current (latest) revision,
     * either by using the `rev` parameter or by using the `If-Match` header to specify the revision.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.db - Path parameter to specify the database name.
     * @param {string} params.ddoc - Path parameter to specify the design document name. The design document name is the
     * design document ID excluding the `_design/` prefix.
     * @param {string} [params.ifMatch] - Header parameter to specify the document revision. Alternative to rev query
     * parameter.
     * @param {string} [params.batch] - Query parameter to specify whether to store in batch mode. The server will respond
     * with a HTTP 202 Accepted response code immediately.
     * @param {string} [params.rev] - Query parameter to specify a document revision.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<CloudantV1.Response<CloudantV1.DocumentResult>>}
     */
    deleteDesignDocument(params: CloudantV1.DeleteDesignDocumentParams): Promise<CloudantV1.Response<CloudantV1.DocumentResult>>;
    /**
     * Retrieve a design document.
     *
     * Returns design document with the specified `doc_id` from the specified database. Unless you request a specific
     * revision, the current revision of the design document is always returned.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.db - Path parameter to specify the database name.
     * @param {string} params.ddoc - Path parameter to specify the design document name. The design document name is the
     * design document ID excluding the `_design/` prefix.
     * @param {string} [params.ifNoneMatch] - Header parameter to specify a double quoted document revision token for
     * cache control.
     * @param {boolean} [params.attachments] - Query parameter to specify whether to include attachments bodies in a
     * response.
     * @param {boolean} [params.attEncodingInfo] - Query parameter to specify whether to include the encoding information
     * in attachment stubs if the particular attachment is compressed.
     * @param {boolean} [params.conflicts] - Query parameter to specify whether to include a list of conflicted revisions
     * in each returned document. Active only when `include_docs` is `true`.
     * @param {boolean} [params.deletedConflicts] - Query parameter to specify whether to include a list of deleted
     * conflicted revisions in the `_deleted_conflicts` property of the returned document.
     * @param {boolean} [params.latest] - Query parameter to specify whether to force retrieving latest leaf revision, no
     * matter what rev was requested.
     * @param {boolean} [params.localSeq] - Query parameter to specify whether to include the last update sequence for the
     * document.
     * @param {boolean} [params.meta] - Query parameter to specify whether to include document meta information. Acts the
     * same as specifying all of the conflicts, deleted_conflicts and open_revs query parameters.
     * @param {string} [params.rev] - Query parameter to specify a document revision.
     * @param {boolean} [params.revs] - Query parameter to specify whether to include a list of all known document
     * revisions.
     * @param {boolean} [params.revsInfo] - Query parameter to specify whether to includes detailed information for all
     * known document revisions.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<CloudantV1.Response<CloudantV1.DesignDocument>>}
     */
    getDesignDocument(params: CloudantV1.GetDesignDocumentParams): Promise<CloudantV1.Response<CloudantV1.DesignDocument>>;
    /**
     * Create or modify a design document.
     *
     * The PUT method creates a new named design document, or creates a new revision of the existing design document.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.db - Path parameter to specify the database name.
     * @param {string} params.ddoc - Path parameter to specify the design document name. The design document name is the
     * design document ID excluding the `_design/` prefix.
     * @param {DesignDocument} params.designDocument - HTTP request body for DesignDocument operations.
     * @param {string} [params.ifMatch] - Header parameter to specify the document revision. Alternative to rev query
     * parameter.
     * @param {string} [params.batch] - Query parameter to specify whether to store in batch mode. The server will respond
     * with a HTTP 202 Accepted response code immediately.
     * @param {boolean} [params.newEdits] - Query parameter to specify whether to prevent insertion of conflicting
     * document revisions. If false, a well-formed _rev must be included in the document. False is used by the replicator
     * to insert documents into the target database even if that leads to the creation of conflicts.
     * @param {string} [params.rev] - Query parameter to specify a document revision.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<CloudantV1.Response<CloudantV1.DocumentResult>>}
     */
    putDesignDocument(params: CloudantV1.PutDesignDocumentParams): Promise<CloudantV1.Response<CloudantV1.DocumentResult>>;
    /**
     * Retrieve information about a design document.
     *
     * Retrieves information about the specified design document, including the index, index size, and current status of
     * the design document and associated index information.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.db - Path parameter to specify the database name.
     * @param {string} params.ddoc - Path parameter to specify the design document name. The design document name is the
     * design document ID excluding the `_design/` prefix.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<CloudantV1.Response<CloudantV1.DesignDocumentInformation>>}
     */
    getDesignDocumentInformation(params: CloudantV1.GetDesignDocumentInformationParams): Promise<CloudantV1.Response<CloudantV1.DesignDocumentInformation>>;
    /**
     * Query a list of all design documents in a database.
     *
     * Queries the index of all design document IDs. The results matching the request body parameters are returned in a
     * JSON object, including a list of matching design documents with basic contents, such as the ID and revision. When
     * no request body parameters are specified, results for all design documents in the database are returned.
     * Optionally, the design document content or additional metadata can be included in the response.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.db - Path parameter to specify the database name.
     * @param {boolean} [params.attEncodingInfo] - Parameter to specify whether to include the encoding information in
     * attachment stubs if the particular attachment is compressed.
     * @param {boolean} [params.attachments] - Parameter to specify whether to include attachments bodies in a response.
     * @param {boolean} [params.conflicts] - Parameter to specify whether to include a list of conflicted revisions in
     * each returned document. Active only when `include_docs` is `true`.
     * @param {boolean} [params.descending] - Parameter to specify whether to return the documents in descending by key
     * order.
     * @param {boolean} [params.includeDocs] - Parameter to specify whether to include the full content of the documents
     * in the response.
     * @param {boolean} [params.inclusiveEnd] - Parameter to specify whether the specified end key should be included in
     * the result.
     * @param {number} [params.limit] - Parameter to specify the number of returned documents to limit the result to.
     * @param {number} [params.skip] - Parameter to specify the number of records before starting to return the results.
     * @param {boolean} [params.updateSeq] - Parameter to specify whether to include in the response an update_seq value
     * indicating the sequence id of the database the view reflects.
     * @param {string} [params.endKey] - Schema for a document ID.
     * @param {string} [params.key] - Schema for a document ID.
     * @param {string[]} [params.keys] - Schema for a list of document IDs.
     * @param {string} [params.startKey] - Schema for a document ID.
     * @param {string} [params.accept] - The type of the response: application/json or application/octet-stream.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<CloudantV1.Response<CloudantV1.AllDocsResult>>}
     */
    postDesignDocs(params: CloudantV1.PostDesignDocsParams): Promise<CloudantV1.Response<CloudantV1.AllDocsResult>>;
    /**
     * Multi-query the list of all design documents.
     *
     * This operation runs multiple view queries of all design documents in the database. This operation enables you to
     * request numerous queries in a single request, in place of multiple POST `/{db}/_design_docs` requests.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.db - Path parameter to specify the database name.
     * @param {AllDocsQuery[]} params.queries - An array of query objects with fields for the parameters of each
     * individual view query to be executed. The field names and their meaning are the same as the query parameters of a
     * regular `/_all_docs` request.
     * @param {string} [params.accept] - The type of the response: application/json or application/octet-stream.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<CloudantV1.Response<CloudantV1.AllDocsQueriesResult>>}
     */
    postDesignDocsQueries(params: CloudantV1.PostDesignDocsQueriesParams): Promise<CloudantV1.Response<CloudantV1.AllDocsQueriesResult>>;
    /*************************
     * views
     ************************/
    /**
     * Query a MapReduce view.
     *
     * This operation queries the specified MapReduce view of the specified design document. By default, the map and
     * reduce functions of the view are run to update the view before returning the response. The advantage of using the
     * HTTP `POST` method is that the query is submitted as a JSON object in the request body. This avoids the limitations
     * of passing query options as URL query parameters of a `GET` request.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.db - Path parameter to specify the database name.
     * @param {string} params.ddoc - Path parameter to specify the design document name. The design document name is the
     * design document ID excluding the `_design/` prefix.
     * @param {string} params.view - Path parameter to specify the map reduce view function name.
     * @param {boolean} [params.attEncodingInfo] - Parameter to specify whether to include the encoding information in
     * attachment stubs if the particular attachment is compressed.
     * @param {boolean} [params.attachments] - Parameter to specify whether to include attachments bodies in a response.
     * @param {boolean} [params.conflicts] - Parameter to specify whether to include a list of conflicted revisions in
     * each returned document. Active only when `include_docs` is `true`.
     * @param {boolean} [params.descending] - Parameter to specify whether to return the documents in descending by key
     * order.
     * @param {boolean} [params.includeDocs] - Parameter to specify whether to include the full content of the documents
     * in the response.
     * @param {boolean} [params.inclusiveEnd] - Parameter to specify whether the specified end key should be included in
     * the result.
     * @param {number} [params.limit] - Parameter to specify the number of returned documents to limit the result to.
     * @param {number} [params.skip] - Parameter to specify the number of records before starting to return the results.
     * @param {boolean} [params.updateSeq] - Parameter to specify whether to include in the response an update_seq value
     * indicating the sequence id of the database the view reflects.
     * @param {any} [params.endKey] - Schema for any JSON type.
     * @param {string} [params.endKeyDocId] - Schema for a document ID.
     * @param {boolean} [params.group] - Parameter to specify whether to group reduced results by key. Valid only if a
     * reduce function defined in the view. If the view emits key in JSON array format, then it is possible to reduce
     * groups further based on the number of array elements with the `group_level` parameter.
     * @param {number} [params.groupLevel] - Parameter to specify a group level to be used. Only applicable if the view
     * uses keys that are JSON arrays. Implies group is `true`. Group level groups the reduced results by the specified
     * number of array elements. If unset, results are grouped by the entire array key, returning a reduced value for each
     * complete key.
     * @param {any} [params.key] - Schema for any JSON type.
     * @param {any[]} [params.keys] - Parameter to specify returning only documents that match any of the specified keys.
     * A JSON array of keys that match the key type emitted by the view function.
     * @param {boolean} [params.reduce] - Parameter to specify whether to use the reduce function in a map-reduce view.
     * Default is true when a reduce function is defined.
     * @param {boolean} [params.stable] - Query parameter to specify whether use the same replica of  the index on each
     * request. The default value `false` contacts all  replicas and returns the result from the first, fastest,
     * responder. Setting it to `true` when used in conjunction with `update=false`  may improve consistency at the
     * expense of increased latency and decreased throughput if the selected replica is not the fastest of the available
     * replicas.
     *
     * **Note:** In general setting `true` is discouraged and is strictly not recommended when using `update=true`.
     * @param {any} [params.startKey] - Schema for any JSON type.
     * @param {string} [params.startKeyDocId] - Schema for a document ID.
     * @param {string} [params.update] - Parameter to specify whether or not the view in question should be updated prior
     * to responding to the user.
     *
     * * `true` - Return results after the view is updated.
     * * `false` - Return results without updating the view.
     * * `lazy` - Return the view results without waiting for an update, but update them immediately after the request.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<CloudantV1.Response<CloudantV1.ViewResult>>}
     */
    postView(params: CloudantV1.PostViewParams): Promise<CloudantV1.Response<CloudantV1.ViewResult>>;
    /**
     * Query a MapReduce view as stream.
     *
     * This operation queries the specified MapReduce view of the specified design document. By default, the map and
     * reduce functions of the view are run to update the view before returning the response. The advantage of using the
     * HTTP `POST` method is that the query is submitted as a JSON object in the request body. This avoids the limitations
     * of passing query options as URL query parameters of a `GET` request.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.db - Path parameter to specify the database name.
     * @param {string} params.ddoc - Path parameter to specify the design document name. The design document name is the
     * design document ID excluding the `_design/` prefix.
     * @param {string} params.view - Path parameter to specify the map reduce view function name.
     * @param {boolean} [params.attEncodingInfo] - Parameter to specify whether to include the encoding information in
     * attachment stubs if the particular attachment is compressed.
     * @param {boolean} [params.attachments] - Parameter to specify whether to include attachments bodies in a response.
     * @param {boolean} [params.conflicts] - Parameter to specify whether to include a list of conflicted revisions in
     * each returned document. Active only when `include_docs` is `true`.
     * @param {boolean} [params.descending] - Parameter to specify whether to return the documents in descending by key
     * order.
     * @param {boolean} [params.includeDocs] - Parameter to specify whether to include the full content of the documents
     * in the response.
     * @param {boolean} [params.inclusiveEnd] - Parameter to specify whether the specified end key should be included in
     * the result.
     * @param {number} [params.limit] - Parameter to specify the number of returned documents to limit the result to.
     * @param {number} [params.skip] - Parameter to specify the number of records before starting to return the results.
     * @param {boolean} [params.updateSeq] - Parameter to specify whether to include in the response an update_seq value
     * indicating the sequence id of the database the view reflects.
     * @param {any} [params.endKey] - Schema for any JSON type.
     * @param {string} [params.endKeyDocId] - Schema for a document ID.
     * @param {boolean} [params.group] - Parameter to specify whether to group reduced results by key. Valid only if a
     * reduce function defined in the view. If the view emits key in JSON array format, then it is possible to reduce
     * groups further based on the number of array elements with the `group_level` parameter.
     * @param {number} [params.groupLevel] - Parameter to specify a group level to be used. Only applicable if the view
     * uses keys that are JSON arrays. Implies group is `true`. Group level groups the reduced results by the specified
     * number of array elements. If unset, results are grouped by the entire array key, returning a reduced value for each
     * complete key.
     * @param {any} [params.key] - Schema for any JSON type.
     * @param {any[]} [params.keys] - Parameter to specify returning only documents that match any of the specified keys.
     * A JSON array of keys that match the key type emitted by the view function.
     * @param {boolean} [params.reduce] - Parameter to specify whether to use the reduce function in a map-reduce view.
     * Default is true when a reduce function is defined.
     * @param {boolean} [params.stable] - Query parameter to specify whether use the same replica of  the index on each
     * request. The default value `false` contacts all  replicas and returns the result from the first, fastest,
     * responder. Setting it to `true` when used in conjunction with `update=false`  may improve consistency at the
     * expense of increased latency and decreased throughput if the selected replica is not the fastest of the available
     * replicas.
     *
     * **Note:** In general setting `true` is discouraged and is strictly not recommended when using `update=true`.
     * @param {any} [params.startKey] - Schema for any JSON type.
     * @param {string} [params.startKeyDocId] - Schema for a document ID.
     * @param {string} [params.update] - Parameter to specify whether or not the view in question should be updated prior
     * to responding to the user.
     *
     * * `true` - Return results after the view is updated.
     * * `false` - Return results without updating the view.
     * * `lazy` - Return the view results without waiting for an update, but update them immediately after the request.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<CloudantV1.Response<NodeJS.ReadableStream>>}
     */
    postViewAsStream(params: CloudantV1.PostViewAsStreamParams): Promise<CloudantV1.Response<NodeJS.ReadableStream>>;
    /**
     * Multi-query a MapReduce view.
     *
     * This operation runs multiple specified view queries against the view function from the specified design document.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.db - Path parameter to specify the database name.
     * @param {string} params.ddoc - Path parameter to specify the design document name. The design document name is the
     * design document ID excluding the `_design/` prefix.
     * @param {string} params.view - Path parameter to specify the map reduce view function name.
     * @param {ViewQuery[]} params.queries - An array of query objects with fields for the parameters of each individual
     * view query to be executed. The field names and their meaning are the same as the query parameters of a regular view
     * request.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<CloudantV1.Response<CloudantV1.ViewQueriesResult>>}
     */
    postViewQueries(params: CloudantV1.PostViewQueriesParams): Promise<CloudantV1.Response<CloudantV1.ViewQueriesResult>>;
    /**
     * Multi-query a MapReduce view as stream.
     *
     * This operation runs multiple specified view queries against the view function from the specified design document.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.db - Path parameter to specify the database name.
     * @param {string} params.ddoc - Path parameter to specify the design document name. The design document name is the
     * design document ID excluding the `_design/` prefix.
     * @param {string} params.view - Path parameter to specify the map reduce view function name.
     * @param {ViewQuery[]} params.queries - An array of query objects with fields for the parameters of each individual
     * view query to be executed. The field names and their meaning are the same as the query parameters of a regular view
     * request.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<CloudantV1.Response<NodeJS.ReadableStream>>}
     */
    postViewQueriesAsStream(params: CloudantV1.PostViewQueriesAsStreamParams): Promise<CloudantV1.Response<NodeJS.ReadableStream>>;
    /*************************
     * partitionedDatabases
     ************************/
    /**
     * Retrieve information about a database partition.
     *
     * Given a partition key, return the database name, sizes, partition, doc count, and doc delete count.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.db - Path parameter to specify the database name.
     * @param {string} params.partitionKey - Path parameter to specify the database partition key.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<CloudantV1.Response<CloudantV1.PartitionInformation>>}
     */
    getPartitionInformation(params: CloudantV1.GetPartitionInformationParams): Promise<CloudantV1.Response<CloudantV1.PartitionInformation>>;
    /**
     * Query a list of all documents in a database partition.
     *
     * Queries the primary index (all document IDs). The results that match the query parameters are returned in a JSON
     * object, including a list of matching documents with basic contents, such as the ID and revision. When no query
     * parameters are specified, results for all documents in the database partition are returned. Optionally, document
     * content or additional metadata can be included in the response.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.db - Path parameter to specify the database name.
     * @param {string} params.partitionKey - Path parameter to specify the database partition key.
     * @param {boolean} [params.attEncodingInfo] - Parameter to specify whether to include the encoding information in
     * attachment stubs if the particular attachment is compressed.
     * @param {boolean} [params.attachments] - Parameter to specify whether to include attachments bodies in a response.
     * @param {boolean} [params.conflicts] - Parameter to specify whether to include a list of conflicted revisions in
     * each returned document. Active only when `include_docs` is `true`.
     * @param {boolean} [params.descending] - Parameter to specify whether to return the documents in descending by key
     * order.
     * @param {boolean} [params.includeDocs] - Parameter to specify whether to include the full content of the documents
     * in the response.
     * @param {boolean} [params.inclusiveEnd] - Parameter to specify whether the specified end key should be included in
     * the result.
     * @param {number} [params.limit] - Parameter to specify the number of returned documents to limit the result to.
     * @param {number} [params.skip] - Parameter to specify the number of records before starting to return the results.
     * @param {boolean} [params.updateSeq] - Parameter to specify whether to include in the response an update_seq value
     * indicating the sequence id of the database the view reflects.
     * @param {string} [params.endKey] - Schema for a document ID.
     * @param {string} [params.key] - Schema for a document ID.
     * @param {string[]} [params.keys] - Schema for a list of document IDs.
     * @param {string} [params.startKey] - Schema for a document ID.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<CloudantV1.Response<CloudantV1.AllDocsResult>>}
     */
    postPartitionAllDocs(params: CloudantV1.PostPartitionAllDocsParams): Promise<CloudantV1.Response<CloudantV1.AllDocsResult>>;
    /**
     * Query a list of all documents in a database partition as stream.
     *
     * Queries the primary index (all document IDs). The results that match the query parameters are returned in a JSON
     * object, including a list of matching documents with basic contents, such as the ID and revision. When no query
     * parameters are specified, results for all documents in the database partition are returned. Optionally, document
     * content or additional metadata can be included in the response.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.db - Path parameter to specify the database name.
     * @param {string} params.partitionKey - Path parameter to specify the database partition key.
     * @param {boolean} [params.attEncodingInfo] - Parameter to specify whether to include the encoding information in
     * attachment stubs if the particular attachment is compressed.
     * @param {boolean} [params.attachments] - Parameter to specify whether to include attachments bodies in a response.
     * @param {boolean} [params.conflicts] - Parameter to specify whether to include a list of conflicted revisions in
     * each returned document. Active only when `include_docs` is `true`.
     * @param {boolean} [params.descending] - Parameter to specify whether to return the documents in descending by key
     * order.
     * @param {boolean} [params.includeDocs] - Parameter to specify whether to include the full content of the documents
     * in the response.
     * @param {boolean} [params.inclusiveEnd] - Parameter to specify whether the specified end key should be included in
     * the result.
     * @param {number} [params.limit] - Parameter to specify the number of returned documents to limit the result to.
     * @param {number} [params.skip] - Parameter to specify the number of records before starting to return the results.
     * @param {boolean} [params.updateSeq] - Parameter to specify whether to include in the response an update_seq value
     * indicating the sequence id of the database the view reflects.
     * @param {string} [params.endKey] - Schema for a document ID.
     * @param {string} [params.key] - Schema for a document ID.
     * @param {string[]} [params.keys] - Schema for a list of document IDs.
     * @param {string} [params.startKey] - Schema for a document ID.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<CloudantV1.Response<NodeJS.ReadableStream>>}
     */
    postPartitionAllDocsAsStream(params: CloudantV1.PostPartitionAllDocsAsStreamParams): Promise<CloudantV1.Response<NodeJS.ReadableStream>>;
    /**
     * Query a database partition search index.
     *
     * Partitioned Search indexes, which are defined in design documents, allow partition databases to be queried by using
     * Lucene Query Parser Syntax. Search indexes are defined by an index function, similar to a map function in MapReduce
     * views. The index function decides what data to index and store in the index.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.db - Path parameter to specify the database name.
     * @param {string} params.partitionKey - Path parameter to specify the database partition key.
     * @param {string} params.ddoc - Path parameter to specify the design document name. The design document name is the
     * design document ID excluding the `_design/` prefix.
     * @param {string} params.index - Path parameter to specify the index name.
     * @param {string} params.query - The Lucene query to execute.
     * @param {string} [params.bookmark] - Opaque bookmark token used when paginating results.
     * @param {string[]} [params.highlightFields] - Specifies which fields to highlight. If specified, the result object
     * contains a highlights field with an entry for each specified field.
     * @param {number} [params.highlightNumber] - Number of fragments that are returned in highlights. If the search term
     * occurs less often than the number of fragments that are specified, longer fragments are returned.
     * @param {string} [params.highlightPostTag] - A string that is inserted after the highlighted word in the highlights
     * output.
     * @param {string} [params.highlightPreTag] - A string that is inserted before the highlighted word in the highlights
     * output.
     * @param {number} [params.highlightSize] - Number of characters in each fragment for highlights.
     * @param {boolean} [params.includeDocs] - Include the full content of the documents in the return.
     * @param {string[]} [params.includeFields] - A JSON array of field names to include in search results. Any fields
     * that are included must be indexed with the store:true option. The default is all fields.
     * @param {number} [params.limit] - Limit the number of the returned documents to the specified number.
     * @param {string[]} [params.sort] - Specifies the sort order of the results. In a grouped search (when group_field is
     * used), this parameter specifies the sort order within a group. The default sort order is relevance.  A JSON string
     * of the form "fieldname&lt;type&gt;" or "-fieldname&lt;type&gt;" for descending order, where fieldname is the name
     * of a string or number field, and type is either a number, a string, or a JSON array of strings. The type part is
     * optional, and defaults to number. Some examples are "foo", "-foo", "bar&lt;string&gt;", "-foo&lt;number&gt;" and
     * ["-foo&lt;number&gt;", "bar&lt;string&gt;"]. String fields that are used for sorting must not be analyzed fields.
     * Fields that are used for sorting must be indexed by the same indexer that is used for the search query.
     * @param {string} [params.stale] - Do not wait for the index to finish building to return results.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<CloudantV1.Response<CloudantV1.SearchResult>>}
     */
    postPartitionSearch(params: CloudantV1.PostPartitionSearchParams): Promise<CloudantV1.Response<CloudantV1.SearchResult>>;
    /**
     * Query a database partition search index as stream.
     *
     * Partitioned Search indexes, which are defined in design documents, allow partition databases to be queried by using
     * Lucene Query Parser Syntax. Search indexes are defined by an index function, similar to a map function in MapReduce
     * views. The index function decides what data to index and store in the index.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.db - Path parameter to specify the database name.
     * @param {string} params.partitionKey - Path parameter to specify the database partition key.
     * @param {string} params.ddoc - Path parameter to specify the design document name. The design document name is the
     * design document ID excluding the `_design/` prefix.
     * @param {string} params.index - Path parameter to specify the index name.
     * @param {string} params.query - The Lucene query to execute.
     * @param {string} [params.bookmark] - Opaque bookmark token used when paginating results.
     * @param {string[]} [params.highlightFields] - Specifies which fields to highlight. If specified, the result object
     * contains a highlights field with an entry for each specified field.
     * @param {number} [params.highlightNumber] - Number of fragments that are returned in highlights. If the search term
     * occurs less often than the number of fragments that are specified, longer fragments are returned.
     * @param {string} [params.highlightPostTag] - A string that is inserted after the highlighted word in the highlights
     * output.
     * @param {string} [params.highlightPreTag] - A string that is inserted before the highlighted word in the highlights
     * output.
     * @param {number} [params.highlightSize] - Number of characters in each fragment for highlights.
     * @param {boolean} [params.includeDocs] - Include the full content of the documents in the return.
     * @param {string[]} [params.includeFields] - A JSON array of field names to include in search results. Any fields
     * that are included must be indexed with the store:true option. The default is all fields.
     * @param {number} [params.limit] - Limit the number of the returned documents to the specified number.
     * @param {string[]} [params.sort] - Specifies the sort order of the results. In a grouped search (when group_field is
     * used), this parameter specifies the sort order within a group. The default sort order is relevance.  A JSON string
     * of the form "fieldname&lt;type&gt;" or "-fieldname&lt;type&gt;" for descending order, where fieldname is the name
     * of a string or number field, and type is either a number, a string, or a JSON array of strings. The type part is
     * optional, and defaults to number. Some examples are "foo", "-foo", "bar&lt;string&gt;", "-foo&lt;number&gt;" and
     * ["-foo&lt;number&gt;", "bar&lt;string&gt;"]. String fields that are used for sorting must not be analyzed fields.
     * Fields that are used for sorting must be indexed by the same indexer that is used for the search query.
     * @param {string} [params.stale] - Do not wait for the index to finish building to return results.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<CloudantV1.Response<NodeJS.ReadableStream>>}
     */
    postPartitionSearchAsStream(params: CloudantV1.PostPartitionSearchAsStreamParams): Promise<CloudantV1.Response<NodeJS.ReadableStream>>;
    /**
     * Query a database partition MapReduce view function.
     *
     * Runs the specified view function from the specified design document. Unlike `GET /{db}/_design/{ddoc}/_view/{view}`
     * for accessing views, the POST method supports the specification of explicit keys to be retrieved from the view
     * results. The remainder of the POST view functionality is identical to the `GET /{db}/_design/{ddoc}/_view/{view}`
     * API.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.db - Path parameter to specify the database name.
     * @param {string} params.partitionKey - Path parameter to specify the database partition key.
     * @param {string} params.ddoc - Path parameter to specify the design document name. The design document name is the
     * design document ID excluding the `_design/` prefix.
     * @param {string} params.view - Path parameter to specify the map reduce view function name.
     * @param {boolean} [params.attEncodingInfo] - Parameter to specify whether to include the encoding information in
     * attachment stubs if the particular attachment is compressed.
     * @param {boolean} [params.attachments] - Parameter to specify whether to include attachments bodies in a response.
     * @param {boolean} [params.conflicts] - Parameter to specify whether to include a list of conflicted revisions in
     * each returned document. Active only when `include_docs` is `true`.
     * @param {boolean} [params.descending] - Parameter to specify whether to return the documents in descending by key
     * order.
     * @param {boolean} [params.includeDocs] - Parameter to specify whether to include the full content of the documents
     * in the response.
     * @param {boolean} [params.inclusiveEnd] - Parameter to specify whether the specified end key should be included in
     * the result.
     * @param {number} [params.limit] - Parameter to specify the number of returned documents to limit the result to.
     * @param {number} [params.skip] - Parameter to specify the number of records before starting to return the results.
     * @param {boolean} [params.updateSeq] - Parameter to specify whether to include in the response an update_seq value
     * indicating the sequence id of the database the view reflects.
     * @param {any} [params.endKey] - Schema for any JSON type.
     * @param {string} [params.endKeyDocId] - Schema for a document ID.
     * @param {boolean} [params.group] - Parameter to specify whether to group reduced results by key. Valid only if a
     * reduce function defined in the view. If the view emits key in JSON array format, then it is possible to reduce
     * groups further based on the number of array elements with the `group_level` parameter.
     * @param {number} [params.groupLevel] - Parameter to specify a group level to be used. Only applicable if the view
     * uses keys that are JSON arrays. Implies group is `true`. Group level groups the reduced results by the specified
     * number of array elements. If unset, results are grouped by the entire array key, returning a reduced value for each
     * complete key.
     * @param {any} [params.key] - Schema for any JSON type.
     * @param {any[]} [params.keys] - Parameter to specify returning only documents that match any of the specified keys.
     * A JSON array of keys that match the key type emitted by the view function.
     * @param {boolean} [params.reduce] - Parameter to specify whether to use the reduce function in a map-reduce view.
     * Default is true when a reduce function is defined.
     * @param {any} [params.startKey] - Schema for any JSON type.
     * @param {string} [params.startKeyDocId] - Schema for a document ID.
     * @param {string} [params.update] - Parameter to specify whether or not the view in question should be updated prior
     * to responding to the user.
     *
     * * `true` - Return results after the view is updated.
     * * `false` - Return results without updating the view.
     * * `lazy` - Return the view results without waiting for an update, but update them immediately after the request.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<CloudantV1.Response<CloudantV1.ViewResult>>}
     */
    postPartitionView(params: CloudantV1.PostPartitionViewParams): Promise<CloudantV1.Response<CloudantV1.ViewResult>>;
    /**
     * Query a database partition MapReduce view function as stream.
     *
     * Runs the specified view function from the specified design document. Unlike `GET /{db}/_design/{ddoc}/_view/{view}`
     * for accessing views, the POST method supports the specification of explicit keys to be retrieved from the view
     * results. The remainder of the POST view functionality is identical to the `GET /{db}/_design/{ddoc}/_view/{view}`
     * API.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.db - Path parameter to specify the database name.
     * @param {string} params.partitionKey - Path parameter to specify the database partition key.
     * @param {string} params.ddoc - Path parameter to specify the design document name. The design document name is the
     * design document ID excluding the `_design/` prefix.
     * @param {string} params.view - Path parameter to specify the map reduce view function name.
     * @param {boolean} [params.attEncodingInfo] - Parameter to specify whether to include the encoding information in
     * attachment stubs if the particular attachment is compressed.
     * @param {boolean} [params.attachments] - Parameter to specify whether to include attachments bodies in a response.
     * @param {boolean} [params.conflicts] - Parameter to specify whether to include a list of conflicted revisions in
     * each returned document. Active only when `include_docs` is `true`.
     * @param {boolean} [params.descending] - Parameter to specify whether to return the documents in descending by key
     * order.
     * @param {boolean} [params.includeDocs] - Parameter to specify whether to include the full content of the documents
     * in the response.
     * @param {boolean} [params.inclusiveEnd] - Parameter to specify whether the specified end key should be included in
     * the result.
     * @param {number} [params.limit] - Parameter to specify the number of returned documents to limit the result to.
     * @param {number} [params.skip] - Parameter to specify the number of records before starting to return the results.
     * @param {boolean} [params.updateSeq] - Parameter to specify whether to include in the response an update_seq value
     * indicating the sequence id of the database the view reflects.
     * @param {any} [params.endKey] - Schema for any JSON type.
     * @param {string} [params.endKeyDocId] - Schema for a document ID.
     * @param {boolean} [params.group] - Parameter to specify whether to group reduced results by key. Valid only if a
     * reduce function defined in the view. If the view emits key in JSON array format, then it is possible to reduce
     * groups further based on the number of array elements with the `group_level` parameter.
     * @param {number} [params.groupLevel] - Parameter to specify a group level to be used. Only applicable if the view
     * uses keys that are JSON arrays. Implies group is `true`. Group level groups the reduced results by the specified
     * number of array elements. If unset, results are grouped by the entire array key, returning a reduced value for each
     * complete key.
     * @param {any} [params.key] - Schema for any JSON type.
     * @param {any[]} [params.keys] - Parameter to specify returning only documents that match any of the specified keys.
     * A JSON array of keys that match the key type emitted by the view function.
     * @param {boolean} [params.reduce] - Parameter to specify whether to use the reduce function in a map-reduce view.
     * Default is true when a reduce function is defined.
     * @param {any} [params.startKey] - Schema for any JSON type.
     * @param {string} [params.startKeyDocId] - Schema for a document ID.
     * @param {string} [params.update] - Parameter to specify whether or not the view in question should be updated prior
     * to responding to the user.
     *
     * * `true` - Return results after the view is updated.
     * * `false` - Return results without updating the view.
     * * `lazy` - Return the view results without waiting for an update, but update them immediately after the request.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<CloudantV1.Response<NodeJS.ReadableStream>>}
     */
    postPartitionViewAsStream(params: CloudantV1.PostPartitionViewAsStreamParams): Promise<CloudantV1.Response<NodeJS.ReadableStream>>;
    /**
     * Retrieve information about which partition index is used for a query.
     *
     * Shows which index is being used by the query. Parameters are the same as the
     * [`/{db}/_partition/{partition_key}/_find` endpoint](#postpartitionfind-queries).
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.db - Path parameter to specify the database name.
     * @param {string} params.partitionKey - Path parameter to specify the database partition key.
     * @param {JsonObject} params.selector - JSON object describing criteria used to select documents. The selector
     * specifies fields in the document, and provides an expression to evaluate with the field content or other data.
     *
     * The selector object must:
     *   * Be structured as valid JSON.
     *   * Contain a valid query expression.
     *
     * Using a selector is significantly more efficient than using a JavaScript filter function, and is the recommended
     * option if filtering on document attributes only.
     *
     * Elementary selector syntax requires you to specify one or more fields, and the corresponding values required for
     * those fields. You can create more complex selector expressions by combining operators.
     *
     * Operators are identified by the use of a dollar sign `$` prefix in the name field.
     *
     * There are two core types of operators in the selector syntax:
     * * Combination operators: applied at the topmost level of selection. They are used to combine selectors. A
     * combination operator takes a single argument. The argument is either another selector, or an array of selectors.
     * * Condition operators: are specific to a field, and are used to evaluate the value stored in that field. For
     * instance, the basic `$eq` operator matches when the specified field contains a value that is equal to the supplied
     * argument. See [the Cloudant Docs](https://cloud.ibm.com/docs/Cloudant?topic=Cloudant-operators) for a list of all
     * available combination and conditional operators.
     * * Only equality operators such as `$eq`, `$gt`, `$gte`, `$lt`, and `$lte` (but not `$ne`) can be used as the basis
     * of a query. You should include at least one of these in a selector.
     *
     * For further reference see
     * [selector syntax](https://cloud.ibm.com/docs/Cloudant?topic=Cloudant-selector-syntax).
     * @param {string} [params.bookmark] - Opaque bookmark token used when paginating results.
     * @param {boolean} [params.conflicts] - A boolean value that indicates whether or not to include information about
     * existing conflicts in the document.
     * @param {boolean} [params.executionStats] - Use this option to find information about the query that was run. This
     * information includes total key lookups, total document lookups (when `include_docs=true` is used), and total quorum
     * document lookups (when each document replica is fetched).
     * @param {string[]} [params.fields] - JSON array that uses the field syntax. Use this parameter to specify which
     * fields of a document must be returned. If it is omitted or empty, the entire document is returned.
     * @param {number} [params.limit] - Maximum number of results returned. The `type: text` indexes are limited to 200
     * results when queried.
     * @param {number} [params.skip] - Skip the first 'n' results, where 'n' is the value that is specified.
     * @param {JsonObject[]} [params.sort] - The sort field contains a list of pairs, each mapping a field name to a sort
     * direction (asc or desc). The first field name and direction pair is the topmost level of sort. The second pair, if
     * provided, is the next level of sort. The field can be any field, using dotted notation if desired for sub-document
     * fields.
     *
     * For example in JSON: `[{"fieldName1": "desc"}, {"fieldName2.subFieldName1": "desc"}]`
     *
     * When sorting with multiple fields, ensure that there is an index already defined with all the sort fields in the
     * same order and each object in the sort array has a single key or at least one of the sort fields is included in the
     * selector. All sorting fields must use the same sort direction, either all ascending or all descending.
     * @param {boolean} [params.stable] - Whether or not the view results should be returned from a "stable" set of
     * shards.
     * @param {string} [params.update] - Whether to update the index prior to returning the result.
     * @param {string[]} [params.useIndex] - Use this option to identify a specific index for query to run against, rather
     * than by using the IBM Cloudant Query algorithm to find the best index.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<CloudantV1.Response<CloudantV1.ExplainResult>>}
     */
    postPartitionExplain(params: CloudantV1.PostPartitionExplainParams): Promise<CloudantV1.Response<CloudantV1.ExplainResult>>;
    /**
     * Query a database partition index by using selector syntax.
     *
     * Query documents by using a declarative JSON querying syntax. It's best practice to create an appropriate index for
     * all fields in selector by using the `_index` endpoint.
     *
     * Queries without an appropriate backing index will fallback to using the built-in `_all_docs` index. This is not
     * recommended because it has a noticeable performance impact causing a full scan of the partition with each request.
     * In this case the response body will include a warning field recommending that an index is created.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.db - Path parameter to specify the database name.
     * @param {string} params.partitionKey - Path parameter to specify the database partition key.
     * @param {JsonObject} params.selector - JSON object describing criteria used to select documents. The selector
     * specifies fields in the document, and provides an expression to evaluate with the field content or other data.
     *
     * The selector object must:
     *   * Be structured as valid JSON.
     *   * Contain a valid query expression.
     *
     * Using a selector is significantly more efficient than using a JavaScript filter function, and is the recommended
     * option if filtering on document attributes only.
     *
     * Elementary selector syntax requires you to specify one or more fields, and the corresponding values required for
     * those fields. You can create more complex selector expressions by combining operators.
     *
     * Operators are identified by the use of a dollar sign `$` prefix in the name field.
     *
     * There are two core types of operators in the selector syntax:
     * * Combination operators: applied at the topmost level of selection. They are used to combine selectors. A
     * combination operator takes a single argument. The argument is either another selector, or an array of selectors.
     * * Condition operators: are specific to a field, and are used to evaluate the value stored in that field. For
     * instance, the basic `$eq` operator matches when the specified field contains a value that is equal to the supplied
     * argument. See [the Cloudant Docs](https://cloud.ibm.com/docs/Cloudant?topic=Cloudant-operators) for a list of all
     * available combination and conditional operators.
     * * Only equality operators such as `$eq`, `$gt`, `$gte`, `$lt`, and `$lte` (but not `$ne`) can be used as the basis
     * of a query. You should include at least one of these in a selector.
     *
     * For further reference see
     * [selector syntax](https://cloud.ibm.com/docs/Cloudant?topic=Cloudant-selector-syntax).
     * @param {string} [params.bookmark] - Opaque bookmark token used when paginating results.
     * @param {boolean} [params.conflicts] - A boolean value that indicates whether or not to include information about
     * existing conflicts in the document.
     * @param {boolean} [params.executionStats] - Use this option to find information about the query that was run. This
     * information includes total key lookups, total document lookups (when `include_docs=true` is used), and total quorum
     * document lookups (when each document replica is fetched).
     * @param {string[]} [params.fields] - JSON array that uses the field syntax. Use this parameter to specify which
     * fields of a document must be returned. If it is omitted or empty, the entire document is returned.
     * @param {number} [params.limit] - Maximum number of results returned. The `type: text` indexes are limited to 200
     * results when queried.
     * @param {number} [params.skip] - Skip the first 'n' results, where 'n' is the value that is specified.
     * @param {JsonObject[]} [params.sort] - The sort field contains a list of pairs, each mapping a field name to a sort
     * direction (asc or desc). The first field name and direction pair is the topmost level of sort. The second pair, if
     * provided, is the next level of sort. The field can be any field, using dotted notation if desired for sub-document
     * fields.
     *
     * For example in JSON: `[{"fieldName1": "desc"}, {"fieldName2.subFieldName1": "desc"}]`
     *
     * When sorting with multiple fields, ensure that there is an index already defined with all the sort fields in the
     * same order and each object in the sort array has a single key or at least one of the sort fields is included in the
     * selector. All sorting fields must use the same sort direction, either all ascending or all descending.
     * @param {boolean} [params.stable] - Whether or not the view results should be returned from a "stable" set of
     * shards.
     * @param {string} [params.update] - Whether to update the index prior to returning the result.
     * @param {string[]} [params.useIndex] - Use this option to identify a specific index for query to run against, rather
     * than by using the IBM Cloudant Query algorithm to find the best index.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<CloudantV1.Response<CloudantV1.FindResult>>}
     */
    postPartitionFind(params: CloudantV1.PostPartitionFindParams): Promise<CloudantV1.Response<CloudantV1.FindResult>>;
    /**
     * Query a database partition index by using selector syntax as stream.
     *
     * Query documents by using a declarative JSON querying syntax. It's best practice to create an appropriate index for
     * all fields in selector by using the `_index` endpoint.
     *
     * Queries without an appropriate backing index will fallback to using the built-in `_all_docs` index. This is not
     * recommended because it has a noticeable performance impact causing a full scan of the partition with each request.
     * In this case the response body will include a warning field recommending that an index is created.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.db - Path parameter to specify the database name.
     * @param {string} params.partitionKey - Path parameter to specify the database partition key.
     * @param {JsonObject} params.selector - JSON object describing criteria used to select documents. The selector
     * specifies fields in the document, and provides an expression to evaluate with the field content or other data.
     *
     * The selector object must:
     *   * Be structured as valid JSON.
     *   * Contain a valid query expression.
     *
     * Using a selector is significantly more efficient than using a JavaScript filter function, and is the recommended
     * option if filtering on document attributes only.
     *
     * Elementary selector syntax requires you to specify one or more fields, and the corresponding values required for
     * those fields. You can create more complex selector expressions by combining operators.
     *
     * Operators are identified by the use of a dollar sign `$` prefix in the name field.
     *
     * There are two core types of operators in the selector syntax:
     * * Combination operators: applied at the topmost level of selection. They are used to combine selectors. A
     * combination operator takes a single argument. The argument is either another selector, or an array of selectors.
     * * Condition operators: are specific to a field, and are used to evaluate the value stored in that field. For
     * instance, the basic `$eq` operator matches when the specified field contains a value that is equal to the supplied
     * argument. See [the Cloudant Docs](https://cloud.ibm.com/docs/Cloudant?topic=Cloudant-operators) for a list of all
     * available combination and conditional operators.
     * * Only equality operators such as `$eq`, `$gt`, `$gte`, `$lt`, and `$lte` (but not `$ne`) can be used as the basis
     * of a query. You should include at least one of these in a selector.
     *
     * For further reference see
     * [selector syntax](https://cloud.ibm.com/docs/Cloudant?topic=Cloudant-selector-syntax).
     * @param {string} [params.bookmark] - Opaque bookmark token used when paginating results.
     * @param {boolean} [params.conflicts] - A boolean value that indicates whether or not to include information about
     * existing conflicts in the document.
     * @param {boolean} [params.executionStats] - Use this option to find information about the query that was run. This
     * information includes total key lookups, total document lookups (when `include_docs=true` is used), and total quorum
     * document lookups (when each document replica is fetched).
     * @param {string[]} [params.fields] - JSON array that uses the field syntax. Use this parameter to specify which
     * fields of a document must be returned. If it is omitted or empty, the entire document is returned.
     * @param {number} [params.limit] - Maximum number of results returned. The `type: text` indexes are limited to 200
     * results when queried.
     * @param {number} [params.skip] - Skip the first 'n' results, where 'n' is the value that is specified.
     * @param {JsonObject[]} [params.sort] - The sort field contains a list of pairs, each mapping a field name to a sort
     * direction (asc or desc). The first field name and direction pair is the topmost level of sort. The second pair, if
     * provided, is the next level of sort. The field can be any field, using dotted notation if desired for sub-document
     * fields.
     *
     * For example in JSON: `[{"fieldName1": "desc"}, {"fieldName2.subFieldName1": "desc"}]`
     *
     * When sorting with multiple fields, ensure that there is an index already defined with all the sort fields in the
     * same order and each object in the sort array has a single key or at least one of the sort fields is included in the
     * selector. All sorting fields must use the same sort direction, either all ascending or all descending.
     * @param {boolean} [params.stable] - Whether or not the view results should be returned from a "stable" set of
     * shards.
     * @param {string} [params.update] - Whether to update the index prior to returning the result.
     * @param {string[]} [params.useIndex] - Use this option to identify a specific index for query to run against, rather
     * than by using the IBM Cloudant Query algorithm to find the best index.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<CloudantV1.Response<NodeJS.ReadableStream>>}
     */
    postPartitionFindAsStream(params: CloudantV1.PostPartitionFindAsStreamParams): Promise<CloudantV1.Response<NodeJS.ReadableStream>>;
    /*************************
     * queries
     ************************/
    /**
     * Retrieve information about which index is used for a query.
     *
     * Shows which index is being used by the query. Parameters are the same as the [`_find` endpoint](#postfind).
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.db - Path parameter to specify the database name.
     * @param {JsonObject} params.selector - JSON object describing criteria used to select documents. The selector
     * specifies fields in the document, and provides an expression to evaluate with the field content or other data.
     *
     * The selector object must:
     *   * Be structured as valid JSON.
     *   * Contain a valid query expression.
     *
     * Using a selector is significantly more efficient than using a JavaScript filter function, and is the recommended
     * option if filtering on document attributes only.
     *
     * Elementary selector syntax requires you to specify one or more fields, and the corresponding values required for
     * those fields. You can create more complex selector expressions by combining operators.
     *
     * Operators are identified by the use of a dollar sign `$` prefix in the name field.
     *
     * There are two core types of operators in the selector syntax:
     * * Combination operators: applied at the topmost level of selection. They are used to combine selectors. A
     * combination operator takes a single argument. The argument is either another selector, or an array of selectors.
     * * Condition operators: are specific to a field, and are used to evaluate the value stored in that field. For
     * instance, the basic `$eq` operator matches when the specified field contains a value that is equal to the supplied
     * argument. See [the Cloudant Docs](https://cloud.ibm.com/docs/Cloudant?topic=Cloudant-operators) for a list of all
     * available combination and conditional operators.
     * * Only equality operators such as `$eq`, `$gt`, `$gte`, `$lt`, and `$lte` (but not `$ne`) can be used as the basis
     * of a query. You should include at least one of these in a selector.
     *
     * For further reference see
     * [selector syntax](https://cloud.ibm.com/docs/Cloudant?topic=Cloudant-selector-syntax).
     * @param {string} [params.bookmark] - Opaque bookmark token used when paginating results.
     * @param {boolean} [params.conflicts] - A boolean value that indicates whether or not to include information about
     * existing conflicts in the document.
     * @param {boolean} [params.executionStats] - Use this option to find information about the query that was run. This
     * information includes total key lookups, total document lookups (when `include_docs=true` is used), and total quorum
     * document lookups (when each document replica is fetched).
     * @param {string[]} [params.fields] - JSON array that uses the field syntax. Use this parameter to specify which
     * fields of a document must be returned. If it is omitted or empty, the entire document is returned.
     * @param {number} [params.limit] - Maximum number of results returned. The `type: text` indexes are limited to 200
     * results when queried.
     * @param {number} [params.skip] - Skip the first 'n' results, where 'n' is the value that is specified.
     * @param {JsonObject[]} [params.sort] - The sort field contains a list of pairs, each mapping a field name to a sort
     * direction (asc or desc). The first field name and direction pair is the topmost level of sort. The second pair, if
     * provided, is the next level of sort. The field can be any field, using dotted notation if desired for sub-document
     * fields.
     *
     * For example in JSON: `[{"fieldName1": "desc"}, {"fieldName2.subFieldName1": "desc"}]`
     *
     * When sorting with multiple fields, ensure that there is an index already defined with all the sort fields in the
     * same order and each object in the sort array has a single key or at least one of the sort fields is included in the
     * selector. All sorting fields must use the same sort direction, either all ascending or all descending.
     * @param {boolean} [params.stable] - Whether or not the view results should be returned from a "stable" set of
     * shards.
     * @param {string} [params.update] - Whether to update the index prior to returning the result.
     * @param {string[]} [params.useIndex] - Use this option to identify a specific index for query to run against, rather
     * than by using the IBM Cloudant Query algorithm to find the best index.
     * @param {number} [params.r] - The read quorum that is needed for the result. The value defaults to 1, in which case
     * the document that was found in the index is returned. If set to a higher value, each document is read from at least
     * that many replicas before it is returned in the results. The request will take more time than using only the
     * document that is stored locally with the index.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<CloudantV1.Response<CloudantV1.ExplainResult>>}
     */
    postExplain(params: CloudantV1.PostExplainParams): Promise<CloudantV1.Response<CloudantV1.ExplainResult>>;
    /**
     * Query an index by using selector syntax.
     *
     * Query documents by using a declarative JSON querying syntax. It's best practice to create an appropriate index for
     * all fields in selector by using the `_index` endpoint.
     *
     * Queries without an appropriate backing index will fallback to using the built-in `_all_docs` index. This is not
     * recommended because it has a significant performance impact causing a full scan of the database with each request.
     * In this case the response body will include a warning field recommending that an index is created.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.db - Path parameter to specify the database name.
     * @param {JsonObject} params.selector - JSON object describing criteria used to select documents. The selector
     * specifies fields in the document, and provides an expression to evaluate with the field content or other data.
     *
     * The selector object must:
     *   * Be structured as valid JSON.
     *   * Contain a valid query expression.
     *
     * Using a selector is significantly more efficient than using a JavaScript filter function, and is the recommended
     * option if filtering on document attributes only.
     *
     * Elementary selector syntax requires you to specify one or more fields, and the corresponding values required for
     * those fields. You can create more complex selector expressions by combining operators.
     *
     * Operators are identified by the use of a dollar sign `$` prefix in the name field.
     *
     * There are two core types of operators in the selector syntax:
     * * Combination operators: applied at the topmost level of selection. They are used to combine selectors. A
     * combination operator takes a single argument. The argument is either another selector, or an array of selectors.
     * * Condition operators: are specific to a field, and are used to evaluate the value stored in that field. For
     * instance, the basic `$eq` operator matches when the specified field contains a value that is equal to the supplied
     * argument. See [the Cloudant Docs](https://cloud.ibm.com/docs/Cloudant?topic=Cloudant-operators) for a list of all
     * available combination and conditional operators.
     * * Only equality operators such as `$eq`, `$gt`, `$gte`, `$lt`, and `$lte` (but not `$ne`) can be used as the basis
     * of a query. You should include at least one of these in a selector.
     *
     * For further reference see
     * [selector syntax](https://cloud.ibm.com/docs/Cloudant?topic=Cloudant-selector-syntax).
     * @param {string} [params.bookmark] - Opaque bookmark token used when paginating results.
     * @param {boolean} [params.conflicts] - A boolean value that indicates whether or not to include information about
     * existing conflicts in the document.
     * @param {boolean} [params.executionStats] - Use this option to find information about the query that was run. This
     * information includes total key lookups, total document lookups (when `include_docs=true` is used), and total quorum
     * document lookups (when each document replica is fetched).
     * @param {string[]} [params.fields] - JSON array that uses the field syntax. Use this parameter to specify which
     * fields of a document must be returned. If it is omitted or empty, the entire document is returned.
     * @param {number} [params.limit] - Maximum number of results returned. The `type: text` indexes are limited to 200
     * results when queried.
     * @param {number} [params.skip] - Skip the first 'n' results, where 'n' is the value that is specified.
     * @param {JsonObject[]} [params.sort] - The sort field contains a list of pairs, each mapping a field name to a sort
     * direction (asc or desc). The first field name and direction pair is the topmost level of sort. The second pair, if
     * provided, is the next level of sort. The field can be any field, using dotted notation if desired for sub-document
     * fields.
     *
     * For example in JSON: `[{"fieldName1": "desc"}, {"fieldName2.subFieldName1": "desc"}]`
     *
     * When sorting with multiple fields, ensure that there is an index already defined with all the sort fields in the
     * same order and each object in the sort array has a single key or at least one of the sort fields is included in the
     * selector. All sorting fields must use the same sort direction, either all ascending or all descending.
     * @param {boolean} [params.stable] - Whether or not the view results should be returned from a "stable" set of
     * shards.
     * @param {string} [params.update] - Whether to update the index prior to returning the result.
     * @param {string[]} [params.useIndex] - Use this option to identify a specific index for query to run against, rather
     * than by using the IBM Cloudant Query algorithm to find the best index.
     * @param {number} [params.r] - The read quorum that is needed for the result. The value defaults to 1, in which case
     * the document that was found in the index is returned. If set to a higher value, each document is read from at least
     * that many replicas before it is returned in the results. The request will take more time than using only the
     * document that is stored locally with the index.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<CloudantV1.Response<CloudantV1.FindResult>>}
     */
    postFind(params: CloudantV1.PostFindParams): Promise<CloudantV1.Response<CloudantV1.FindResult>>;
    /**
     * Query an index by using selector syntax as stream.
     *
     * Query documents by using a declarative JSON querying syntax. It's best practice to create an appropriate index for
     * all fields in selector by using the `_index` endpoint.
     *
     * Queries without an appropriate backing index will fallback to using the built-in `_all_docs` index. This is not
     * recommended because it has a significant performance impact causing a full scan of the database with each request.
     * In this case the response body will include a warning field recommending that an index is created.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.db - Path parameter to specify the database name.
     * @param {JsonObject} params.selector - JSON object describing criteria used to select documents. The selector
     * specifies fields in the document, and provides an expression to evaluate with the field content or other data.
     *
     * The selector object must:
     *   * Be structured as valid JSON.
     *   * Contain a valid query expression.
     *
     * Using a selector is significantly more efficient than using a JavaScript filter function, and is the recommended
     * option if filtering on document attributes only.
     *
     * Elementary selector syntax requires you to specify one or more fields, and the corresponding values required for
     * those fields. You can create more complex selector expressions by combining operators.
     *
     * Operators are identified by the use of a dollar sign `$` prefix in the name field.
     *
     * There are two core types of operators in the selector syntax:
     * * Combination operators: applied at the topmost level of selection. They are used to combine selectors. A
     * combination operator takes a single argument. The argument is either another selector, or an array of selectors.
     * * Condition operators: are specific to a field, and are used to evaluate the value stored in that field. For
     * instance, the basic `$eq` operator matches when the specified field contains a value that is equal to the supplied
     * argument. See [the Cloudant Docs](https://cloud.ibm.com/docs/Cloudant?topic=Cloudant-operators) for a list of all
     * available combination and conditional operators.
     * * Only equality operators such as `$eq`, `$gt`, `$gte`, `$lt`, and `$lte` (but not `$ne`) can be used as the basis
     * of a query. You should include at least one of these in a selector.
     *
     * For further reference see
     * [selector syntax](https://cloud.ibm.com/docs/Cloudant?topic=Cloudant-selector-syntax).
     * @param {string} [params.bookmark] - Opaque bookmark token used when paginating results.
     * @param {boolean} [params.conflicts] - A boolean value that indicates whether or not to include information about
     * existing conflicts in the document.
     * @param {boolean} [params.executionStats] - Use this option to find information about the query that was run. This
     * information includes total key lookups, total document lookups (when `include_docs=true` is used), and total quorum
     * document lookups (when each document replica is fetched).
     * @param {string[]} [params.fields] - JSON array that uses the field syntax. Use this parameter to specify which
     * fields of a document must be returned. If it is omitted or empty, the entire document is returned.
     * @param {number} [params.limit] - Maximum number of results returned. The `type: text` indexes are limited to 200
     * results when queried.
     * @param {number} [params.skip] - Skip the first 'n' results, where 'n' is the value that is specified.
     * @param {JsonObject[]} [params.sort] - The sort field contains a list of pairs, each mapping a field name to a sort
     * direction (asc or desc). The first field name and direction pair is the topmost level of sort. The second pair, if
     * provided, is the next level of sort. The field can be any field, using dotted notation if desired for sub-document
     * fields.
     *
     * For example in JSON: `[{"fieldName1": "desc"}, {"fieldName2.subFieldName1": "desc"}]`
     *
     * When sorting with multiple fields, ensure that there is an index already defined with all the sort fields in the
     * same order and each object in the sort array has a single key or at least one of the sort fields is included in the
     * selector. All sorting fields must use the same sort direction, either all ascending or all descending.
     * @param {boolean} [params.stable] - Whether or not the view results should be returned from a "stable" set of
     * shards.
     * @param {string} [params.update] - Whether to update the index prior to returning the result.
     * @param {string[]} [params.useIndex] - Use this option to identify a specific index for query to run against, rather
     * than by using the IBM Cloudant Query algorithm to find the best index.
     * @param {number} [params.r] - The read quorum that is needed for the result. The value defaults to 1, in which case
     * the document that was found in the index is returned. If set to a higher value, each document is read from at least
     * that many replicas before it is returned in the results. The request will take more time than using only the
     * document that is stored locally with the index.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<CloudantV1.Response<NodeJS.ReadableStream>>}
     */
    postFindAsStream(params: CloudantV1.PostFindAsStreamParams): Promise<CloudantV1.Response<NodeJS.ReadableStream>>;
    /**
     * Retrieve information about all indexes.
     *
     * When you make a GET request to `/db/_index`, you get a list of all indexes used by Cloudant Query in the database,
     * including the primary index. In addition to the information available through this API, indexes are also stored in
     * the `indexes` property of design documents.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.db - Path parameter to specify the database name.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<CloudantV1.Response<CloudantV1.IndexesInformation>>}
     */
    getIndexesInformation(params: CloudantV1.GetIndexesInformationParams): Promise<CloudantV1.Response<CloudantV1.IndexesInformation>>;
    /**
     * Create a new index on a database.
     *
     * Create a new index on a database.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.db - Path parameter to specify the database name.
     * @param {IndexDefinition} params.index - Schema for a `json` or `text` query index definition. Indexes of type
     * `text` have additional configuration properties that do not apply to `json` indexes, these are:
     * * `default_analyzer` - the default text analyzer to use * `default_field` - whether to index the text in all
     * document fields and what analyzer to use for that purpose.
     * @param {string} [params.ddoc] - Specifies the design document name in which the index will be created. The design
     * document name is the design document ID excluding the `_design/` prefix.
     * @param {string} [params.name] - name.
     * @param {boolean} [params.partitioned] - The default value is `true` for databases with `partitioned: true` and
     * `false` otherwise. For databases with `partitioned: false` if this option is specified the value must be `false`.
     * @param {string} [params.type] - Schema for the type of an index.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<CloudantV1.Response<CloudantV1.IndexResult>>}
     */
    postIndex(params: CloudantV1.PostIndexParams): Promise<CloudantV1.Response<CloudantV1.IndexResult>>;
    /**
     * Delete an index.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.db - Path parameter to specify the database name.
     * @param {string} params.ddoc - Path parameter to specify the design document name. The design document name is the
     * design document ID excluding the `_design/` prefix.
     * @param {string} params.type - Path parameter to specify the index type.
     * @param {string} params.index - Path parameter to specify the index name.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<CloudantV1.Response<CloudantV1.Ok>>}
     */
    deleteIndex(params: CloudantV1.DeleteIndexParams): Promise<CloudantV1.Response<CloudantV1.Ok>>;
    /*************************
     * searches
     ************************/
    /**
     * Query tokenization of sample text.
     *
     * Returns the results of analyzer tokenization of the provided sample text. This endpoint can be used for testing
     * analyzer tokenization.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.analyzer - The analyzer type that is being used at the tokenization.
     * @param {string} params.text - The text to tokenize with the analyzer.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<CloudantV1.Response<CloudantV1.SearchAnalyzeResult>>}
     */
    postSearchAnalyze(params: CloudantV1.PostSearchAnalyzeParams): Promise<CloudantV1.Response<CloudantV1.SearchAnalyzeResult>>;
    /**
     * Query a search index.
     *
     * Search indexes, which are defined in design documents, allow databases to be queried by using Lucene Query Parser
     * Syntax. An index function defines a search index, similar to a map function in MapReduce views. The index function
     * decides what data to index and what data to store in the index. The advantage of using the HTTP `POST` method is
     * that the query is submitted as a JSON object in the request body. This avoids the limitations of passing query
     * options as URL query parameters of a `GET` request.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.db - Path parameter to specify the database name.
     * @param {string} params.ddoc - Path parameter to specify the design document name. The design document name is the
     * design document ID excluding the `_design/` prefix.
     * @param {string} params.index - Path parameter to specify the index name.
     * @param {string} params.query - The Lucene query to execute.
     * @param {string} [params.bookmark] - Opaque bookmark token used when paginating results.
     * @param {string[]} [params.highlightFields] - Specifies which fields to highlight. If specified, the result object
     * contains a highlights field with an entry for each specified field.
     * @param {number} [params.highlightNumber] - Number of fragments that are returned in highlights. If the search term
     * occurs less often than the number of fragments that are specified, longer fragments are returned.
     * @param {string} [params.highlightPostTag] - A string that is inserted after the highlighted word in the highlights
     * output.
     * @param {string} [params.highlightPreTag] - A string that is inserted before the highlighted word in the highlights
     * output.
     * @param {number} [params.highlightSize] - Number of characters in each fragment for highlights.
     * @param {boolean} [params.includeDocs] - Include the full content of the documents in the return.
     * @param {string[]} [params.includeFields] - A JSON array of field names to include in search results. Any fields
     * that are included must be indexed with the store:true option. The default is all fields.
     * @param {number} [params.limit] - Limit the number of the returned documents to the specified number.
     * @param {string[]} [params.sort] - Specifies the sort order of the results. In a grouped search (when group_field is
     * used), this parameter specifies the sort order within a group. The default sort order is relevance.  A JSON string
     * of the form "fieldname&lt;type&gt;" or "-fieldname&lt;type&gt;" for descending order, where fieldname is the name
     * of a string or number field, and type is either a number, a string, or a JSON array of strings. The type part is
     * optional, and defaults to number. Some examples are "foo", "-foo", "bar&lt;string&gt;", "-foo&lt;number&gt;" and
     * ["-foo&lt;number&gt;", "bar&lt;string&gt;"]. String fields that are used for sorting must not be analyzed fields.
     * Fields that are used for sorting must be indexed by the same indexer that is used for the search query.
     * @param {string} [params.stale] - Do not wait for the index to finish building to return results.
     * @param {string[]} [params.counts] - This field defines an array of names of string fields, for which counts are
     * requested. The response contains counts for each unique value of this field name among the documents that match the
     * search query. Faceting must be enabled for this parameter to function. This option is only available when making
     * global queries.
     * @param {string[][]} [params.drilldown] - Restrict results to documents with a dimension equal to the specified
     * label(s). The search matches only documents containing the value that was provided in the named field. It differs
     * from using "fieldname:value" in the q parameter only in that the values are not analyzed. Faceting must be enabled
     * for this parameter to function.
     * @param {string} [params.groupField] - Field by which to group search matches. A string that contains the name of a
     * string field. Fields containing other data such as numbers, objects, or arrays cannot be used. This option is only
     * available when making global queries.
     * @param {number} [params.groupLimit] - Maximum group count. This field can be used only if group_field is specified.
     * This option is only available when making global queries.
     * @param {string[]} [params.groupSort] - This field defines the order of the groups in a search that uses
     * group_field. The default sort order is relevance. This field can have the same values as the sort field, so single
     * fields and arrays of fields are supported. This option is only available when making global queries.
     * @param {JsonObject} [params.ranges] - This field defines ranges for faceted, numeric search fields. The value is a
     * JSON object where the fields names are faceted numeric search fields, and the values of the fields are JSON
     * objects. The field names of the JSON objects are names for ranges. The values are strings that describe the range,
     * for example "[0 TO 10]". This option is only available when making global queries.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<CloudantV1.Response<CloudantV1.SearchResult>>}
     */
    postSearch(params: CloudantV1.PostSearchParams): Promise<CloudantV1.Response<CloudantV1.SearchResult>>;
    /**
     * Query a search index as stream.
     *
     * Search indexes, which are defined in design documents, allow databases to be queried by using Lucene Query Parser
     * Syntax. An index function defines a search index, similar to a map function in MapReduce views. The index function
     * decides what data to index and what data to store in the index. The advantage of using the HTTP `POST` method is
     * that the query is submitted as a JSON object in the request body. This avoids the limitations of passing query
     * options as URL query parameters of a `GET` request.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.db - Path parameter to specify the database name.
     * @param {string} params.ddoc - Path parameter to specify the design document name. The design document name is the
     * design document ID excluding the `_design/` prefix.
     * @param {string} params.index - Path parameter to specify the index name.
     * @param {string} params.query - The Lucene query to execute.
     * @param {string} [params.bookmark] - Opaque bookmark token used when paginating results.
     * @param {string[]} [params.highlightFields] - Specifies which fields to highlight. If specified, the result object
     * contains a highlights field with an entry for each specified field.
     * @param {number} [params.highlightNumber] - Number of fragments that are returned in highlights. If the search term
     * occurs less often than the number of fragments that are specified, longer fragments are returned.
     * @param {string} [params.highlightPostTag] - A string that is inserted after the highlighted word in the highlights
     * output.
     * @param {string} [params.highlightPreTag] - A string that is inserted before the highlighted word in the highlights
     * output.
     * @param {number} [params.highlightSize] - Number of characters in each fragment for highlights.
     * @param {boolean} [params.includeDocs] - Include the full content of the documents in the return.
     * @param {string[]} [params.includeFields] - A JSON array of field names to include in search results. Any fields
     * that are included must be indexed with the store:true option. The default is all fields.
     * @param {number} [params.limit] - Limit the number of the returned documents to the specified number.
     * @param {string[]} [params.sort] - Specifies the sort order of the results. In a grouped search (when group_field is
     * used), this parameter specifies the sort order within a group. The default sort order is relevance.  A JSON string
     * of the form "fieldname&lt;type&gt;" or "-fieldname&lt;type&gt;" for descending order, where fieldname is the name
     * of a string or number field, and type is either a number, a string, or a JSON array of strings. The type part is
     * optional, and defaults to number. Some examples are "foo", "-foo", "bar&lt;string&gt;", "-foo&lt;number&gt;" and
     * ["-foo&lt;number&gt;", "bar&lt;string&gt;"]. String fields that are used for sorting must not be analyzed fields.
     * Fields that are used for sorting must be indexed by the same indexer that is used for the search query.
     * @param {string} [params.stale] - Do not wait for the index to finish building to return results.
     * @param {string[]} [params.counts] - This field defines an array of names of string fields, for which counts are
     * requested. The response contains counts for each unique value of this field name among the documents that match the
     * search query. Faceting must be enabled for this parameter to function. This option is only available when making
     * global queries.
     * @param {string[][]} [params.drilldown] - Restrict results to documents with a dimension equal to the specified
     * label(s). The search matches only documents containing the value that was provided in the named field. It differs
     * from using "fieldname:value" in the q parameter only in that the values are not analyzed. Faceting must be enabled
     * for this parameter to function.
     * @param {string} [params.groupField] - Field by which to group search matches. A string that contains the name of a
     * string field. Fields containing other data such as numbers, objects, or arrays cannot be used. This option is only
     * available when making global queries.
     * @param {number} [params.groupLimit] - Maximum group count. This field can be used only if group_field is specified.
     * This option is only available when making global queries.
     * @param {string[]} [params.groupSort] - This field defines the order of the groups in a search that uses
     * group_field. The default sort order is relevance. This field can have the same values as the sort field, so single
     * fields and arrays of fields are supported. This option is only available when making global queries.
     * @param {JsonObject} [params.ranges] - This field defines ranges for faceted, numeric search fields. The value is a
     * JSON object where the fields names are faceted numeric search fields, and the values of the fields are JSON
     * objects. The field names of the JSON objects are names for ranges. The values are strings that describe the range,
     * for example "[0 TO 10]". This option is only available when making global queries.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<CloudantV1.Response<NodeJS.ReadableStream>>}
     */
    postSearchAsStream(params: CloudantV1.PostSearchAsStreamParams): Promise<CloudantV1.Response<NodeJS.ReadableStream>>;
    /**
     * Retrieve information about a search index.
     *
     * Retrieve search index metadata information, such as the size of the index on disk.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.db - Path parameter to specify the database name.
     * @param {string} params.ddoc - Path parameter to specify the design document name. The design document name is the
     * design document ID excluding the `_design/` prefix.
     * @param {string} params.index - Path parameter to specify the index name.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<CloudantV1.Response<CloudantV1.SearchInfoResult>>}
     */
    getSearchInfo(params: CloudantV1.GetSearchInfoParams): Promise<CloudantV1.Response<CloudantV1.SearchInfoResult>>;
    /*************************
     * replication
     ************************/
    /**
     * Retrieve the HTTP headers for a replication document.
     *
     * Retrieves the HTTP headers containing minimal amount of information about the specified replication document from
     * the `_replicator` database.  The method supports the same query arguments as the `GET /_replicator/{doc_id}`
     * method, but only headers like content length and the revision (ETag header) are returned.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.docId - Path parameter to specify the document ID.
     * @param {string} [params.ifNoneMatch] - Header parameter to specify a double quoted document revision token for
     * cache control.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<CloudantV1.Response<CloudantV1.EmptyObject>>}
     */
    headReplicationDocument(params: CloudantV1.HeadReplicationDocumentParams): Promise<CloudantV1.Response<CloudantV1.EmptyObject>>;
    /**
     * Retrieve HTTP headers for a replication scheduler document.
     *
     * Retrieves the HTTP headers containing minimal amount of information about the specified replication scheduler
     * document.  Since the response body is empty, using the HEAD method is a lightweight way to check if the replication
     * scheduler document exists or not.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.docId - Path parameter to specify the document ID.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<CloudantV1.Response<CloudantV1.EmptyObject>>}
     */
    headSchedulerDocument(params: CloudantV1.HeadSchedulerDocumentParams): Promise<CloudantV1.Response<CloudantV1.EmptyObject>>;
    /**
     * Retrieve the HTTP headers for a replication scheduler job.
     *
     * Returns the HTTP headers that contain a minimal amount of information about the specified replication task. Only
     * the header information is returned.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.jobId - Path parameter to specify the replication job id.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<CloudantV1.Response<CloudantV1.EmptyObject>>}
     */
    headSchedulerJob(params: CloudantV1.HeadSchedulerJobParams): Promise<CloudantV1.Response<CloudantV1.EmptyObject>>;
    /**
     * Cancel a replication.
     *
     * Cancels a replication by deleting the document that describes it from the `_replicator` database.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.docId - Path parameter to specify the document ID.
     * @param {string} [params.ifMatch] - Header parameter to specify the document revision. Alternative to rev query
     * parameter.
     * @param {string} [params.batch] - Query parameter to specify whether to store in batch mode. The server will respond
     * with a HTTP 202 Accepted response code immediately.
     * @param {string} [params.rev] - Query parameter to specify a document revision.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<CloudantV1.Response<CloudantV1.DocumentResult>>}
     */
    deleteReplicationDocument(params: CloudantV1.DeleteReplicationDocumentParams): Promise<CloudantV1.Response<CloudantV1.DocumentResult>>;
    /**
     * Retrieve a replication document.
     *
     * Retrieves a replication document from the `_replicator` database to view the configuration of the replication. The
     * status of the replication is no longer recorded in the document but can be checked via the replication scheduler.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.docId - Path parameter to specify the document ID.
     * @param {string} [params.ifNoneMatch] - Header parameter to specify a double quoted document revision token for
     * cache control.
     * @param {boolean} [params.attachments] - Query parameter to specify whether to include attachments bodies in a
     * response.
     * @param {boolean} [params.attEncodingInfo] - Query parameter to specify whether to include the encoding information
     * in attachment stubs if the particular attachment is compressed.
     * @param {boolean} [params.conflicts] - Query parameter to specify whether to include a list of conflicted revisions
     * in each returned document. Active only when `include_docs` is `true`.
     * @param {boolean} [params.deletedConflicts] - Query parameter to specify whether to include a list of deleted
     * conflicted revisions in the `_deleted_conflicts` property of the returned document.
     * @param {boolean} [params.latest] - Query parameter to specify whether to force retrieving latest leaf revision, no
     * matter what rev was requested.
     * @param {boolean} [params.localSeq] - Query parameter to specify whether to include the last update sequence for the
     * document.
     * @param {boolean} [params.meta] - Query parameter to specify whether to include document meta information. Acts the
     * same as specifying all of the conflicts, deleted_conflicts and open_revs query parameters.
     * @param {string} [params.rev] - Query parameter to specify a document revision.
     * @param {boolean} [params.revs] - Query parameter to specify whether to include a list of all known document
     * revisions.
     * @param {boolean} [params.revsInfo] - Query parameter to specify whether to includes detailed information for all
     * known document revisions.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<CloudantV1.Response<CloudantV1.ReplicationDocument>>}
     */
    getReplicationDocument(params: CloudantV1.GetReplicationDocumentParams): Promise<CloudantV1.Response<CloudantV1.ReplicationDocument>>;
    /**
     * Create or modify a replication using a replication document.
     *
     * Creates or modifies a document in the `_replicator` database to start a new replication or to edit an existing
     * replication.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.docId - Path parameter to specify the document ID.
     * @param {ReplicationDocument} params.replicationDocument - HTTP request body for replication operations.
     * @param {string} [params.ifMatch] - Header parameter to specify the document revision. Alternative to rev query
     * parameter.
     * @param {string} [params.batch] - Query parameter to specify whether to store in batch mode. The server will respond
     * with a HTTP 202 Accepted response code immediately.
     * @param {boolean} [params.newEdits] - Query parameter to specify whether to prevent insertion of conflicting
     * document revisions. If false, a well-formed _rev must be included in the document. False is used by the replicator
     * to insert documents into the target database even if that leads to the creation of conflicts.
     * @param {string} [params.rev] - Query parameter to specify a document revision.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<CloudantV1.Response<CloudantV1.DocumentResult>>}
     */
    putReplicationDocument(params: CloudantV1.PutReplicationDocumentParams): Promise<CloudantV1.Response<CloudantV1.DocumentResult>>;
    /**
     * Retrieve replication scheduler documents.
     *
     * Lists replication documents, including information about all documents, even the ones in a completed or failed
     * state. For each document, the endpoint returns the document ID, database, replication ID, source and target, and
     * other information.
     *
     * @param {Object} [params] - The parameters to send to the service.
     * @param {number} [params.limit] - Query parameter to specify the number of returned documents to limit the result
     * to.
     * @param {number} [params.skip] - Query parameter to specify the number of records before starting to return the
     * results.
     * @param {string[]} [params.states] - Query parameter to include only replication documents in the specified states.
     * String must be a comma-delimited string.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<CloudantV1.Response<CloudantV1.SchedulerDocsResult>>}
     */
    getSchedulerDocs(params?: CloudantV1.GetSchedulerDocsParams): Promise<CloudantV1.Response<CloudantV1.SchedulerDocsResult>>;
    /**
     * Retrieve a replication scheduler document.
     *
     * Retrieves information about a replication document from the replicator database. The endpoint returns the document
     * ID, database, replication ID, source and target, and other information.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.docId - Path parameter to specify the document ID.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<CloudantV1.Response<CloudantV1.SchedulerDocument>>}
     */
    getSchedulerDocument(params: CloudantV1.GetSchedulerDocumentParams): Promise<CloudantV1.Response<CloudantV1.SchedulerDocument>>;
    /**
     * Retrieve replication scheduler jobs.
     *
     * Retrieves information about replications that were created via `/_replicate` endpoint, as well as those created
     * from replication documents. It doesn't include replications that completed or failed to start because replication
     * documents were malformed. Each job description includes source and target information, replication ID, history of
     * recent events, and other information.
     *
     * @param {Object} [params] - The parameters to send to the service.
     * @param {number} [params.limit] - Query parameter to specify the number of returned jobs to limit the result to.
     * @param {number} [params.skip] - Query parameter to specify the number of records before starting to return the
     * results.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<CloudantV1.Response<CloudantV1.SchedulerJobsResult>>}
     */
    getSchedulerJobs(params?: CloudantV1.GetSchedulerJobsParams): Promise<CloudantV1.Response<CloudantV1.SchedulerJobsResult>>;
    /**
     * Retrieve a replication scheduler job.
     *
     * Retrieves the state of a single replication task based on its replication ID.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.jobId - Path parameter to specify the replication job id.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<CloudantV1.Response<CloudantV1.SchedulerJob>>}
     */
    getSchedulerJob(params: CloudantV1.GetSchedulerJobParams): Promise<CloudantV1.Response<CloudantV1.SchedulerJob>>;
    /*************************
     * authentication
     ************************/
    /**
     * Retrieve current session cookie information.
     *
     * Retrieves information about the authenticated user's session.
     *
     * @param {Object} [params] - The parameters to send to the service.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<CloudantV1.Response<CloudantV1.SessionInformation>>}
     */
    getSessionInformation(params?: CloudantV1.GetSessionInformationParams): Promise<CloudantV1.Response<CloudantV1.SessionInformation>>;
    /*************************
     * authorization
     ************************/
    /**
     * Retrieve database permissions information.
     *
     * See who has permission to read, write, and manage the database. The credentials you use to log in to the dashboard
     * automatically include `_admin` permissions to all databases you create. Everyone and everything else, including
     * users you share databases with and API keys you create, must be given a permission level explicitly.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.db - Path parameter to specify the database name.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<CloudantV1.Response<CloudantV1.Security>>}
     */
    getSecurity(params: CloudantV1.GetSecurityParams): Promise<CloudantV1.Response<CloudantV1.Security>>;
    /**
     * Modify database permissions.
     *
     * Modify who has permission to read, write, or manage a database. This endpoint can be used to modify both Cloudant
     * and CouchDB related permissions. Be careful: by removing a Cloudant API key, a member or an admin from the list of
     * users that have access permissions, you remove it from the list of users that have access to the database.
     *
     * ### Note about nobody role
     *
     * The `nobody` username applies to all unauthenticated connection attempts. For example, if an application tries to
     * read data from a database, but did not identify itself, the task can continue only if the `nobody` user has the
     * role `_reader`.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.db - Path parameter to specify the database name.
     * @param {SecurityObject} [params.admins] - Schema for names and roles to map to a database permission.
     * @param {SecurityObject} [params.members] - Schema for names and roles to map to a database permission.
     * @param {JsonObject} [params.cloudant] - Database permissions for Cloudant users and/or API keys.
     * @param {boolean} [params.couchdbAuthOnly] - Manage permissions using the `_users` database only.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<CloudantV1.Response<CloudantV1.Ok>>}
     */
    putSecurity(params: CloudantV1.PutSecurityParams): Promise<CloudantV1.Response<CloudantV1.Ok>>;
    /**
     * Generates API keys for apps or persons to enable database access.
     *
     * Generates API keys to enable database access for a person or application, but without creating a new IBM Cloudant
     * account for that person or application. An API key is a randomly generated username and password. The key is given
     * the wanted access permissions for a database.
     *
     * @param {Object} [params] - The parameters to send to the service.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<CloudantV1.Response<CloudantV1.ApiKeysResult>>}
     */
    postApiKeys(params?: CloudantV1.PostApiKeysParams): Promise<CloudantV1.Response<CloudantV1.ApiKeysResult>>;
    /**
     * Modify only Cloudant related database permissions.
     *
     * Modify only Cloudant related permissions to database. Be careful: by removing an API key from the list, you remove
     * the API key from the list of users that have access to the database.
     *
     * ### Note about nobody role
     *
     * The `nobody` username applies to all unauthenticated connection attempts. For example, if an application tries to
     * read data from a database, but did not identify itself, the task can continue only if the `nobody` user has the
     * role `_reader`.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.db - Path parameter to specify the database name.
     * @param {JsonObject} params.cloudant - Database permissions for Cloudant users and/or API keys.
     * @param {SecurityObject} [params.admins] - Schema for names and roles to map to a database permission.
     * @param {SecurityObject} [params.members] - Schema for names and roles to map to a database permission.
     * @param {boolean} [params.couchdbAuthOnly] - Manage permissions using the `_users` database only.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<CloudantV1.Response<CloudantV1.Ok>>}
     */
    putCloudantSecurityConfiguration(params: CloudantV1.PutCloudantSecurityConfigurationParams): Promise<CloudantV1.Response<CloudantV1.Ok>>;
    /*************************
     * cORS
     ************************/
    /**
     * Retrieve CORS configuration information.
     *
     * Lists all Cross-origin resource sharing (CORS) configuration. CORS defines a way in which the browser and the
     * server interact to determine whether or not to allow the request.
     *
     * @param {Object} [params] - The parameters to send to the service.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<CloudantV1.Response<CloudantV1.CorsInformation>>}
     */
    getCorsInformation(params?: CloudantV1.GetCorsInformationParams): Promise<CloudantV1.Response<CloudantV1.CorsInformation>>;
    /**
     * Modify CORS configuration.
     *
     * Sets the CORS configuration. The configuration applies to all databases and all account level endpoints in your
     * account.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string[]} params.origins - An array of strings that contain allowed origin domains. You have to specify the
     * full URL including the protocol. It is recommended that only the HTTPS protocol is used. Subdomains count as
     * separate domains, so you have to specify all subdomains used.
     * @param {boolean} [params.allowCredentials] - Boolean value to allow authentication credentials. If set to true,
     * browser requests must be done by using withCredentials = true.
     * @param {boolean} [params.enableCors] - Boolean value to turn CORS on and off.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<CloudantV1.Response<CloudantV1.Ok>>}
     */
    putCorsConfiguration(params: CloudantV1.PutCorsConfigurationParams): Promise<CloudantV1.Response<CloudantV1.Ok>>;
    /*************************
     * attachments
     ************************/
    /**
     * Retrieve the HTTP headers for an attachment.
     *
     * Returns the HTTP headers that contain a minimal amount of information about the specified attachment. This method
     * supports the same query arguments as the `GET /{db}/{doc_id}/{attachment_name}` method, but only the header
     * information (including attachment size, encoding, and the MD5 hash as an ETag), is returned.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.db - Path parameter to specify the database name.
     * @param {string} params.docId - Path parameter to specify the document ID.
     * @param {string} params.attachmentName - Path parameter to specify the attachment name.
     * @param {string} [params.ifMatch] - Header parameter to specify the document revision. Alternative to rev query
     * parameter.
     * @param {string} [params.ifNoneMatch] - Header parameter to specify a double quoted document revision token for
     * cache control.
     * @param {string} [params.rev] - Query parameter to specify a document revision.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<CloudantV1.Response<CloudantV1.EmptyObject>>}
     */
    headAttachment(params: CloudantV1.HeadAttachmentParams): Promise<CloudantV1.Response<CloudantV1.EmptyObject>>;
    /**
     * Delete an attachment.
     *
     * Deletes the attachment with the filename, `{attachment_name}`, from the specified doc. You must supply the `rev`
     * query parameter or `If-Match` header with the current revision to delete the attachment.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.db - Path parameter to specify the database name.
     * @param {string} params.docId - Path parameter to specify the document ID.
     * @param {string} params.attachmentName - Path parameter to specify the attachment name.
     * @param {string} [params.ifMatch] - Header parameter to specify the document revision. Alternative to rev query
     * parameter.
     * @param {string} [params.rev] - Query parameter to specify a document revision.
     * @param {string} [params.batch] - Query parameter to specify whether to store in batch mode. The server will respond
     * with a HTTP 202 Accepted response code immediately.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<CloudantV1.Response<CloudantV1.DocumentResult>>}
     */
    deleteAttachment(params: CloudantV1.DeleteAttachmentParams): Promise<CloudantV1.Response<CloudantV1.DocumentResult>>;
    /**
     * Retrieve an attachment.
     *
     * Returns the file attachment that is associated with the document. The raw data of the associated attachment is
     * returned, just as if you were accessing a static file. The returned Content-Type header is the same as the content
     * type set when the document attachment was submitted to the database.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.db - Path parameter to specify the database name.
     * @param {string} params.docId - Path parameter to specify the document ID.
     * @param {string} params.attachmentName - Path parameter to specify the attachment name.
     * @param {string} [params.accept] - The type of the response:  or *_/_*.
     * @param {string} [params.ifMatch] - Header parameter to specify the document revision. Alternative to rev query
     * parameter.
     * @param {string} [params.ifNoneMatch] - Header parameter to specify a double quoted document revision token for
     * cache control.
     * @param {string} [params.range] - Header parameter to specify the byte range for a request. This allows the
     * implementation of resumable downloads and skippable streams. This is available for all attachments inside CouchDB.
     * @param {string} [params.rev] - Query parameter to specify a document revision.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<CloudantV1.Response<NodeJS.ReadableStream>>}
     */
    getAttachment(params: CloudantV1.GetAttachmentParams): Promise<CloudantV1.Response<NodeJS.ReadableStream>>;
    /**
     * Create or modify an attachment.
     *
     * Uploads the supplied content as an attachment to the specified document. The attachment name that you provide must
     * be a URL encoded string. You must supply the Content-Type header, and for an existing document, you must also
     * supply either the `rev` query argument or the `If-Match` HTTP header. If you omit the revision, a new, otherwise
     * empty, document is created with the provided attachment, or a conflict occurs. If the uploaded attachment uses an
     * existing attachment name in the remote database, it updates the corresponding stored content of the database. Since
     * you must supply the revision information to add an attachment to the document, this serves as validation to update
     * the existing attachment.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.db - Path parameter to specify the database name.
     * @param {string} params.docId - Path parameter to specify the document ID.
     * @param {string} params.attachmentName - Path parameter to specify the attachment name.
     * @param {NodeJS.ReadableStream | Buffer} params.attachment - HTTP request body for attachment operations.
     * @param {string} params.contentType - Content-Type of the attachment.
     * @param {string} [params.ifMatch] - Header parameter to specify the document revision. Alternative to rev query
     * parameter.
     * @param {string} [params.rev] - Query parameter to specify a document revision.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<CloudantV1.Response<CloudantV1.DocumentResult>>}
     */
    putAttachment(params: CloudantV1.PutAttachmentParams): Promise<CloudantV1.Response<CloudantV1.DocumentResult>>;
    /*************************
     * localDocuments
     ************************/
    /**
     * Retrieve HTTP headers for a local document.
     *
     * Retrieves the HTTP headers containing minimal amount of information about the specified local document. Since the
     * response body is empty, using the HEAD method is a lightweight way to check if the local document exists or not.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.db - Path parameter to specify the database name.
     * @param {string} params.docId - Path parameter to specify the document ID.
     * @param {string} [params.ifNoneMatch] - Header parameter to specify a double quoted document revision token for
     * cache control.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<CloudantV1.Response<CloudantV1.EmptyObject>>}
     */
    headLocalDocument(params: CloudantV1.HeadLocalDocumentParams): Promise<CloudantV1.Response<CloudantV1.EmptyObject>>;
    /**
     * Delete a local document.
     *
     * Deletes the specified local document. The semantics are identical to deleting a standard document in the specified
     * database, except that the document is not replicated.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.db - Path parameter to specify the database name.
     * @param {string} params.docId - Path parameter to specify the document ID.
     * @param {string} [params.batch] - Query parameter to specify whether to store in batch mode. The server will respond
     * with a HTTP 202 Accepted response code immediately.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<CloudantV1.Response<CloudantV1.DocumentResult>>}
     */
    deleteLocalDocument(params: CloudantV1.DeleteLocalDocumentParams): Promise<CloudantV1.Response<CloudantV1.DocumentResult>>;
    /**
     * Retrieve a local document.
     *
     * Retrieves the specified local document. The semantics are identical to accessing a standard document in the
     * specified database, except that the document is not replicated.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.db - Path parameter to specify the database name.
     * @param {string} params.docId - Path parameter to specify the document ID.
     * @param {string} [params.accept] - The type of the response: application/json, multipart/mixed, multipart/related,
     * or application/octet-stream.
     * @param {string} [params.ifNoneMatch] - Header parameter to specify a double quoted document revision token for
     * cache control.
     * @param {boolean} [params.attachments] - Query parameter to specify whether to include attachments bodies in a
     * response.
     * @param {boolean} [params.attEncodingInfo] - Query parameter to specify whether to include the encoding information
     * in attachment stubs if the particular attachment is compressed.
     * @param {boolean} [params.localSeq] - Query parameter to specify whether to include the last update sequence for the
     * document.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<CloudantV1.Response<CloudantV1.Document>>}
     */
    getLocalDocument(params: CloudantV1.GetLocalDocumentParams): Promise<CloudantV1.Response<CloudantV1.Document>>;
    /**
     * Create or modify a local document.
     *
     * Stores the specified local document. The semantics are identical to storing a standard document in the specified
     * database, except that the document is not replicated.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.db - Path parameter to specify the database name.
     * @param {string} params.docId - Path parameter to specify the document ID.
     * @param {Document | NodeJS.ReadableStream | Buffer} params.document - HTTP request body for Document operations.
     * @param {string} [params.contentType] - The type of the input.
     * @param {string} [params.batch] - Query parameter to specify whether to store in batch mode. The server will respond
     * with a HTTP 202 Accepted response code immediately.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<CloudantV1.Response<CloudantV1.DocumentResult>>}
     */
    putLocalDocument(params: CloudantV1.PutLocalDocumentParams): Promise<CloudantV1.Response<CloudantV1.DocumentResult>>;
    /*************************
     * databaseDetails
     ************************/
    /**
     * Query the document revisions and possible ancestors missing from the database.
     *
     * The replicator is the primary user of this operation. After receiving a set of new revision IDs from the source
     * database, the replicator sends this set to the destination database's `_revs_diff` to find out which of them
     * already exists there. It can then avoid fetching and sending already-known document bodies.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.db - Path parameter to specify the database name.
     * @param {JsonObject} params.documentRevisions - HTTP request body for operations with Document revisions.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<CloudantV1.Response<CloudantV1.JsonObject>>}
     */
    postRevsDiff(params: CloudantV1.PostRevsDiffParams): Promise<CloudantV1.Response<CloudantV1.JsonObject>>;
    /**
     * Retrieve shard information.
     *
     * List each shard range and the corresponding replicas for a specified database.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.db - Path parameter to specify the database name.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<CloudantV1.Response<CloudantV1.ShardsInformation>>}
     */
    getShardsInformation(params: CloudantV1.GetShardsInformationParams): Promise<CloudantV1.Response<CloudantV1.ShardsInformation>>;
    /**
     * Retrieve shard information for a specific document.
     *
     * Retrieves information about a specific shard where a particular document is stored, along with information about
     * the nodes where that shard has a replica.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.db - Path parameter to specify the database name.
     * @param {string} params.docId - Path parameter to specify the document ID.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<CloudantV1.Response<CloudantV1.DocumentShardInfo>>}
     */
    getDocumentShardsInfo(params: CloudantV1.GetDocumentShardsInfoParams): Promise<CloudantV1.Response<CloudantV1.DocumentShardInfo>>;
    /*************************
     * monitoring
     ************************/
    /**
     * Retrieve HTTP headers about whether the server is up.
     *
     * Retrieves the HTTP headers about whether the server is up.
     *
     * @param {Object} [params] - The parameters to send to the service.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<CloudantV1.Response<CloudantV1.EmptyObject>>}
     */
    headUpInformation(params?: CloudantV1.HeadUpInformationParams): Promise<CloudantV1.Response<CloudantV1.EmptyObject>>;
    /**
     * Retrieve list of running tasks.
     *
     * Lists running tasks, including the task type, name, status, and process ID. The result includes a JSON array of the
     * currently running tasks, with each task described as a single object. Depending on the operation type, the set of
     * response object fields might be different.
     *
     * @param {Object} [params] - The parameters to send to the service.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<CloudantV1.Response<CloudantV1.ActiveTask[]>>}
     */
    getActiveTasks(params?: CloudantV1.GetActiveTasksParams): Promise<CloudantV1.Response<CloudantV1.ActiveTask[]>>;
    /**
     * Retrieve information about whether the server is up.
     *
     * Confirms that the server is up, running, and ready to respond to requests. If `maintenance_mode` is `true` or
     * `nolb`, the endpoint returns a 404 response.
     *
     * **Tip:**  The authentication for this endpoint is only enforced when using IAM.
     *
     * @param {Object} [params] - The parameters to send to the service.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<CloudantV1.Response<CloudantV1.UpInformation>>}
     */
    getUpInformation(params?: CloudantV1.GetUpInformationParams): Promise<CloudantV1.Response<CloudantV1.UpInformation>>;
    /**
     * Retrieve Activity Tracker events information.
     *
     * Check event types that are being sent to IBM Cloud Activity Tracker for the IBM Cloudant instance.
     *
     * @param {Object} [params] - The parameters to send to the service.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<CloudantV1.Response<CloudantV1.ActivityTrackerEvents>>}
     */
    getActivityTrackerEvents(params?: CloudantV1.GetActivityTrackerEventsParams): Promise<CloudantV1.Response<CloudantV1.ActivityTrackerEvents>>;
    /**
     * Modify Activity Tracker events configuration.
     *
     * Configure event types that are being sent to IBM Cloud Activity Tracker for the IBM Cloudant instance.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string[]} params.types - An array of event types that are being sent to IBM Cloud Activity Tracker for the
     * IBM Cloudant instance. "management" is a required element of this array.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<CloudantV1.Response<CloudantV1.Ok>>}
     */
    postActivityTrackerEvents(params: CloudantV1.PostActivityTrackerEventsParams): Promise<CloudantV1.Response<CloudantV1.Ok>>;
    /**
     * Retrieve the current provisioned throughput capacity consumption.
     *
     * View the current consumption of provisioned throughput capacity for an IBM Cloudant instance. The current
     * consumption shows the quantities of reads, writes, and global queries conducted against the instance for a given
     * second.
     *
     * @param {Object} [params] - The parameters to send to the service.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<CloudantV1.Response<CloudantV1.CurrentThroughputInformation>>}
     */
    getCurrentThroughputInformation(params?: CloudantV1.GetCurrentThroughputInformationParams): Promise<CloudantV1.Response<CloudantV1.CurrentThroughputInformation>>;
}
/*************************
 * interfaces
 ************************/
declare namespace CloudantV1 {
    /** An operation response. */
    interface Response<T = any> {
        result: T;
        status: number;
        statusText: string;
        headers: IncomingHttpHeaders;
    }
    /** The callback for a service request. */
    type Callback<T> = (error: any, response?: Response<T>) => void;
    /** The body of a service request that returns no response data. */
    interface EmptyObject {
    }
    /** A standard JS object, defined to avoid the limitations of `Object` and `object` */
    interface JsonObject {
        [key: string]: any;
    }
    /*************************
     * request interfaces
     ************************/
    /** Parameters for the `getServerInformation` operation. */
    interface GetServerInformationParams {
        headers?: OutgoingHttpHeaders;
    }
    /** Parameters for the `getMembershipInformation` operation. */
    interface GetMembershipInformationParams {
        headers?: OutgoingHttpHeaders;
    }
    /** Parameters for the `getUuids` operation. */
    interface GetUuidsParams {
        /** Query parameter to specify the number of UUIDs to return. */
        count?: number;
        headers?: OutgoingHttpHeaders;
    }
    /** Parameters for the `getCapacityThroughputInformation` operation. */
    interface GetCapacityThroughputInformationParams {
        headers?: OutgoingHttpHeaders;
    }
    /** Parameters for the `putCapacityThroughputConfiguration` operation. */
    interface PutCapacityThroughputConfigurationParams {
        /** A number of blocks of throughput units. A block consists of 100 reads/sec, 50 writes/sec, and 5 global
         *  queries/sec of provisioned throughput capacity.
         */
        blocks: number;
        headers?: OutgoingHttpHeaders;
    }
    /** Parameters for the `getDbUpdates` operation. */
    interface GetDbUpdatesParams {
        /** Query parameter to specify the changes feed type. */
        feed?: GetDbUpdatesConstants.Feed | string;
        /** Query parameter to specify the period in milliseconds after which an empty line is sent in the results. Off
         *  by default and only applicable for
         *  `continuous` and `eventsource` feeds. Overrides any timeout to keep the feed alive indefinitely. May also be
         *  `true` to use a value of `60000`.
         *
         *  **Note:** Delivery of heartbeats cannot be relied on at specific intervals. If your application runs in an
         *  environment where idle network connections may break, `heartbeat` is not suitable as a keepalive mechanism.
         *  Instead, consider one of the following options:
         *    * Use the `timeout` parameter with a value that is compatible with your network environment.
         *    * Switch to scheduled usage of one of the non-continuous changes feed types
         *      (`normal` or `longpoll`).
         *    * Use TCP keepalive.
         */
        heartbeat?: number;
        /** Query parameter to specify the maximum period in milliseconds to wait for a change before the response is
         *  sent, even if there are no results. Only applicable for `longpoll` or `continuous` feeds. Default value is
         *  specified by `httpd/changes_timeout` configuration option. Note that `60000` value is also the default maximum
         *  timeout to prevent undetected dead connections.
         */
        timeout?: number;
        /** Query parameter to specify to start the results from the change immediately after the given update sequence.
         *  Can be a valid update sequence or `now` value. Default is `0` i.e. all changes.
         */
        since?: string;
        headers?: OutgoingHttpHeaders;
    }
    /** Constants for the `getDbUpdates` operation. */
    namespace GetDbUpdatesConstants {
        /** Query parameter to specify the changes feed type. */
        enum Feed {
            CONTINUOUS = "continuous",
            EVENTSOURCE = "eventsource",
            LONGPOLL = "longpoll",
            NORMAL = "normal"
        }
    }
    /** Parameters for the `postChanges` operation. */
    interface PostChangesParams {
        /** Path parameter to specify the database name. */
        db: string;
        /** Schema for a list of document IDs. */
        docIds?: string[];
        /** JSON array that uses the field syntax. Use this parameter to specify which fields of a document must be
         *  returned. If it is omitted or empty, the entire document is returned.
         */
        fields?: string[];
        /** JSON object describing criteria used to select documents. The selector specifies fields in the document, and
         *  provides an expression to evaluate with the field content or other data.
         *
         *  The selector object must:
         *    * Be structured as valid JSON.
         *    * Contain a valid query expression.
         *
         *  Using a selector is significantly more efficient than using a JavaScript filter function, and is the recommended
         *  option if filtering on document attributes only.
         *
         *  Elementary selector syntax requires you to specify one or more fields, and the corresponding values required for
         *  those fields. You can create more complex selector expressions by combining operators.
         *
         *  Operators are identified by the use of a dollar sign `$` prefix in the name field.
         *
         *  There are two core types of operators in the selector syntax:
         *  * Combination operators: applied at the topmost level of selection. They are used to combine selectors. A
         *  combination operator takes a single argument. The argument is either another selector, or an array of selectors.
         *  * Condition operators: are specific to a field, and are used to evaluate the value stored in that field. For
         *  instance, the basic `$eq` operator matches when the specified field contains a value that is equal to the
         *  supplied argument. See [the Cloudant Docs](https://cloud.ibm.com/docs/Cloudant?topic=Cloudant-operators) for a
         *  list of all available combination and conditional operators.
         *  * Only equality operators such as `$eq`, `$gt`, `$gte`, `$lt`, and `$lte` (but not `$ne`) can be used as the
         *  basis of a query. You should include at least one of these in a selector.
         *
         *  For further reference see
         *  [selector syntax](https://cloud.ibm.com/docs/Cloudant?topic=Cloudant-selector-syntax).
         */
        selector?: JsonObject;
        /** Header parameter to specify the ID of the last events received by the server on a previous connection.
         *  Overrides `since` query parameter.
         */
        lastEventId?: string;
        /** Query parameter to specify whether to include the encoding information in attachment stubs if the particular
         *  attachment is compressed.
         */
        attEncodingInfo?: boolean;
        /** Query parameter to specify whether to include attachments bodies in a response. */
        attachments?: boolean;
        /** Query parameter to specify whether to include a list of conflicted revisions in each returned document.
         *  Active only when `include_docs` is `true`.
         */
        conflicts?: boolean;
        /** Query parameter to specify whether to return the documents in descending by key order. */
        descending?: boolean;
        /** Query parameter to specify the changes feed type. */
        feed?: PostChangesConstants.Feed | string;
        /** Query parameter to specify a filter function from a design document that will filter the changes stream
         *  emitting only filtered events. For example: `design_doc/filtername`.
         *
         *  Additionally, some keywords are reserved for built-in filters:
         *
         *    * `_design` - Returns only changes to design documents.
         *    * `_doc_ids` - Returns changes for documents with an ID matching one specified in
         *        `doc_ids` request body parameter.
         *    * `_selector` - Returns changes for documents that match the `selector`
         *        request body parameter. The selector syntax is the same as used for
         *        `_find`.
         *    * `_view` - Returns changes for documents that match an existing map
         *        function in the view specified by the query parameter `view`.
         */
        filter?: string;
        /** Query parameter to specify the period in milliseconds after which an empty line is sent in the results. Off
         *  by default and only applicable for
         *  `continuous` and `eventsource` feeds. Overrides any timeout to keep the feed alive indefinitely. May also be
         *  `true` to use a value of `60000`.
         *
         *  **Note:** Delivery of heartbeats cannot be relied on at specific intervals. If your application runs in an
         *  environment where idle network connections may break, `heartbeat` is not suitable as a keepalive mechanism.
         *  Instead, consider one of the following options:
         *    * Use the `timeout` parameter with a value that is compatible with your network environment.
         *    * Switch to scheduled usage of one of the non-continuous changes feed types
         *      (`normal` or `longpoll`).
         *    * Use TCP keepalive.
         */
        heartbeat?: number;
        /** Query parameter to specify whether to include the full content of the documents in the response. */
        includeDocs?: boolean;
        /** Query parameter to specify the number of returned documents to limit the result to. */
        limit?: number;
        /** Query parameter to specify that the update seq should only be calculated with every Nth result returned.
         *  When fetching changes in a batch, setting <code>seq_interval=&lt;batch size&gt;</code>, where &lt;batch size&gt;
         *  is the number of results requested per batch, load can be reduced on the source database as computing the seq
         *  value across many shards (especially in highly-sharded databases) is expensive.
         */
        seqInterval?: number;
        /** Query parameter to specify to start the results from the change immediately after the given update sequence.
         *  Can be a valid update sequence or `now` value. Default is `0` i.e. all changes.
         */
        since?: string;
        /** Query parameter to specify how many revisions are returned in the changes array. The default, `main_only`,
         *  will only return the current "winning" revision; all_docs will return all leaf revisions (including conflicts
         *  and deleted former conflicts).
         */
        style?: string;
        /** Query parameter to specify the maximum period in milliseconds to wait for a change before the response is
         *  sent, even if there are no results. Only applicable for `longpoll` or `continuous` feeds. Default value is
         *  specified by `httpd/changes_timeout` configuration option. Note that `60000` value is also the default maximum
         *  timeout to prevent undetected dead connections.
         */
        timeout?: number;
        /** Query parameter to specify a view function as a filter. Documents pass the filter if the view's map function
         *  emits at least one record for them.
         */
        view?: string;
        headers?: OutgoingHttpHeaders;
    }
    /** Constants for the `postChanges` operation. */
    namespace PostChangesConstants {
        /** Query parameter to specify the changes feed type. */
        enum Feed {
            CONTINUOUS = "continuous",
            EVENTSOURCE = "eventsource",
            LONGPOLL = "longpoll",
            NORMAL = "normal"
        }
    }
    /** Parameters for the `postChangesAsStream` operation. */
    interface PostChangesAsStreamParams {
        /** Path parameter to specify the database name. */
        db: string;
        /** Schema for a list of document IDs. */
        docIds?: string[];
        /** JSON array that uses the field syntax. Use this parameter to specify which fields of a document must be
         *  returned. If it is omitted or empty, the entire document is returned.
         */
        fields?: string[];
        /** JSON object describing criteria used to select documents. The selector specifies fields in the document, and
         *  provides an expression to evaluate with the field content or other data.
         *
         *  The selector object must:
         *    * Be structured as valid JSON.
         *    * Contain a valid query expression.
         *
         *  Using a selector is significantly more efficient than using a JavaScript filter function, and is the recommended
         *  option if filtering on document attributes only.
         *
         *  Elementary selector syntax requires you to specify one or more fields, and the corresponding values required for
         *  those fields. You can create more complex selector expressions by combining operators.
         *
         *  Operators are identified by the use of a dollar sign `$` prefix in the name field.
         *
         *  There are two core types of operators in the selector syntax:
         *  * Combination operators: applied at the topmost level of selection. They are used to combine selectors. A
         *  combination operator takes a single argument. The argument is either another selector, or an array of selectors.
         *  * Condition operators: are specific to a field, and are used to evaluate the value stored in that field. For
         *  instance, the basic `$eq` operator matches when the specified field contains a value that is equal to the
         *  supplied argument. See [the Cloudant Docs](https://cloud.ibm.com/docs/Cloudant?topic=Cloudant-operators) for a
         *  list of all available combination and conditional operators.
         *  * Only equality operators such as `$eq`, `$gt`, `$gte`, `$lt`, and `$lte` (but not `$ne`) can be used as the
         *  basis of a query. You should include at least one of these in a selector.
         *
         *  For further reference see
         *  [selector syntax](https://cloud.ibm.com/docs/Cloudant?topic=Cloudant-selector-syntax).
         */
        selector?: JsonObject;
        /** Header parameter to specify the ID of the last events received by the server on a previous connection.
         *  Overrides `since` query parameter.
         */
        lastEventId?: string;
        /** Query parameter to specify whether to include the encoding information in attachment stubs if the particular
         *  attachment is compressed.
         */
        attEncodingInfo?: boolean;
        /** Query parameter to specify whether to include attachments bodies in a response. */
        attachments?: boolean;
        /** Query parameter to specify whether to include a list of conflicted revisions in each returned document.
         *  Active only when `include_docs` is `true`.
         */
        conflicts?: boolean;
        /** Query parameter to specify whether to return the documents in descending by key order. */
        descending?: boolean;
        /** Query parameter to specify the changes feed type. */
        feed?: PostChangesAsStreamConstants.Feed | string;
        /** Query parameter to specify a filter function from a design document that will filter the changes stream
         *  emitting only filtered events. For example: `design_doc/filtername`.
         *
         *  Additionally, some keywords are reserved for built-in filters:
         *
         *    * `_design` - Returns only changes to design documents.
         *    * `_doc_ids` - Returns changes for documents with an ID matching one specified in
         *        `doc_ids` request body parameter.
         *    * `_selector` - Returns changes for documents that match the `selector`
         *        request body parameter. The selector syntax is the same as used for
         *        `_find`.
         *    * `_view` - Returns changes for documents that match an existing map
         *        function in the view specified by the query parameter `view`.
         */
        filter?: string;
        /** Query parameter to specify the period in milliseconds after which an empty line is sent in the results. Off
         *  by default and only applicable for
         *  `continuous` and `eventsource` feeds. Overrides any timeout to keep the feed alive indefinitely. May also be
         *  `true` to use a value of `60000`.
         *
         *  **Note:** Delivery of heartbeats cannot be relied on at specific intervals. If your application runs in an
         *  environment where idle network connections may break, `heartbeat` is not suitable as a keepalive mechanism.
         *  Instead, consider one of the following options:
         *    * Use the `timeout` parameter with a value that is compatible with your network environment.
         *    * Switch to scheduled usage of one of the non-continuous changes feed types
         *      (`normal` or `longpoll`).
         *    * Use TCP keepalive.
         */
        heartbeat?: number;
        /** Query parameter to specify whether to include the full content of the documents in the response. */
        includeDocs?: boolean;
        /** Query parameter to specify the number of returned documents to limit the result to. */
        limit?: number;
        /** Query parameter to specify that the update seq should only be calculated with every Nth result returned.
         *  When fetching changes in a batch, setting <code>seq_interval=&lt;batch size&gt;</code>, where &lt;batch size&gt;
         *  is the number of results requested per batch, load can be reduced on the source database as computing the seq
         *  value across many shards (especially in highly-sharded databases) is expensive.
         */
        seqInterval?: number;
        /** Query parameter to specify to start the results from the change immediately after the given update sequence.
         *  Can be a valid update sequence or `now` value. Default is `0` i.e. all changes.
         */
        since?: string;
        /** Query parameter to specify how many revisions are returned in the changes array. The default, `main_only`,
         *  will only return the current "winning" revision; all_docs will return all leaf revisions (including conflicts
         *  and deleted former conflicts).
         */
        style?: string;
        /** Query parameter to specify the maximum period in milliseconds to wait for a change before the response is
         *  sent, even if there are no results. Only applicable for `longpoll` or `continuous` feeds. Default value is
         *  specified by `httpd/changes_timeout` configuration option. Note that `60000` value is also the default maximum
         *  timeout to prevent undetected dead connections.
         */
        timeout?: number;
        /** Query parameter to specify a view function as a filter. Documents pass the filter if the view's map function
         *  emits at least one record for them.
         */
        view?: string;
        headers?: OutgoingHttpHeaders;
    }
    /** Constants for the `postChangesAsStream` operation. */
    namespace PostChangesAsStreamConstants {
        /** Query parameter to specify the changes feed type. */
        enum Feed {
            CONTINUOUS = "continuous",
            EVENTSOURCE = "eventsource",
            LONGPOLL = "longpoll",
            NORMAL = "normal"
        }
    }
    /** Parameters for the `headDatabase` operation. */
    interface HeadDatabaseParams {
        /** Path parameter to specify the database name. */
        db: string;
        headers?: OutgoingHttpHeaders;
    }
    /** Parameters for the `getAllDbs` operation. */
    interface GetAllDbsParams {
        /** Query parameter to specify whether to return the documents in descending by key order. */
        descending?: boolean;
        /** Query parameter to specify to stop returning records when the specified key is reached. String
         *  representation of any JSON type that matches the key type emitted by the view function.
         */
        endKey?: string;
        /** Query parameter to specify the number of returned documents to limit the result to. */
        limit?: number;
        /** Query parameter to specify the number of records before starting to return the results. */
        skip?: number;
        /** Query parameter to specify to start returning records from the specified key. String representation of any
         *  JSON type that matches the key type emitted by the view function.
         */
        startKey?: string;
        headers?: OutgoingHttpHeaders;
    }
    /** Parameters for the `postDbsInfo` operation. */
    interface PostDbsInfoParams {
        /** A list of database names. */
        keys: string[];
        headers?: OutgoingHttpHeaders;
    }
    /** Parameters for the `deleteDatabase` operation. */
    interface DeleteDatabaseParams {
        /** Path parameter to specify the database name. */
        db: string;
        headers?: OutgoingHttpHeaders;
    }
    /** Parameters for the `getDatabaseInformation` operation. */
    interface GetDatabaseInformationParams {
        /** Path parameter to specify the database name. */
        db: string;
        headers?: OutgoingHttpHeaders;
    }
    /** Parameters for the `putDatabase` operation. */
    interface PutDatabaseParams {
        /** Path parameter to specify the database name. */
        db: string;
        /** Query parameter to specify whether to enable database partitions when creating a database. */
        partitioned?: boolean;
        /** The number of shards in the database. Each shard is a partition of the hash value range. Cloudant recommends
         *  using the default value for most databases. However, if your database is expected to be larger than 250 GB or
         *  have a lot of indexes, you may need to adjust the settings. In these cases, it's best to reach out to IBM
         *  Cloudant customer support for guidance on how to meet your specific needs and requirements.
         */
        q?: number;
        headers?: OutgoingHttpHeaders;
    }
    /** Parameters for the `headDocument` operation. */
    interface HeadDocumentParams {
        /** Path parameter to specify the database name. */
        db: string;
        /** Path parameter to specify the document ID. */
        docId: string;
        /** Header parameter to specify a double quoted document revision token for cache control. */
        ifNoneMatch?: string;
        /** Query parameter to specify whether to force retrieving latest leaf revision, no matter what rev was
         *  requested.
         */
        latest?: boolean;
        /** Query parameter to specify a document revision. */
        rev?: string;
        headers?: OutgoingHttpHeaders;
    }
    /** Parameters for the `postDocument` operation. */
    interface PostDocumentParams {
        /** Path parameter to specify the database name. */
        db: string;
        /** HTTP request body for Document operations. */
        document: Document | NodeJS.ReadableStream | Buffer;
        /** The type of the input. */
        contentType?: PostDocumentConstants.ContentType | string;
        /** Query parameter to specify whether to store in batch mode. The server will respond with a HTTP 202 Accepted
         *  response code immediately.
         */
        batch?: PostDocumentConstants.Batch | string;
        headers?: OutgoingHttpHeaders;
    }
    /** Constants for the `postDocument` operation. */
    namespace PostDocumentConstants {
        /** The type of the input. */
        enum ContentType {
            APPLICATION_JSON = "application/json",
            MULTIPART_MIXED = "multipart/mixed",
            MULTIPART_RELATED = "multipart/related",
            APPLICATION_OCTET_STREAM = "application/octet-stream"
        }
        /** Query parameter to specify whether to store in batch mode. The server will respond with a HTTP 202 Accepted response code immediately. */
        enum Batch {
            OK = "ok"
        }
    }
    /** Parameters for the `postAllDocs` operation. */
    interface PostAllDocsParams {
        /** Path parameter to specify the database name. */
        db: string;
        /** Parameter to specify whether to include the encoding information in attachment stubs if the particular
         *  attachment is compressed.
         */
        attEncodingInfo?: boolean;
        /** Parameter to specify whether to include attachments bodies in a response. */
        attachments?: boolean;
        /** Parameter to specify whether to include a list of conflicted revisions in each returned document. Active
         *  only when `include_docs` is `true`.
         */
        conflicts?: boolean;
        /** Parameter to specify whether to return the documents in descending by key order. */
        descending?: boolean;
        /** Parameter to specify whether to include the full content of the documents in the response. */
        includeDocs?: boolean;
        /** Parameter to specify whether the specified end key should be included in the result. */
        inclusiveEnd?: boolean;
        /** Parameter to specify the number of returned documents to limit the result to. */
        limit?: number;
        /** Parameter to specify the number of records before starting to return the results. */
        skip?: number;
        /** Parameter to specify whether to include in the response an update_seq value indicating the sequence id of
         *  the database the view reflects.
         */
        updateSeq?: boolean;
        /** Schema for a document ID. */
        endKey?: string;
        /** Schema for a document ID. */
        key?: string;
        /** Schema for a list of document IDs. */
        keys?: string[];
        /** Schema for a document ID. */
        startKey?: string;
        headers?: OutgoingHttpHeaders;
    }
    /** Parameters for the `postAllDocsAsStream` operation. */
    interface PostAllDocsAsStreamParams {
        /** Path parameter to specify the database name. */
        db: string;
        /** Parameter to specify whether to include the encoding information in attachment stubs if the particular
         *  attachment is compressed.
         */
        attEncodingInfo?: boolean;
        /** Parameter to specify whether to include attachments bodies in a response. */
        attachments?: boolean;
        /** Parameter to specify whether to include a list of conflicted revisions in each returned document. Active
         *  only when `include_docs` is `true`.
         */
        conflicts?: boolean;
        /** Parameter to specify whether to return the documents in descending by key order. */
        descending?: boolean;
        /** Parameter to specify whether to include the full content of the documents in the response. */
        includeDocs?: boolean;
        /** Parameter to specify whether the specified end key should be included in the result. */
        inclusiveEnd?: boolean;
        /** Parameter to specify the number of returned documents to limit the result to. */
        limit?: number;
        /** Parameter to specify the number of records before starting to return the results. */
        skip?: number;
        /** Parameter to specify whether to include in the response an update_seq value indicating the sequence id of
         *  the database the view reflects.
         */
        updateSeq?: boolean;
        /** Schema for a document ID. */
        endKey?: string;
        /** Schema for a document ID. */
        key?: string;
        /** Schema for a list of document IDs. */
        keys?: string[];
        /** Schema for a document ID. */
        startKey?: string;
        headers?: OutgoingHttpHeaders;
    }
    /** Parameters for the `postAllDocsQueries` operation. */
    interface PostAllDocsQueriesParams {
        /** Path parameter to specify the database name. */
        db: string;
        /** An array of query objects with fields for the parameters of each individual view query to be executed. The
         *  field names and their meaning are the same as the query parameters of a regular `/_all_docs` request.
         */
        queries: AllDocsQuery[];
        headers?: OutgoingHttpHeaders;
    }
    /** Parameters for the `postAllDocsQueriesAsStream` operation. */
    interface PostAllDocsQueriesAsStreamParams {
        /** Path parameter to specify the database name. */
        db: string;
        /** An array of query objects with fields for the parameters of each individual view query to be executed. The
         *  field names and their meaning are the same as the query parameters of a regular `/_all_docs` request.
         */
        queries: AllDocsQuery[];
        headers?: OutgoingHttpHeaders;
    }
    /** Parameters for the `postBulkDocs` operation. */
    interface PostBulkDocsParams {
        /** Path parameter to specify the database name. */
        db: string;
        /** HTTP request body for postBulkDocs. */
        bulkDocs: BulkDocs | NodeJS.ReadableStream | Buffer;
        headers?: OutgoingHttpHeaders;
    }
    /** Parameters for the `postBulkGet` operation. */
    interface PostBulkGetParams {
        /** Path parameter to specify the database name. */
        db: string;
        /** List of document items to get in bulk. */
        docs: BulkGetQueryDocument[];
        /** Query parameter to specify whether to include attachments bodies in a response. */
        attachments?: boolean;
        /** Query parameter to specify whether to include the encoding information in attachment stubs if the particular
         *  attachment is compressed.
         */
        attEncodingInfo?: boolean;
        /** Query parameter to specify whether to force retrieving latest leaf revision, no matter what rev was
         *  requested.
         */
        latest?: boolean;
        /** Query parameter to specify whether to include a list of all known document revisions. */
        revs?: boolean;
        headers?: OutgoingHttpHeaders;
    }
    /** Parameters for the `postBulkGetAsMixed` operation. */
    interface PostBulkGetAsMixedParams {
        /** Path parameter to specify the database name. */
        db: string;
        /** List of document items to get in bulk. */
        docs: BulkGetQueryDocument[];
        /** Query parameter to specify whether to include attachments bodies in a response. */
        attachments?: boolean;
        /** Query parameter to specify whether to include the encoding information in attachment stubs if the particular
         *  attachment is compressed.
         */
        attEncodingInfo?: boolean;
        /** Query parameter to specify whether to force retrieving latest leaf revision, no matter what rev was
         *  requested.
         */
        latest?: boolean;
        /** Query parameter to specify whether to include a list of all known document revisions. */
        revs?: boolean;
        headers?: OutgoingHttpHeaders;
    }
    /** Parameters for the `postBulkGetAsRelated` operation. */
    interface PostBulkGetAsRelatedParams {
        /** Path parameter to specify the database name. */
        db: string;
        /** List of document items to get in bulk. */
        docs: BulkGetQueryDocument[];
        /** Query parameter to specify whether to include attachments bodies in a response. */
        attachments?: boolean;
        /** Query parameter to specify whether to include the encoding information in attachment stubs if the particular
         *  attachment is compressed.
         */
        attEncodingInfo?: boolean;
        /** Query parameter to specify whether to force retrieving latest leaf revision, no matter what rev was
         *  requested.
         */
        latest?: boolean;
        /** Query parameter to specify whether to include a list of all known document revisions. */
        revs?: boolean;
        headers?: OutgoingHttpHeaders;
    }
    /** Parameters for the `postBulkGetAsStream` operation. */
    interface PostBulkGetAsStreamParams {
        /** Path parameter to specify the database name. */
        db: string;
        /** List of document items to get in bulk. */
        docs: BulkGetQueryDocument[];
        /** Query parameter to specify whether to include attachments bodies in a response. */
        attachments?: boolean;
        /** Query parameter to specify whether to include the encoding information in attachment stubs if the particular
         *  attachment is compressed.
         */
        attEncodingInfo?: boolean;
        /** Query parameter to specify whether to force retrieving latest leaf revision, no matter what rev was
         *  requested.
         */
        latest?: boolean;
        /** Query parameter to specify whether to include a list of all known document revisions. */
        revs?: boolean;
        headers?: OutgoingHttpHeaders;
    }
    /** Parameters for the `deleteDocument` operation. */
    interface DeleteDocumentParams {
        /** Path parameter to specify the database name. */
        db: string;
        /** Path parameter to specify the document ID. */
        docId: string;
        /** Header parameter to specify the document revision. Alternative to rev query parameter. */
        ifMatch?: string;
        /** Query parameter to specify whether to store in batch mode. The server will respond with a HTTP 202 Accepted
         *  response code immediately.
         */
        batch?: DeleteDocumentConstants.Batch | string;
        /** Query parameter to specify a document revision. */
        rev?: string;
        headers?: OutgoingHttpHeaders;
    }
    /** Constants for the `deleteDocument` operation. */
    namespace DeleteDocumentConstants {
        /** Query parameter to specify whether to store in batch mode. The server will respond with a HTTP 202 Accepted response code immediately. */
        enum Batch {
            OK = "ok"
        }
    }
    /** Parameters for the `getDocument` operation. */
    interface GetDocumentParams {
        /** Path parameter to specify the database name. */
        db: string;
        /** Path parameter to specify the document ID. */
        docId: string;
        /** Header parameter to specify a double quoted document revision token for cache control. */
        ifNoneMatch?: string;
        /** Query parameter to specify whether to include attachments bodies in a response. */
        attachments?: boolean;
        /** Query parameter to specify whether to include the encoding information in attachment stubs if the particular
         *  attachment is compressed.
         */
        attEncodingInfo?: boolean;
        /** Query parameter to specify whether to include a list of conflicted revisions in each returned document.
         *  Active only when `include_docs` is `true`.
         */
        conflicts?: boolean;
        /** Query parameter to specify whether to include a list of deleted conflicted revisions in the
         *  `_deleted_conflicts` property of the returned document.
         */
        deletedConflicts?: boolean;
        /** Query parameter to specify whether to force retrieving latest leaf revision, no matter what rev was
         *  requested.
         */
        latest?: boolean;
        /** Query parameter to specify whether to include the last update sequence for the document. */
        localSeq?: boolean;
        /** Query parameter to specify whether to include document meta information. Acts the same as specifying all of
         *  the conflicts, deleted_conflicts and open_revs query parameters.
         */
        meta?: boolean;
        /** Query parameter to specify a document revision. */
        rev?: string;
        /** Query parameter to specify whether to include a list of all known document revisions. */
        revs?: boolean;
        /** Query parameter to specify whether to includes detailed information for all known document revisions. */
        revsInfo?: boolean;
        headers?: OutgoingHttpHeaders;
    }
    /** Parameters for the `getDocumentAsMixed` operation. */
    interface GetDocumentAsMixedParams {
        /** Path parameter to specify the database name. */
        db: string;
        /** Path parameter to specify the document ID. */
        docId: string;
        /** Header parameter to specify a double quoted document revision token for cache control. */
        ifNoneMatch?: string;
        /** Query parameter to specify whether to include attachments bodies in a response. */
        attachments?: boolean;
        /** Query parameter to specify whether to include the encoding information in attachment stubs if the particular
         *  attachment is compressed.
         */
        attEncodingInfo?: boolean;
        /** Query parameter to specify whether to include a list of conflicted revisions in each returned document.
         *  Active only when `include_docs` is `true`.
         */
        conflicts?: boolean;
        /** Query parameter to specify whether to include a list of deleted conflicted revisions in the
         *  `_deleted_conflicts` property of the returned document.
         */
        deletedConflicts?: boolean;
        /** Query parameter to specify whether to force retrieving latest leaf revision, no matter what rev was
         *  requested.
         */
        latest?: boolean;
        /** Query parameter to specify whether to include the last update sequence for the document. */
        localSeq?: boolean;
        /** Query parameter to specify whether to include document meta information. Acts the same as specifying all of
         *  the conflicts, deleted_conflicts and open_revs query parameters.
         */
        meta?: boolean;
        /** Query parameter to specify a document revision. */
        rev?: string;
        /** Query parameter to specify whether to include a list of all known document revisions. */
        revs?: boolean;
        /** Query parameter to specify whether to includes detailed information for all known document revisions. */
        revsInfo?: boolean;
        headers?: OutgoingHttpHeaders;
    }
    /** Parameters for the `getDocumentAsRelated` operation. */
    interface GetDocumentAsRelatedParams {
        /** Path parameter to specify the database name. */
        db: string;
        /** Path parameter to specify the document ID. */
        docId: string;
        /** Header parameter to specify a double quoted document revision token for cache control. */
        ifNoneMatch?: string;
        /** Query parameter to specify whether to include attachments bodies in a response. */
        attachments?: boolean;
        /** Query parameter to specify whether to include the encoding information in attachment stubs if the particular
         *  attachment is compressed.
         */
        attEncodingInfo?: boolean;
        /** Query parameter to specify whether to include a list of conflicted revisions in each returned document.
         *  Active only when `include_docs` is `true`.
         */
        conflicts?: boolean;
        /** Query parameter to specify whether to include a list of deleted conflicted revisions in the
         *  `_deleted_conflicts` property of the returned document.
         */
        deletedConflicts?: boolean;
        /** Query parameter to specify whether to force retrieving latest leaf revision, no matter what rev was
         *  requested.
         */
        latest?: boolean;
        /** Query parameter to specify whether to include the last update sequence for the document. */
        localSeq?: boolean;
        /** Query parameter to specify whether to include document meta information. Acts the same as specifying all of
         *  the conflicts, deleted_conflicts and open_revs query parameters.
         */
        meta?: boolean;
        /** Query parameter to specify a document revision. */
        rev?: string;
        /** Query parameter to specify whether to include a list of all known document revisions. */
        revs?: boolean;
        /** Query parameter to specify whether to includes detailed information for all known document revisions. */
        revsInfo?: boolean;
        headers?: OutgoingHttpHeaders;
    }
    /** Parameters for the `getDocumentAsStream` operation. */
    interface GetDocumentAsStreamParams {
        /** Path parameter to specify the database name. */
        db: string;
        /** Path parameter to specify the document ID. */
        docId: string;
        /** Header parameter to specify a double quoted document revision token for cache control. */
        ifNoneMatch?: string;
        /** Query parameter to specify whether to include attachments bodies in a response. */
        attachments?: boolean;
        /** Query parameter to specify whether to include the encoding information in attachment stubs if the particular
         *  attachment is compressed.
         */
        attEncodingInfo?: boolean;
        /** Query parameter to specify whether to include a list of conflicted revisions in each returned document.
         *  Active only when `include_docs` is `true`.
         */
        conflicts?: boolean;
        /** Query parameter to specify whether to include a list of deleted conflicted revisions in the
         *  `_deleted_conflicts` property of the returned document.
         */
        deletedConflicts?: boolean;
        /** Query parameter to specify whether to force retrieving latest leaf revision, no matter what rev was
         *  requested.
         */
        latest?: boolean;
        /** Query parameter to specify whether to include the last update sequence for the document. */
        localSeq?: boolean;
        /** Query parameter to specify whether to include document meta information. Acts the same as specifying all of
         *  the conflicts, deleted_conflicts and open_revs query parameters.
         */
        meta?: boolean;
        /** Query parameter to specify a document revision. */
        rev?: string;
        /** Query parameter to specify whether to include a list of all known document revisions. */
        revs?: boolean;
        /** Query parameter to specify whether to includes detailed information for all known document revisions. */
        revsInfo?: boolean;
        headers?: OutgoingHttpHeaders;
    }
    /** Parameters for the `putDocument` operation. */
    interface PutDocumentParams {
        /** Path parameter to specify the database name. */
        db: string;
        /** Path parameter to specify the document ID. */
        docId: string;
        /** HTTP request body for Document operations. */
        document: Document | NodeJS.ReadableStream | Buffer;
        /** The type of the input. */
        contentType?: PutDocumentConstants.ContentType | string;
        /** Header parameter to specify the document revision. Alternative to rev query parameter. */
        ifMatch?: string;
        /** Query parameter to specify whether to store in batch mode. The server will respond with a HTTP 202 Accepted
         *  response code immediately.
         */
        batch?: PutDocumentConstants.Batch | string;
        /** Query parameter to specify whether to prevent insertion of conflicting document revisions. If false, a
         *  well-formed _rev must be included in the document. False is used by the replicator to insert documents into the
         *  target database even if that leads to the creation of conflicts.
         */
        newEdits?: boolean;
        /** Query parameter to specify a document revision. */
        rev?: string;
        headers?: OutgoingHttpHeaders;
    }
    /** Constants for the `putDocument` operation. */
    namespace PutDocumentConstants {
        /** The type of the input. */
        enum ContentType {
            APPLICATION_JSON = "application/json",
            MULTIPART_MIXED = "multipart/mixed",
            MULTIPART_RELATED = "multipart/related",
            APPLICATION_OCTET_STREAM = "application/octet-stream"
        }
        /** Query parameter to specify whether to store in batch mode. The server will respond with a HTTP 202 Accepted response code immediately. */
        enum Batch {
            OK = "ok"
        }
    }
    /** Parameters for the `headDesignDocument` operation. */
    interface HeadDesignDocumentParams {
        /** Path parameter to specify the database name. */
        db: string;
        /** Path parameter to specify the design document name. The design document name is the design document ID
         *  excluding the `_design/` prefix.
         */
        ddoc: string;
        /** Header parameter to specify a double quoted document revision token for cache control. */
        ifNoneMatch?: string;
        headers?: OutgoingHttpHeaders;
    }
    /** Parameters for the `deleteDesignDocument` operation. */
    interface DeleteDesignDocumentParams {
        /** Path parameter to specify the database name. */
        db: string;
        /** Path parameter to specify the design document name. The design document name is the design document ID
         *  excluding the `_design/` prefix.
         */
        ddoc: string;
        /** Header parameter to specify the document revision. Alternative to rev query parameter. */
        ifMatch?: string;
        /** Query parameter to specify whether to store in batch mode. The server will respond with a HTTP 202 Accepted
         *  response code immediately.
         */
        batch?: DeleteDesignDocumentConstants.Batch | string;
        /** Query parameter to specify a document revision. */
        rev?: string;
        headers?: OutgoingHttpHeaders;
    }
    /** Constants for the `deleteDesignDocument` operation. */
    namespace DeleteDesignDocumentConstants {
        /** Query parameter to specify whether to store in batch mode. The server will respond with a HTTP 202 Accepted response code immediately. */
        enum Batch {
            OK = "ok"
        }
    }
    /** Parameters for the `getDesignDocument` operation. */
    interface GetDesignDocumentParams {
        /** Path parameter to specify the database name. */
        db: string;
        /** Path parameter to specify the design document name. The design document name is the design document ID
         *  excluding the `_design/` prefix.
         */
        ddoc: string;
        /** Header parameter to specify a double quoted document revision token for cache control. */
        ifNoneMatch?: string;
        /** Query parameter to specify whether to include attachments bodies in a response. */
        attachments?: boolean;
        /** Query parameter to specify whether to include the encoding information in attachment stubs if the particular
         *  attachment is compressed.
         */
        attEncodingInfo?: boolean;
        /** Query parameter to specify whether to include a list of conflicted revisions in each returned document.
         *  Active only when `include_docs` is `true`.
         */
        conflicts?: boolean;
        /** Query parameter to specify whether to include a list of deleted conflicted revisions in the
         *  `_deleted_conflicts` property of the returned document.
         */
        deletedConflicts?: boolean;
        /** Query parameter to specify whether to force retrieving latest leaf revision, no matter what rev was
         *  requested.
         */
        latest?: boolean;
        /** Query parameter to specify whether to include the last update sequence for the document. */
        localSeq?: boolean;
        /** Query parameter to specify whether to include document meta information. Acts the same as specifying all of
         *  the conflicts, deleted_conflicts and open_revs query parameters.
         */
        meta?: boolean;
        /** Query parameter to specify a document revision. */
        rev?: string;
        /** Query parameter to specify whether to include a list of all known document revisions. */
        revs?: boolean;
        /** Query parameter to specify whether to includes detailed information for all known document revisions. */
        revsInfo?: boolean;
        headers?: OutgoingHttpHeaders;
    }
    /** Parameters for the `putDesignDocument` operation. */
    interface PutDesignDocumentParams {
        /** Path parameter to specify the database name. */
        db: string;
        /** Path parameter to specify the design document name. The design document name is the design document ID
         *  excluding the `_design/` prefix.
         */
        ddoc: string;
        /** HTTP request body for DesignDocument operations. */
        designDocument: DesignDocument;
        /** Header parameter to specify the document revision. Alternative to rev query parameter. */
        ifMatch?: string;
        /** Query parameter to specify whether to store in batch mode. The server will respond with a HTTP 202 Accepted
         *  response code immediately.
         */
        batch?: PutDesignDocumentConstants.Batch | string;
        /** Query parameter to specify whether to prevent insertion of conflicting document revisions. If false, a
         *  well-formed _rev must be included in the document. False is used by the replicator to insert documents into the
         *  target database even if that leads to the creation of conflicts.
         */
        newEdits?: boolean;
        /** Query parameter to specify a document revision. */
        rev?: string;
        headers?: OutgoingHttpHeaders;
    }
    /** Constants for the `putDesignDocument` operation. */
    namespace PutDesignDocumentConstants {
        /** Query parameter to specify whether to store in batch mode. The server will respond with a HTTP 202 Accepted response code immediately. */
        enum Batch {
            OK = "ok"
        }
    }
    /** Parameters for the `getDesignDocumentInformation` operation. */
    interface GetDesignDocumentInformationParams {
        /** Path parameter to specify the database name. */
        db: string;
        /** Path parameter to specify the design document name. The design document name is the design document ID
         *  excluding the `_design/` prefix.
         */
        ddoc: string;
        headers?: OutgoingHttpHeaders;
    }
    /** Parameters for the `postDesignDocs` operation. */
    interface PostDesignDocsParams {
        /** Path parameter to specify the database name. */
        db: string;
        /** Parameter to specify whether to include the encoding information in attachment stubs if the particular
         *  attachment is compressed.
         */
        attEncodingInfo?: boolean;
        /** Parameter to specify whether to include attachments bodies in a response. */
        attachments?: boolean;
        /** Parameter to specify whether to include a list of conflicted revisions in each returned document. Active
         *  only when `include_docs` is `true`.
         */
        conflicts?: boolean;
        /** Parameter to specify whether to return the documents in descending by key order. */
        descending?: boolean;
        /** Parameter to specify whether to include the full content of the documents in the response. */
        includeDocs?: boolean;
        /** Parameter to specify whether the specified end key should be included in the result. */
        inclusiveEnd?: boolean;
        /** Parameter to specify the number of returned documents to limit the result to. */
        limit?: number;
        /** Parameter to specify the number of records before starting to return the results. */
        skip?: number;
        /** Parameter to specify whether to include in the response an update_seq value indicating the sequence id of
         *  the database the view reflects.
         */
        updateSeq?: boolean;
        /** Schema for a document ID. */
        endKey?: string;
        /** Schema for a document ID. */
        key?: string;
        /** Schema for a list of document IDs. */
        keys?: string[];
        /** Schema for a document ID. */
        startKey?: string;
        /** The type of the response: application/json or application/octet-stream. */
        accept?: PostDesignDocsConstants.Accept | string;
        headers?: OutgoingHttpHeaders;
    }
    /** Constants for the `postDesignDocs` operation. */
    namespace PostDesignDocsConstants {
        /** The type of the response: application/json or application/octet-stream. */
        enum Accept {
            APPLICATION_JSON = "application/json",
            APPLICATION_OCTET_STREAM = "application/octet-stream"
        }
    }
    /** Parameters for the `postDesignDocsQueries` operation. */
    interface PostDesignDocsQueriesParams {
        /** Path parameter to specify the database name. */
        db: string;
        /** An array of query objects with fields for the parameters of each individual view query to be executed. The
         *  field names and their meaning are the same as the query parameters of a regular `/_all_docs` request.
         */
        queries: AllDocsQuery[];
        /** The type of the response: application/json or application/octet-stream. */
        accept?: PostDesignDocsQueriesConstants.Accept | string;
        headers?: OutgoingHttpHeaders;
    }
    /** Constants for the `postDesignDocsQueries` operation. */
    namespace PostDesignDocsQueriesConstants {
        /** The type of the response: application/json or application/octet-stream. */
        enum Accept {
            APPLICATION_JSON = "application/json",
            APPLICATION_OCTET_STREAM = "application/octet-stream"
        }
    }
    /** Parameters for the `postView` operation. */
    interface PostViewParams {
        /** Path parameter to specify the database name. */
        db: string;
        /** Path parameter to specify the design document name. The design document name is the design document ID
         *  excluding the `_design/` prefix.
         */
        ddoc: string;
        /** Path parameter to specify the map reduce view function name. */
        view: string;
        /** Parameter to specify whether to include the encoding information in attachment stubs if the particular
         *  attachment is compressed.
         */
        attEncodingInfo?: boolean;
        /** Parameter to specify whether to include attachments bodies in a response. */
        attachments?: boolean;
        /** Parameter to specify whether to include a list of conflicted revisions in each returned document. Active
         *  only when `include_docs` is `true`.
         */
        conflicts?: boolean;
        /** Parameter to specify whether to return the documents in descending by key order. */
        descending?: boolean;
        /** Parameter to specify whether to include the full content of the documents in the response. */
        includeDocs?: boolean;
        /** Parameter to specify whether the specified end key should be included in the result. */
        inclusiveEnd?: boolean;
        /** Parameter to specify the number of returned documents to limit the result to. */
        limit?: number;
        /** Parameter to specify the number of records before starting to return the results. */
        skip?: number;
        /** Parameter to specify whether to include in the response an update_seq value indicating the sequence id of
         *  the database the view reflects.
         */
        updateSeq?: boolean;
        /** Schema for any JSON type. */
        endKey?: any;
        /** Schema for a document ID. */
        endKeyDocId?: string;
        /** Parameter to specify whether to group reduced results by key. Valid only if a reduce function defined in the
         *  view. If the view emits key in JSON array format, then it is possible to reduce groups further based on the
         *  number of array elements with the `group_level` parameter.
         */
        group?: boolean;
        /** Parameter to specify a group level to be used. Only applicable if the view uses keys that are JSON arrays.
         *  Implies group is `true`. Group level groups the reduced results by the specified number of array elements. If
         *  unset, results are grouped by the entire array key, returning a reduced value for each complete key.
         */
        groupLevel?: number;
        /** Schema for any JSON type. */
        key?: any;
        /** Parameter to specify returning only documents that match any of the specified keys. A JSON array of keys
         *  that match the key type emitted by the view function.
         */
        keys?: any[];
        /** Parameter to specify whether to use the reduce function in a map-reduce view. Default is true when a reduce
         *  function is defined.
         */
        reduce?: boolean;
        /** Query parameter to specify whether use the same replica of  the index on each request. The default value
         *  `false` contacts all  replicas and returns the result from the first, fastest, responder. Setting it to `true`
         *  when used in conjunction with `update=false`  may improve consistency at the expense of increased latency and
         *  decreased throughput if the selected replica is not the fastest of the available  replicas.
         *
         *  **Note:** In general setting `true` is discouraged and is strictly not recommended when using `update=true`.
         */
        stable?: boolean;
        /** Schema for any JSON type. */
        startKey?: any;
        /** Schema for a document ID. */
        startKeyDocId?: string;
        /** Parameter to specify whether or not the view in question should be updated prior to responding to the user.
         *
         *  * `true` - Return results after the view is updated.
         *  * `false` - Return results without updating the view.
         *  * `lazy` - Return the view results without waiting for an update, but update them immediately after the request.
         */
        update?: PostViewConstants.Update | string;
        headers?: OutgoingHttpHeaders;
    }
    /** Constants for the `postView` operation. */
    namespace PostViewConstants {
        /** Parameter to specify whether or not the view in question should be updated prior to responding to the user. * `true` - Return results after the view is updated. * `false` - Return results without updating the view. * `lazy` - Return the view results without waiting for an update, but update them immediately after the request. */
        enum Update {
            TRUE = "true",
            FALSE = "false",
            LAZY = "lazy"
        }
    }
    /** Parameters for the `postViewAsStream` operation. */
    interface PostViewAsStreamParams {
        /** Path parameter to specify the database name. */
        db: string;
        /** Path parameter to specify the design document name. The design document name is the design document ID
         *  excluding the `_design/` prefix.
         */
        ddoc: string;
        /** Path parameter to specify the map reduce view function name. */
        view: string;
        /** Parameter to specify whether to include the encoding information in attachment stubs if the particular
         *  attachment is compressed.
         */
        attEncodingInfo?: boolean;
        /** Parameter to specify whether to include attachments bodies in a response. */
        attachments?: boolean;
        /** Parameter to specify whether to include a list of conflicted revisions in each returned document. Active
         *  only when `include_docs` is `true`.
         */
        conflicts?: boolean;
        /** Parameter to specify whether to return the documents in descending by key order. */
        descending?: boolean;
        /** Parameter to specify whether to include the full content of the documents in the response. */
        includeDocs?: boolean;
        /** Parameter to specify whether the specified end key should be included in the result. */
        inclusiveEnd?: boolean;
        /** Parameter to specify the number of returned documents to limit the result to. */
        limit?: number;
        /** Parameter to specify the number of records before starting to return the results. */
        skip?: number;
        /** Parameter to specify whether to include in the response an update_seq value indicating the sequence id of
         *  the database the view reflects.
         */
        updateSeq?: boolean;
        /** Schema for any JSON type. */
        endKey?: any;
        /** Schema for a document ID. */
        endKeyDocId?: string;
        /** Parameter to specify whether to group reduced results by key. Valid only if a reduce function defined in the
         *  view. If the view emits key in JSON array format, then it is possible to reduce groups further based on the
         *  number of array elements with the `group_level` parameter.
         */
        group?: boolean;
        /** Parameter to specify a group level to be used. Only applicable if the view uses keys that are JSON arrays.
         *  Implies group is `true`. Group level groups the reduced results by the specified number of array elements. If
         *  unset, results are grouped by the entire array key, returning a reduced value for each complete key.
         */
        groupLevel?: number;
        /** Schema for any JSON type. */
        key?: any;
        /** Parameter to specify returning only documents that match any of the specified keys. A JSON array of keys
         *  that match the key type emitted by the view function.
         */
        keys?: any[];
        /** Parameter to specify whether to use the reduce function in a map-reduce view. Default is true when a reduce
         *  function is defined.
         */
        reduce?: boolean;
        /** Query parameter to specify whether use the same replica of  the index on each request. The default value
         *  `false` contacts all  replicas and returns the result from the first, fastest, responder. Setting it to `true`
         *  when used in conjunction with `update=false`  may improve consistency at the expense of increased latency and
         *  decreased throughput if the selected replica is not the fastest of the available  replicas.
         *
         *  **Note:** In general setting `true` is discouraged and is strictly not recommended when using `update=true`.
         */
        stable?: boolean;
        /** Schema for any JSON type. */
        startKey?: any;
        /** Schema for a document ID. */
        startKeyDocId?: string;
        /** Parameter to specify whether or not the view in question should be updated prior to responding to the user.
         *
         *  * `true` - Return results after the view is updated.
         *  * `false` - Return results without updating the view.
         *  * `lazy` - Return the view results without waiting for an update, but update them immediately after the request.
         */
        update?: PostViewAsStreamConstants.Update | string;
        headers?: OutgoingHttpHeaders;
    }
    /** Constants for the `postViewAsStream` operation. */
    namespace PostViewAsStreamConstants {
        /** Parameter to specify whether or not the view in question should be updated prior to responding to the user. * `true` - Return results after the view is updated. * `false` - Return results without updating the view. * `lazy` - Return the view results without waiting for an update, but update them immediately after the request. */
        enum Update {
            TRUE = "true",
            FALSE = "false",
            LAZY = "lazy"
        }
    }
    /** Parameters for the `postViewQueries` operation. */
    interface PostViewQueriesParams {
        /** Path parameter to specify the database name. */
        db: string;
        /** Path parameter to specify the design document name. The design document name is the design document ID
         *  excluding the `_design/` prefix.
         */
        ddoc: string;
        /** Path parameter to specify the map reduce view function name. */
        view: string;
        /** An array of query objects with fields for the parameters of each individual view query to be executed. The
         *  field names and their meaning are the same as the query parameters of a regular view request.
         */
        queries: ViewQuery[];
        headers?: OutgoingHttpHeaders;
    }
    /** Parameters for the `postViewQueriesAsStream` operation. */
    interface PostViewQueriesAsStreamParams {
        /** Path parameter to specify the database name. */
        db: string;
        /** Path parameter to specify the design document name. The design document name is the design document ID
         *  excluding the `_design/` prefix.
         */
        ddoc: string;
        /** Path parameter to specify the map reduce view function name. */
        view: string;
        /** An array of query objects with fields for the parameters of each individual view query to be executed. The
         *  field names and their meaning are the same as the query parameters of a regular view request.
         */
        queries: ViewQuery[];
        headers?: OutgoingHttpHeaders;
    }
    /** Parameters for the `getPartitionInformation` operation. */
    interface GetPartitionInformationParams {
        /** Path parameter to specify the database name. */
        db: string;
        /** Path parameter to specify the database partition key. */
        partitionKey: string;
        headers?: OutgoingHttpHeaders;
    }
    /** Parameters for the `postPartitionAllDocs` operation. */
    interface PostPartitionAllDocsParams {
        /** Path parameter to specify the database name. */
        db: string;
        /** Path parameter to specify the database partition key. */
        partitionKey: string;
        /** Parameter to specify whether to include the encoding information in attachment stubs if the particular
         *  attachment is compressed.
         */
        attEncodingInfo?: boolean;
        /** Parameter to specify whether to include attachments bodies in a response. */
        attachments?: boolean;
        /** Parameter to specify whether to include a list of conflicted revisions in each returned document. Active
         *  only when `include_docs` is `true`.
         */
        conflicts?: boolean;
        /** Parameter to specify whether to return the documents in descending by key order. */
        descending?: boolean;
        /** Parameter to specify whether to include the full content of the documents in the response. */
        includeDocs?: boolean;
        /** Parameter to specify whether the specified end key should be included in the result. */
        inclusiveEnd?: boolean;
        /** Parameter to specify the number of returned documents to limit the result to. */
        limit?: number;
        /** Parameter to specify the number of records before starting to return the results. */
        skip?: number;
        /** Parameter to specify whether to include in the response an update_seq value indicating the sequence id of
         *  the database the view reflects.
         */
        updateSeq?: boolean;
        /** Schema for a document ID. */
        endKey?: string;
        /** Schema for a document ID. */
        key?: string;
        /** Schema for a list of document IDs. */
        keys?: string[];
        /** Schema for a document ID. */
        startKey?: string;
        headers?: OutgoingHttpHeaders;
    }
    /** Parameters for the `postPartitionAllDocsAsStream` operation. */
    interface PostPartitionAllDocsAsStreamParams {
        /** Path parameter to specify the database name. */
        db: string;
        /** Path parameter to specify the database partition key. */
        partitionKey: string;
        /** Parameter to specify whether to include the encoding information in attachment stubs if the particular
         *  attachment is compressed.
         */
        attEncodingInfo?: boolean;
        /** Parameter to specify whether to include attachments bodies in a response. */
        attachments?: boolean;
        /** Parameter to specify whether to include a list of conflicted revisions in each returned document. Active
         *  only when `include_docs` is `true`.
         */
        conflicts?: boolean;
        /** Parameter to specify whether to return the documents in descending by key order. */
        descending?: boolean;
        /** Parameter to specify whether to include the full content of the documents in the response. */
        includeDocs?: boolean;
        /** Parameter to specify whether the specified end key should be included in the result. */
        inclusiveEnd?: boolean;
        /** Parameter to specify the number of returned documents to limit the result to. */
        limit?: number;
        /** Parameter to specify the number of records before starting to return the results. */
        skip?: number;
        /** Parameter to specify whether to include in the response an update_seq value indicating the sequence id of
         *  the database the view reflects.
         */
        updateSeq?: boolean;
        /** Schema for a document ID. */
        endKey?: string;
        /** Schema for a document ID. */
        key?: string;
        /** Schema for a list of document IDs. */
        keys?: string[];
        /** Schema for a document ID. */
        startKey?: string;
        headers?: OutgoingHttpHeaders;
    }
    /** Parameters for the `postPartitionSearch` operation. */
    interface PostPartitionSearchParams {
        /** Path parameter to specify the database name. */
        db: string;
        /** Path parameter to specify the database partition key. */
        partitionKey: string;
        /** Path parameter to specify the design document name. The design document name is the design document ID
         *  excluding the `_design/` prefix.
         */
        ddoc: string;
        /** Path parameter to specify the index name. */
        index: string;
        /** The Lucene query to execute. */
        query: string;
        /** Opaque bookmark token used when paginating results. */
        bookmark?: string;
        /** Specifies which fields to highlight. If specified, the result object contains a highlights field with an
         *  entry for each specified field.
         */
        highlightFields?: string[];
        /** Number of fragments that are returned in highlights. If the search term occurs less often than the number of
         *  fragments that are specified, longer fragments are returned.
         */
        highlightNumber?: number;
        /** A string that is inserted after the highlighted word in the highlights output. */
        highlightPostTag?: string;
        /** A string that is inserted before the highlighted word in the highlights output. */
        highlightPreTag?: string;
        /** Number of characters in each fragment for highlights. */
        highlightSize?: number;
        /** Include the full content of the documents in the return. */
        includeDocs?: boolean;
        /** A JSON array of field names to include in search results. Any fields that are included must be indexed with
         *  the store:true option. The default is all fields.
         */
        includeFields?: string[];
        /** Limit the number of the returned documents to the specified number. */
        limit?: number;
        /** Specifies the sort order of the results. In a grouped search (when group_field is used), this parameter
         *  specifies the sort order within a group. The default sort order is relevance.  A JSON string of the form
         *  "fieldname&lt;type&gt;" or "-fieldname&lt;type&gt;" for descending order, where fieldname is the name of a
         *  string or number field, and type is either a number, a string, or a JSON array of strings. The type part is
         *  optional, and defaults to number. Some examples are "foo", "-foo", "bar&lt;string&gt;", "-foo&lt;number&gt;" and
         *  ["-foo&lt;number&gt;", "bar&lt;string&gt;"]. String fields that are used for sorting must not be analyzed
         *  fields. Fields that are used for sorting must be indexed by the same indexer that is used for the search query.
         */
        sort?: string[];
        /** Do not wait for the index to finish building to return results. */
        stale?: PostPartitionSearchConstants.Stale | string;
        headers?: OutgoingHttpHeaders;
    }
    /** Constants for the `postPartitionSearch` operation. */
    namespace PostPartitionSearchConstants {
        /** Do not wait for the index to finish building to return results. */
        enum Stale {
            OK = "ok"
        }
    }
    /** Parameters for the `postPartitionSearchAsStream` operation. */
    interface PostPartitionSearchAsStreamParams {
        /** Path parameter to specify the database name. */
        db: string;
        /** Path parameter to specify the database partition key. */
        partitionKey: string;
        /** Path parameter to specify the design document name. The design document name is the design document ID
         *  excluding the `_design/` prefix.
         */
        ddoc: string;
        /** Path parameter to specify the index name. */
        index: string;
        /** The Lucene query to execute. */
        query: string;
        /** Opaque bookmark token used when paginating results. */
        bookmark?: string;
        /** Specifies which fields to highlight. If specified, the result object contains a highlights field with an
         *  entry for each specified field.
         */
        highlightFields?: string[];
        /** Number of fragments that are returned in highlights. If the search term occurs less often than the number of
         *  fragments that are specified, longer fragments are returned.
         */
        highlightNumber?: number;
        /** A string that is inserted after the highlighted word in the highlights output. */
        highlightPostTag?: string;
        /** A string that is inserted before the highlighted word in the highlights output. */
        highlightPreTag?: string;
        /** Number of characters in each fragment for highlights. */
        highlightSize?: number;
        /** Include the full content of the documents in the return. */
        includeDocs?: boolean;
        /** A JSON array of field names to include in search results. Any fields that are included must be indexed with
         *  the store:true option. The default is all fields.
         */
        includeFields?: string[];
        /** Limit the number of the returned documents to the specified number. */
        limit?: number;
        /** Specifies the sort order of the results. In a grouped search (when group_field is used), this parameter
         *  specifies the sort order within a group. The default sort order is relevance.  A JSON string of the form
         *  "fieldname&lt;type&gt;" or "-fieldname&lt;type&gt;" for descending order, where fieldname is the name of a
         *  string or number field, and type is either a number, a string, or a JSON array of strings. The type part is
         *  optional, and defaults to number. Some examples are "foo", "-foo", "bar&lt;string&gt;", "-foo&lt;number&gt;" and
         *  ["-foo&lt;number&gt;", "bar&lt;string&gt;"]. String fields that are used for sorting must not be analyzed
         *  fields. Fields that are used for sorting must be indexed by the same indexer that is used for the search query.
         */
        sort?: string[];
        /** Do not wait for the index to finish building to return results. */
        stale?: PostPartitionSearchAsStreamConstants.Stale | string;
        headers?: OutgoingHttpHeaders;
    }
    /** Constants for the `postPartitionSearchAsStream` operation. */
    namespace PostPartitionSearchAsStreamConstants {
        /** Do not wait for the index to finish building to return results. */
        enum Stale {
            OK = "ok"
        }
    }
    /** Parameters for the `postPartitionView` operation. */
    interface PostPartitionViewParams {
        /** Path parameter to specify the database name. */
        db: string;
        /** Path parameter to specify the database partition key. */
        partitionKey: string;
        /** Path parameter to specify the design document name. The design document name is the design document ID
         *  excluding the `_design/` prefix.
         */
        ddoc: string;
        /** Path parameter to specify the map reduce view function name. */
        view: string;
        /** Parameter to specify whether to include the encoding information in attachment stubs if the particular
         *  attachment is compressed.
         */
        attEncodingInfo?: boolean;
        /** Parameter to specify whether to include attachments bodies in a response. */
        attachments?: boolean;
        /** Parameter to specify whether to include a list of conflicted revisions in each returned document. Active
         *  only when `include_docs` is `true`.
         */
        conflicts?: boolean;
        /** Parameter to specify whether to return the documents in descending by key order. */
        descending?: boolean;
        /** Parameter to specify whether to include the full content of the documents in the response. */
        includeDocs?: boolean;
        /** Parameter to specify whether the specified end key should be included in the result. */
        inclusiveEnd?: boolean;
        /** Parameter to specify the number of returned documents to limit the result to. */
        limit?: number;
        /** Parameter to specify the number of records before starting to return the results. */
        skip?: number;
        /** Parameter to specify whether to include in the response an update_seq value indicating the sequence id of
         *  the database the view reflects.
         */
        updateSeq?: boolean;
        /** Schema for any JSON type. */
        endKey?: any;
        /** Schema for a document ID. */
        endKeyDocId?: string;
        /** Parameter to specify whether to group reduced results by key. Valid only if a reduce function defined in the
         *  view. If the view emits key in JSON array format, then it is possible to reduce groups further based on the
         *  number of array elements with the `group_level` parameter.
         */
        group?: boolean;
        /** Parameter to specify a group level to be used. Only applicable if the view uses keys that are JSON arrays.
         *  Implies group is `true`. Group level groups the reduced results by the specified number of array elements. If
         *  unset, results are grouped by the entire array key, returning a reduced value for each complete key.
         */
        groupLevel?: number;
        /** Schema for any JSON type. */
        key?: any;
        /** Parameter to specify returning only documents that match any of the specified keys. A JSON array of keys
         *  that match the key type emitted by the view function.
         */
        keys?: any[];
        /** Parameter to specify whether to use the reduce function in a map-reduce view. Default is true when a reduce
         *  function is defined.
         */
        reduce?: boolean;
        /** Schema for any JSON type. */
        startKey?: any;
        /** Schema for a document ID. */
        startKeyDocId?: string;
        /** Parameter to specify whether or not the view in question should be updated prior to responding to the user.
         *
         *  * `true` - Return results after the view is updated.
         *  * `false` - Return results without updating the view.
         *  * `lazy` - Return the view results without waiting for an update, but update them immediately after the request.
         */
        update?: PostPartitionViewConstants.Update | string;
        headers?: OutgoingHttpHeaders;
    }
    /** Constants for the `postPartitionView` operation. */
    namespace PostPartitionViewConstants {
        /** Parameter to specify whether or not the view in question should be updated prior to responding to the user. * `true` - Return results after the view is updated. * `false` - Return results without updating the view. * `lazy` - Return the view results without waiting for an update, but update them immediately after the request. */
        enum Update {
            TRUE = "true",
            FALSE = "false",
            LAZY = "lazy"
        }
    }
    /** Parameters for the `postPartitionViewAsStream` operation. */
    interface PostPartitionViewAsStreamParams {
        /** Path parameter to specify the database name. */
        db: string;
        /** Path parameter to specify the database partition key. */
        partitionKey: string;
        /** Path parameter to specify the design document name. The design document name is the design document ID
         *  excluding the `_design/` prefix.
         */
        ddoc: string;
        /** Path parameter to specify the map reduce view function name. */
        view: string;
        /** Parameter to specify whether to include the encoding information in attachment stubs if the particular
         *  attachment is compressed.
         */
        attEncodingInfo?: boolean;
        /** Parameter to specify whether to include attachments bodies in a response. */
        attachments?: boolean;
        /** Parameter to specify whether to include a list of conflicted revisions in each returned document. Active
         *  only when `include_docs` is `true`.
         */
        conflicts?: boolean;
        /** Parameter to specify whether to return the documents in descending by key order. */
        descending?: boolean;
        /** Parameter to specify whether to include the full content of the documents in the response. */
        includeDocs?: boolean;
        /** Parameter to specify whether the specified end key should be included in the result. */
        inclusiveEnd?: boolean;
        /** Parameter to specify the number of returned documents to limit the result to. */
        limit?: number;
        /** Parameter to specify the number of records before starting to return the results. */
        skip?: number;
        /** Parameter to specify whether to include in the response an update_seq value indicating the sequence id of
         *  the database the view reflects.
         */
        updateSeq?: boolean;
        /** Schema for any JSON type. */
        endKey?: any;
        /** Schema for a document ID. */
        endKeyDocId?: string;
        /** Parameter to specify whether to group reduced results by key. Valid only if a reduce function defined in the
         *  view. If the view emits key in JSON array format, then it is possible to reduce groups further based on the
         *  number of array elements with the `group_level` parameter.
         */
        group?: boolean;
        /** Parameter to specify a group level to be used. Only applicable if the view uses keys that are JSON arrays.
         *  Implies group is `true`. Group level groups the reduced results by the specified number of array elements. If
         *  unset, results are grouped by the entire array key, returning a reduced value for each complete key.
         */
        groupLevel?: number;
        /** Schema for any JSON type. */
        key?: any;
        /** Parameter to specify returning only documents that match any of the specified keys. A JSON array of keys
         *  that match the key type emitted by the view function.
         */
        keys?: any[];
        /** Parameter to specify whether to use the reduce function in a map-reduce view. Default is true when a reduce
         *  function is defined.
         */
        reduce?: boolean;
        /** Schema for any JSON type. */
        startKey?: any;
        /** Schema for a document ID. */
        startKeyDocId?: string;
        /** Parameter to specify whether or not the view in question should be updated prior to responding to the user.
         *
         *  * `true` - Return results after the view is updated.
         *  * `false` - Return results without updating the view.
         *  * `lazy` - Return the view results without waiting for an update, but update them immediately after the request.
         */
        update?: PostPartitionViewAsStreamConstants.Update | string;
        headers?: OutgoingHttpHeaders;
    }
    /** Constants for the `postPartitionViewAsStream` operation. */
    namespace PostPartitionViewAsStreamConstants {
        /** Parameter to specify whether or not the view in question should be updated prior to responding to the user. * `true` - Return results after the view is updated. * `false` - Return results without updating the view. * `lazy` - Return the view results without waiting for an update, but update them immediately after the request. */
        enum Update {
            TRUE = "true",
            FALSE = "false",
            LAZY = "lazy"
        }
    }
    /** Parameters for the `postPartitionExplain` operation. */
    interface PostPartitionExplainParams {
        /** Path parameter to specify the database name. */
        db: string;
        /** Path parameter to specify the database partition key. */
        partitionKey: string;
        /** JSON object describing criteria used to select documents. The selector specifies fields in the document, and
         *  provides an expression to evaluate with the field content or other data.
         *
         *  The selector object must:
         *    * Be structured as valid JSON.
         *    * Contain a valid query expression.
         *
         *  Using a selector is significantly more efficient than using a JavaScript filter function, and is the recommended
         *  option if filtering on document attributes only.
         *
         *  Elementary selector syntax requires you to specify one or more fields, and the corresponding values required for
         *  those fields. You can create more complex selector expressions by combining operators.
         *
         *  Operators are identified by the use of a dollar sign `$` prefix in the name field.
         *
         *  There are two core types of operators in the selector syntax:
         *  * Combination operators: applied at the topmost level of selection. They are used to combine selectors. A
         *  combination operator takes a single argument. The argument is either another selector, or an array of selectors.
         *  * Condition operators: are specific to a field, and are used to evaluate the value stored in that field. For
         *  instance, the basic `$eq` operator matches when the specified field contains a value that is equal to the
         *  supplied argument. See [the Cloudant Docs](https://cloud.ibm.com/docs/Cloudant?topic=Cloudant-operators) for a
         *  list of all available combination and conditional operators.
         *  * Only equality operators such as `$eq`, `$gt`, `$gte`, `$lt`, and `$lte` (but not `$ne`) can be used as the
         *  basis of a query. You should include at least one of these in a selector.
         *
         *  For further reference see
         *  [selector syntax](https://cloud.ibm.com/docs/Cloudant?topic=Cloudant-selector-syntax).
         */
        selector: JsonObject;
        /** Opaque bookmark token used when paginating results. */
        bookmark?: string;
        /** A boolean value that indicates whether or not to include information about existing conflicts in the
         *  document.
         */
        conflicts?: boolean;
        /** Use this option to find information about the query that was run. This information includes total key
         *  lookups, total document lookups (when `include_docs=true` is used), and total quorum document lookups (when each
         *  document replica is fetched).
         */
        executionStats?: boolean;
        /** JSON array that uses the field syntax. Use this parameter to specify which fields of a document must be
         *  returned. If it is omitted or empty, the entire document is returned.
         */
        fields?: string[];
        /** Maximum number of results returned. The `type: text` indexes are limited to 200 results when queried. */
        limit?: number;
        /** Skip the first 'n' results, where 'n' is the value that is specified. */
        skip?: number;
        /** The sort field contains a list of pairs, each mapping a field name to a sort direction (asc or desc). The
         *  first field name and direction pair is the topmost level of sort. The second pair, if provided, is the next
         *  level of sort. The field can be any field, using dotted notation if desired for sub-document fields.
         *
         *  For example in JSON: `[{"fieldName1": "desc"}, {"fieldName2.subFieldName1": "desc"}]`
         *
         *  When sorting with multiple fields, ensure that there is an index already defined with all the sort fields in the
         *  same order and each object in the sort array has a single key or at least one of the sort fields is included in
         *  the selector. All sorting fields must use the same sort direction, either all ascending or all descending.
         */
        sort?: JsonObject[];
        /** Whether or not the view results should be returned from a "stable" set of shards. */
        stable?: boolean;
        /** Whether to update the index prior to returning the result. */
        update?: PostPartitionExplainConstants.Update | string;
        /** Use this option to identify a specific index for query to run against, rather than by using the IBM Cloudant
         *  Query algorithm to find the best index.
         */
        useIndex?: string[];
        headers?: OutgoingHttpHeaders;
    }
    /** Constants for the `postPartitionExplain` operation. */
    namespace PostPartitionExplainConstants {
        /** Schema for a mapping of field name to sort direction. */
        enum Sort {
            ASC = "asc",
            DESC = "desc"
        }
        /** Whether to update the index prior to returning the result. */
        enum Update {
            FALSE = "false",
            TRUE = "true",
            LAZY = "lazy"
        }
    }
    /** Parameters for the `postPartitionFind` operation. */
    interface PostPartitionFindParams {
        /** Path parameter to specify the database name. */
        db: string;
        /** Path parameter to specify the database partition key. */
        partitionKey: string;
        /** JSON object describing criteria used to select documents. The selector specifies fields in the document, and
         *  provides an expression to evaluate with the field content or other data.
         *
         *  The selector object must:
         *    * Be structured as valid JSON.
         *    * Contain a valid query expression.
         *
         *  Using a selector is significantly more efficient than using a JavaScript filter function, and is the recommended
         *  option if filtering on document attributes only.
         *
         *  Elementary selector syntax requires you to specify one or more fields, and the corresponding values required for
         *  those fields. You can create more complex selector expressions by combining operators.
         *
         *  Operators are identified by the use of a dollar sign `$` prefix in the name field.
         *
         *  There are two core types of operators in the selector syntax:
         *  * Combination operators: applied at the topmost level of selection. They are used to combine selectors. A
         *  combination operator takes a single argument. The argument is either another selector, or an array of selectors.
         *  * Condition operators: are specific to a field, and are used to evaluate the value stored in that field. For
         *  instance, the basic `$eq` operator matches when the specified field contains a value that is equal to the
         *  supplied argument. See [the Cloudant Docs](https://cloud.ibm.com/docs/Cloudant?topic=Cloudant-operators) for a
         *  list of all available combination and conditional operators.
         *  * Only equality operators such as `$eq`, `$gt`, `$gte`, `$lt`, and `$lte` (but not `$ne`) can be used as the
         *  basis of a query. You should include at least one of these in a selector.
         *
         *  For further reference see
         *  [selector syntax](https://cloud.ibm.com/docs/Cloudant?topic=Cloudant-selector-syntax).
         */
        selector: JsonObject;
        /** Opaque bookmark token used when paginating results. */
        bookmark?: string;
        /** A boolean value that indicates whether or not to include information about existing conflicts in the
         *  document.
         */
        conflicts?: boolean;
        /** Use this option to find information about the query that was run. This information includes total key
         *  lookups, total document lookups (when `include_docs=true` is used), and total quorum document lookups (when each
         *  document replica is fetched).
         */
        executionStats?: boolean;
        /** JSON array that uses the field syntax. Use this parameter to specify which fields of a document must be
         *  returned. If it is omitted or empty, the entire document is returned.
         */
        fields?: string[];
        /** Maximum number of results returned. The `type: text` indexes are limited to 200 results when queried. */
        limit?: number;
        /** Skip the first 'n' results, where 'n' is the value that is specified. */
        skip?: number;
        /** The sort field contains a list of pairs, each mapping a field name to a sort direction (asc or desc). The
         *  first field name and direction pair is the topmost level of sort. The second pair, if provided, is the next
         *  level of sort. The field can be any field, using dotted notation if desired for sub-document fields.
         *
         *  For example in JSON: `[{"fieldName1": "desc"}, {"fieldName2.subFieldName1": "desc"}]`
         *
         *  When sorting with multiple fields, ensure that there is an index already defined with all the sort fields in the
         *  same order and each object in the sort array has a single key or at least one of the sort fields is included in
         *  the selector. All sorting fields must use the same sort direction, either all ascending or all descending.
         */
        sort?: JsonObject[];
        /** Whether or not the view results should be returned from a "stable" set of shards. */
        stable?: boolean;
        /** Whether to update the index prior to returning the result. */
        update?: PostPartitionFindConstants.Update | string;
        /** Use this option to identify a specific index for query to run against, rather than by using the IBM Cloudant
         *  Query algorithm to find the best index.
         */
        useIndex?: string[];
        headers?: OutgoingHttpHeaders;
    }
    /** Constants for the `postPartitionFind` operation. */
    namespace PostPartitionFindConstants {
        /** Schema for a mapping of field name to sort direction. */
        enum Sort {
            ASC = "asc",
            DESC = "desc"
        }
        /** Whether to update the index prior to returning the result. */
        enum Update {
            FALSE = "false",
            TRUE = "true",
            LAZY = "lazy"
        }
    }
    /** Parameters for the `postPartitionFindAsStream` operation. */
    interface PostPartitionFindAsStreamParams {
        /** Path parameter to specify the database name. */
        db: string;
        /** Path parameter to specify the database partition key. */
        partitionKey: string;
        /** JSON object describing criteria used to select documents. The selector specifies fields in the document, and
         *  provides an expression to evaluate with the field content or other data.
         *
         *  The selector object must:
         *    * Be structured as valid JSON.
         *    * Contain a valid query expression.
         *
         *  Using a selector is significantly more efficient than using a JavaScript filter function, and is the recommended
         *  option if filtering on document attributes only.
         *
         *  Elementary selector syntax requires you to specify one or more fields, and the corresponding values required for
         *  those fields. You can create more complex selector expressions by combining operators.
         *
         *  Operators are identified by the use of a dollar sign `$` prefix in the name field.
         *
         *  There are two core types of operators in the selector syntax:
         *  * Combination operators: applied at the topmost level of selection. They are used to combine selectors. A
         *  combination operator takes a single argument. The argument is either another selector, or an array of selectors.
         *  * Condition operators: are specific to a field, and are used to evaluate the value stored in that field. For
         *  instance, the basic `$eq` operator matches when the specified field contains a value that is equal to the
         *  supplied argument. See [the Cloudant Docs](https://cloud.ibm.com/docs/Cloudant?topic=Cloudant-operators) for a
         *  list of all available combination and conditional operators.
         *  * Only equality operators such as `$eq`, `$gt`, `$gte`, `$lt`, and `$lte` (but not `$ne`) can be used as the
         *  basis of a query. You should include at least one of these in a selector.
         *
         *  For further reference see
         *  [selector syntax](https://cloud.ibm.com/docs/Cloudant?topic=Cloudant-selector-syntax).
         */
        selector: JsonObject;
        /** Opaque bookmark token used when paginating results. */
        bookmark?: string;
        /** A boolean value that indicates whether or not to include information about existing conflicts in the
         *  document.
         */
        conflicts?: boolean;
        /** Use this option to find information about the query that was run. This information includes total key
         *  lookups, total document lookups (when `include_docs=true` is used), and total quorum document lookups (when each
         *  document replica is fetched).
         */
        executionStats?: boolean;
        /** JSON array that uses the field syntax. Use this parameter to specify which fields of a document must be
         *  returned. If it is omitted or empty, the entire document is returned.
         */
        fields?: string[];
        /** Maximum number of results returned. The `type: text` indexes are limited to 200 results when queried. */
        limit?: number;
        /** Skip the first 'n' results, where 'n' is the value that is specified. */
        skip?: number;
        /** The sort field contains a list of pairs, each mapping a field name to a sort direction (asc or desc). The
         *  first field name and direction pair is the topmost level of sort. The second pair, if provided, is the next
         *  level of sort. The field can be any field, using dotted notation if desired for sub-document fields.
         *
         *  For example in JSON: `[{"fieldName1": "desc"}, {"fieldName2.subFieldName1": "desc"}]`
         *
         *  When sorting with multiple fields, ensure that there is an index already defined with all the sort fields in the
         *  same order and each object in the sort array has a single key or at least one of the sort fields is included in
         *  the selector. All sorting fields must use the same sort direction, either all ascending or all descending.
         */
        sort?: JsonObject[];
        /** Whether or not the view results should be returned from a "stable" set of shards. */
        stable?: boolean;
        /** Whether to update the index prior to returning the result. */
        update?: PostPartitionFindAsStreamConstants.Update | string;
        /** Use this option to identify a specific index for query to run against, rather than by using the IBM Cloudant
         *  Query algorithm to find the best index.
         */
        useIndex?: string[];
        headers?: OutgoingHttpHeaders;
    }
    /** Constants for the `postPartitionFindAsStream` operation. */
    namespace PostPartitionFindAsStreamConstants {
        /** Schema for a mapping of field name to sort direction. */
        enum Sort {
            ASC = "asc",
            DESC = "desc"
        }
        /** Whether to update the index prior to returning the result. */
        enum Update {
            FALSE = "false",
            TRUE = "true",
            LAZY = "lazy"
        }
    }
    /** Parameters for the `postExplain` operation. */
    interface PostExplainParams {
        /** Path parameter to specify the database name. */
        db: string;
        /** JSON object describing criteria used to select documents. The selector specifies fields in the document, and
         *  provides an expression to evaluate with the field content or other data.
         *
         *  The selector object must:
         *    * Be structured as valid JSON.
         *    * Contain a valid query expression.
         *
         *  Using a selector is significantly more efficient than using a JavaScript filter function, and is the recommended
         *  option if filtering on document attributes only.
         *
         *  Elementary selector syntax requires you to specify one or more fields, and the corresponding values required for
         *  those fields. You can create more complex selector expressions by combining operators.
         *
         *  Operators are identified by the use of a dollar sign `$` prefix in the name field.
         *
         *  There are two core types of operators in the selector syntax:
         *  * Combination operators: applied at the topmost level of selection. They are used to combine selectors. A
         *  combination operator takes a single argument. The argument is either another selector, or an array of selectors.
         *  * Condition operators: are specific to a field, and are used to evaluate the value stored in that field. For
         *  instance, the basic `$eq` operator matches when the specified field contains a value that is equal to the
         *  supplied argument. See [the Cloudant Docs](https://cloud.ibm.com/docs/Cloudant?topic=Cloudant-operators) for a
         *  list of all available combination and conditional operators.
         *  * Only equality operators such as `$eq`, `$gt`, `$gte`, `$lt`, and `$lte` (but not `$ne`) can be used as the
         *  basis of a query. You should include at least one of these in a selector.
         *
         *  For further reference see
         *  [selector syntax](https://cloud.ibm.com/docs/Cloudant?topic=Cloudant-selector-syntax).
         */
        selector: JsonObject;
        /** Opaque bookmark token used when paginating results. */
        bookmark?: string;
        /** A boolean value that indicates whether or not to include information about existing conflicts in the
         *  document.
         */
        conflicts?: boolean;
        /** Use this option to find information about the query that was run. This information includes total key
         *  lookups, total document lookups (when `include_docs=true` is used), and total quorum document lookups (when each
         *  document replica is fetched).
         */
        executionStats?: boolean;
        /** JSON array that uses the field syntax. Use this parameter to specify which fields of a document must be
         *  returned. If it is omitted or empty, the entire document is returned.
         */
        fields?: string[];
        /** Maximum number of results returned. The `type: text` indexes are limited to 200 results when queried. */
        limit?: number;
        /** Skip the first 'n' results, where 'n' is the value that is specified. */
        skip?: number;
        /** The sort field contains a list of pairs, each mapping a field name to a sort direction (asc or desc). The
         *  first field name and direction pair is the topmost level of sort. The second pair, if provided, is the next
         *  level of sort. The field can be any field, using dotted notation if desired for sub-document fields.
         *
         *  For example in JSON: `[{"fieldName1": "desc"}, {"fieldName2.subFieldName1": "desc"}]`
         *
         *  When sorting with multiple fields, ensure that there is an index already defined with all the sort fields in the
         *  same order and each object in the sort array has a single key or at least one of the sort fields is included in
         *  the selector. All sorting fields must use the same sort direction, either all ascending or all descending.
         */
        sort?: JsonObject[];
        /** Whether or not the view results should be returned from a "stable" set of shards. */
        stable?: boolean;
        /** Whether to update the index prior to returning the result. */
        update?: PostExplainConstants.Update | string;
        /** Use this option to identify a specific index for query to run against, rather than by using the IBM Cloudant
         *  Query algorithm to find the best index.
         */
        useIndex?: string[];
        /** The read quorum that is needed for the result. The value defaults to 1, in which case the document that was
         *  found in the index is returned. If set to a higher value, each document is read from at least that many replicas
         *  before it is returned in the results. The request will take more time than using only the document that is
         *  stored locally with the index.
         */
        r?: number;
        headers?: OutgoingHttpHeaders;
    }
    /** Constants for the `postExplain` operation. */
    namespace PostExplainConstants {
        /** Schema for a mapping of field name to sort direction. */
        enum Sort {
            ASC = "asc",
            DESC = "desc"
        }
        /** Whether to update the index prior to returning the result. */
        enum Update {
            FALSE = "false",
            TRUE = "true",
            LAZY = "lazy"
        }
    }
    /** Parameters for the `postFind` operation. */
    interface PostFindParams {
        /** Path parameter to specify the database name. */
        db: string;
        /** JSON object describing criteria used to select documents. The selector specifies fields in the document, and
         *  provides an expression to evaluate with the field content or other data.
         *
         *  The selector object must:
         *    * Be structured as valid JSON.
         *    * Contain a valid query expression.
         *
         *  Using a selector is significantly more efficient than using a JavaScript filter function, and is the recommended
         *  option if filtering on document attributes only.
         *
         *  Elementary selector syntax requires you to specify one or more fields, and the corresponding values required for
         *  those fields. You can create more complex selector expressions by combining operators.
         *
         *  Operators are identified by the use of a dollar sign `$` prefix in the name field.
         *
         *  There are two core types of operators in the selector syntax:
         *  * Combination operators: applied at the topmost level of selection. They are used to combine selectors. A
         *  combination operator takes a single argument. The argument is either another selector, or an array of selectors.
         *  * Condition operators: are specific to a field, and are used to evaluate the value stored in that field. For
         *  instance, the basic `$eq` operator matches when the specified field contains a value that is equal to the
         *  supplied argument. See [the Cloudant Docs](https://cloud.ibm.com/docs/Cloudant?topic=Cloudant-operators) for a
         *  list of all available combination and conditional operators.
         *  * Only equality operators such as `$eq`, `$gt`, `$gte`, `$lt`, and `$lte` (but not `$ne`) can be used as the
         *  basis of a query. You should include at least one of these in a selector.
         *
         *  For further reference see
         *  [selector syntax](https://cloud.ibm.com/docs/Cloudant?topic=Cloudant-selector-syntax).
         */
        selector: JsonObject;
        /** Opaque bookmark token used when paginating results. */
        bookmark?: string;
        /** A boolean value that indicates whether or not to include information about existing conflicts in the
         *  document.
         */
        conflicts?: boolean;
        /** Use this option to find information about the query that was run. This information includes total key
         *  lookups, total document lookups (when `include_docs=true` is used), and total quorum document lookups (when each
         *  document replica is fetched).
         */
        executionStats?: boolean;
        /** JSON array that uses the field syntax. Use this parameter to specify which fields of a document must be
         *  returned. If it is omitted or empty, the entire document is returned.
         */
        fields?: string[];
        /** Maximum number of results returned. The `type: text` indexes are limited to 200 results when queried. */
        limit?: number;
        /** Skip the first 'n' results, where 'n' is the value that is specified. */
        skip?: number;
        /** The sort field contains a list of pairs, each mapping a field name to a sort direction (asc or desc). The
         *  first field name and direction pair is the topmost level of sort. The second pair, if provided, is the next
         *  level of sort. The field can be any field, using dotted notation if desired for sub-document fields.
         *
         *  For example in JSON: `[{"fieldName1": "desc"}, {"fieldName2.subFieldName1": "desc"}]`
         *
         *  When sorting with multiple fields, ensure that there is an index already defined with all the sort fields in the
         *  same order and each object in the sort array has a single key or at least one of the sort fields is included in
         *  the selector. All sorting fields must use the same sort direction, either all ascending or all descending.
         */
        sort?: JsonObject[];
        /** Whether or not the view results should be returned from a "stable" set of shards. */
        stable?: boolean;
        /** Whether to update the index prior to returning the result. */
        update?: PostFindConstants.Update | string;
        /** Use this option to identify a specific index for query to run against, rather than by using the IBM Cloudant
         *  Query algorithm to find the best index.
         */
        useIndex?: string[];
        /** The read quorum that is needed for the result. The value defaults to 1, in which case the document that was
         *  found in the index is returned. If set to a higher value, each document is read from at least that many replicas
         *  before it is returned in the results. The request will take more time than using only the document that is
         *  stored locally with the index.
         */
        r?: number;
        headers?: OutgoingHttpHeaders;
    }
    /** Constants for the `postFind` operation. */
    namespace PostFindConstants {
        /** Schema for a mapping of field name to sort direction. */
        enum Sort {
            ASC = "asc",
            DESC = "desc"
        }
        /** Whether to update the index prior to returning the result. */
        enum Update {
            FALSE = "false",
            TRUE = "true",
            LAZY = "lazy"
        }
    }
    /** Parameters for the `postFindAsStream` operation. */
    interface PostFindAsStreamParams {
        /** Path parameter to specify the database name. */
        db: string;
        /** JSON object describing criteria used to select documents. The selector specifies fields in the document, and
         *  provides an expression to evaluate with the field content or other data.
         *
         *  The selector object must:
         *    * Be structured as valid JSON.
         *    * Contain a valid query expression.
         *
         *  Using a selector is significantly more efficient than using a JavaScript filter function, and is the recommended
         *  option if filtering on document attributes only.
         *
         *  Elementary selector syntax requires you to specify one or more fields, and the corresponding values required for
         *  those fields. You can create more complex selector expressions by combining operators.
         *
         *  Operators are identified by the use of a dollar sign `$` prefix in the name field.
         *
         *  There are two core types of operators in the selector syntax:
         *  * Combination operators: applied at the topmost level of selection. They are used to combine selectors. A
         *  combination operator takes a single argument. The argument is either another selector, or an array of selectors.
         *  * Condition operators: are specific to a field, and are used to evaluate the value stored in that field. For
         *  instance, the basic `$eq` operator matches when the specified field contains a value that is equal to the
         *  supplied argument. See [the Cloudant Docs](https://cloud.ibm.com/docs/Cloudant?topic=Cloudant-operators) for a
         *  list of all available combination and conditional operators.
         *  * Only equality operators such as `$eq`, `$gt`, `$gte`, `$lt`, and `$lte` (but not `$ne`) can be used as the
         *  basis of a query. You should include at least one of these in a selector.
         *
         *  For further reference see
         *  [selector syntax](https://cloud.ibm.com/docs/Cloudant?topic=Cloudant-selector-syntax).
         */
        selector: JsonObject;
        /** Opaque bookmark token used when paginating results. */
        bookmark?: string;
        /** A boolean value that indicates whether or not to include information about existing conflicts in the
         *  document.
         */
        conflicts?: boolean;
        /** Use this option to find information about the query that was run. This information includes total key
         *  lookups, total document lookups (when `include_docs=true` is used), and total quorum document lookups (when each
         *  document replica is fetched).
         */
        executionStats?: boolean;
        /** JSON array that uses the field syntax. Use this parameter to specify which fields of a document must be
         *  returned. If it is omitted or empty, the entire document is returned.
         */
        fields?: string[];
        /** Maximum number of results returned. The `type: text` indexes are limited to 200 results when queried. */
        limit?: number;
        /** Skip the first 'n' results, where 'n' is the value that is specified. */
        skip?: number;
        /** The sort field contains a list of pairs, each mapping a field name to a sort direction (asc or desc). The
         *  first field name and direction pair is the topmost level of sort. The second pair, if provided, is the next
         *  level of sort. The field can be any field, using dotted notation if desired for sub-document fields.
         *
         *  For example in JSON: `[{"fieldName1": "desc"}, {"fieldName2.subFieldName1": "desc"}]`
         *
         *  When sorting with multiple fields, ensure that there is an index already defined with all the sort fields in the
         *  same order and each object in the sort array has a single key or at least one of the sort fields is included in
         *  the selector. All sorting fields must use the same sort direction, either all ascending or all descending.
         */
        sort?: JsonObject[];
        /** Whether or not the view results should be returned from a "stable" set of shards. */
        stable?: boolean;
        /** Whether to update the index prior to returning the result. */
        update?: PostFindAsStreamConstants.Update | string;
        /** Use this option to identify a specific index for query to run against, rather than by using the IBM Cloudant
         *  Query algorithm to find the best index.
         */
        useIndex?: string[];
        /** The read quorum that is needed for the result. The value defaults to 1, in which case the document that was
         *  found in the index is returned. If set to a higher value, each document is read from at least that many replicas
         *  before it is returned in the results. The request will take more time than using only the document that is
         *  stored locally with the index.
         */
        r?: number;
        headers?: OutgoingHttpHeaders;
    }
    /** Constants for the `postFindAsStream` operation. */
    namespace PostFindAsStreamConstants {
        /** Schema for a mapping of field name to sort direction. */
        enum Sort {
            ASC = "asc",
            DESC = "desc"
        }
        /** Whether to update the index prior to returning the result. */
        enum Update {
            FALSE = "false",
            TRUE = "true",
            LAZY = "lazy"
        }
    }
    /** Parameters for the `getIndexesInformation` operation. */
    interface GetIndexesInformationParams {
        /** Path parameter to specify the database name. */
        db: string;
        headers?: OutgoingHttpHeaders;
    }
    /** Parameters for the `postIndex` operation. */
    interface PostIndexParams {
        /** Path parameter to specify the database name. */
        db: string;
        /** Schema for a `json` or `text` query index definition. Indexes of type `text` have additional configuration
         *  properties that do not apply to `json` indexes, these are:
         *  * `default_analyzer` - the default text analyzer to use * `default_field` - whether to index the text in all
         *  document fields and what analyzer to use for that purpose.
         */
        index: IndexDefinition;
        /** Specifies the design document name in which the index will be created. The design document name is the
         *  design document ID excluding the `_design/` prefix.
         */
        ddoc?: string;
        /** name. */
        name?: string;
        /** The default value is `true` for databases with `partitioned: true` and `false` otherwise. For databases with
         *  `partitioned: false` if this option is specified the value must be `false`.
         */
        partitioned?: boolean;
        /** Schema for the type of an index. */
        type?: PostIndexConstants.Type | string;
        headers?: OutgoingHttpHeaders;
    }
    /** Constants for the `postIndex` operation. */
    namespace PostIndexConstants {
        /** Schema for the type of an index. */
        enum Type {
            JSON = "json",
            SPECIAL = "special",
            TEXT = "text"
        }
    }
    /** Parameters for the `deleteIndex` operation. */
    interface DeleteIndexParams {
        /** Path parameter to specify the database name. */
        db: string;
        /** Path parameter to specify the design document name. The design document name is the design document ID
         *  excluding the `_design/` prefix.
         */
        ddoc: string;
        /** Path parameter to specify the index type. */
        type: DeleteIndexConstants.Type | string;
        /** Path parameter to specify the index name. */
        index: string;
        headers?: OutgoingHttpHeaders;
    }
    /** Constants for the `deleteIndex` operation. */
    namespace DeleteIndexConstants {
        /** Path parameter to specify the index type. */
        enum Type {
            JSON = "json",
            SPECIAL = "special",
            TEXT = "text"
        }
    }
    /** Parameters for the `postSearchAnalyze` operation. */
    interface PostSearchAnalyzeParams {
        /** The analyzer type that is being used at the tokenization. */
        analyzer: PostSearchAnalyzeConstants.Analyzer | string;
        /** The text to tokenize with the analyzer. */
        text: string;
        headers?: OutgoingHttpHeaders;
    }
    /** Constants for the `postSearchAnalyze` operation. */
    namespace PostSearchAnalyzeConstants {
        /** The analyzer type that is being used at the tokenization. */
        enum Analyzer {
            ARABIC = "arabic",
            ARMENIAN = "armenian",
            BASQUE = "basque",
            BRAZILIAN = "brazilian",
            BULGARIAN = "bulgarian",
            CATALAN = "catalan",
            CHINESE = "chinese",
            CJK = "cjk",
            CLASSIC = "classic",
            CZECH = "czech",
            DANISH = "danish",
            DUTCH = "dutch",
            EMAIL = "email",
            ENGLISH = "english",
            FINNISH = "finnish",
            FRENCH = "french",
            GALICIAN = "galician",
            GERMAN = "german",
            GREEK = "greek",
            HINDI = "hindi",
            HUNGARIAN = "hungarian",
            INDONESIAN = "indonesian",
            IRISH = "irish",
            ITALIAN = "italian",
            JAPANESE = "japanese",
            KEYWORD = "keyword",
            LATVIAN = "latvian",
            NORWEGIAN = "norwegian",
            PERSIAN = "persian",
            POLISH = "polish",
            PORTUGUESE = "portuguese",
            ROMANIAN = "romanian",
            RUSSIAN = "russian",
            SIMPLE = "simple",
            SPANISH = "spanish",
            STANDARD = "standard",
            SWEDISH = "swedish",
            THAI = "thai",
            TURKISH = "turkish",
            WHITESPACE = "whitespace"
        }
    }
    /** Parameters for the `postSearch` operation. */
    interface PostSearchParams {
        /** Path parameter to specify the database name. */
        db: string;
        /** Path parameter to specify the design document name. The design document name is the design document ID
         *  excluding the `_design/` prefix.
         */
        ddoc: string;
        /** Path parameter to specify the index name. */
        index: string;
        /** The Lucene query to execute. */
        query: string;
        /** Opaque bookmark token used when paginating results. */
        bookmark?: string;
        /** Specifies which fields to highlight. If specified, the result object contains a highlights field with an
         *  entry for each specified field.
         */
        highlightFields?: string[];
        /** Number of fragments that are returned in highlights. If the search term occurs less often than the number of
         *  fragments that are specified, longer fragments are returned.
         */
        highlightNumber?: number;
        /** A string that is inserted after the highlighted word in the highlights output. */
        highlightPostTag?: string;
        /** A string that is inserted before the highlighted word in the highlights output. */
        highlightPreTag?: string;
        /** Number of characters in each fragment for highlights. */
        highlightSize?: number;
        /** Include the full content of the documents in the return. */
        includeDocs?: boolean;
        /** A JSON array of field names to include in search results. Any fields that are included must be indexed with
         *  the store:true option. The default is all fields.
         */
        includeFields?: string[];
        /** Limit the number of the returned documents to the specified number. */
        limit?: number;
        /** Specifies the sort order of the results. In a grouped search (when group_field is used), this parameter
         *  specifies the sort order within a group. The default sort order is relevance.  A JSON string of the form
         *  "fieldname&lt;type&gt;" or "-fieldname&lt;type&gt;" for descending order, where fieldname is the name of a
         *  string or number field, and type is either a number, a string, or a JSON array of strings. The type part is
         *  optional, and defaults to number. Some examples are "foo", "-foo", "bar&lt;string&gt;", "-foo&lt;number&gt;" and
         *  ["-foo&lt;number&gt;", "bar&lt;string&gt;"]. String fields that are used for sorting must not be analyzed
         *  fields. Fields that are used for sorting must be indexed by the same indexer that is used for the search query.
         */
        sort?: string[];
        /** Do not wait for the index to finish building to return results. */
        stale?: PostSearchConstants.Stale | string;
        /** This field defines an array of names of string fields, for which counts are requested. The response contains
         *  counts for each unique value of this field name among the documents that match the search query. Faceting must
         *  be enabled for this parameter to function. This option is only available when making global queries.
         */
        counts?: string[];
        /** Restrict results to documents with a dimension equal to the specified label(s). The search matches only
         *  documents containing the value that was provided in the named field. It differs from using "fieldname:value" in
         *  the q parameter only in that the values are not analyzed. Faceting must be enabled for this parameter to
         *  function.
         */
        drilldown?: string[][];
        /** Field by which to group search matches. A string that contains the name of a string field. Fields containing
         *  other data such as numbers, objects, or arrays cannot be used. This option is only available when making global
         *  queries.
         */
        groupField?: string;
        /** Maximum group count. This field can be used only if group_field is specified. This option is only available
         *  when making global queries.
         */
        groupLimit?: number;
        /** This field defines the order of the groups in a search that uses group_field. The default sort order is
         *  relevance. This field can have the same values as the sort field, so single fields and arrays of fields are
         *  supported. This option is only available when making global queries.
         */
        groupSort?: string[];
        /** This field defines ranges for faceted, numeric search fields. The value is a JSON object where the fields
         *  names are faceted numeric search fields, and the values of the fields are JSON objects. The field names of the
         *  JSON objects are names for ranges. The values are strings that describe the range, for example "[0 TO 10]". This
         *  option is only available when making global queries.
         */
        ranges?: JsonObject;
        headers?: OutgoingHttpHeaders;
    }
    /** Constants for the `postSearch` operation. */
    namespace PostSearchConstants {
        /** Do not wait for the index to finish building to return results. */
        enum Stale {
            OK = "ok"
        }
    }
    /** Parameters for the `postSearchAsStream` operation. */
    interface PostSearchAsStreamParams {
        /** Path parameter to specify the database name. */
        db: string;
        /** Path parameter to specify the design document name. The design document name is the design document ID
         *  excluding the `_design/` prefix.
         */
        ddoc: string;
        /** Path parameter to specify the index name. */
        index: string;
        /** The Lucene query to execute. */
        query: string;
        /** Opaque bookmark token used when paginating results. */
        bookmark?: string;
        /** Specifies which fields to highlight. If specified, the result object contains a highlights field with an
         *  entry for each specified field.
         */
        highlightFields?: string[];
        /** Number of fragments that are returned in highlights. If the search term occurs less often than the number of
         *  fragments that are specified, longer fragments are returned.
         */
        highlightNumber?: number;
        /** A string that is inserted after the highlighted word in the highlights output. */
        highlightPostTag?: string;
        /** A string that is inserted before the highlighted word in the highlights output. */
        highlightPreTag?: string;
        /** Number of characters in each fragment for highlights. */
        highlightSize?: number;
        /** Include the full content of the documents in the return. */
        includeDocs?: boolean;
        /** A JSON array of field names to include in search results. Any fields that are included must be indexed with
         *  the store:true option. The default is all fields.
         */
        includeFields?: string[];
        /** Limit the number of the returned documents to the specified number. */
        limit?: number;
        /** Specifies the sort order of the results. In a grouped search (when group_field is used), this parameter
         *  specifies the sort order within a group. The default sort order is relevance.  A JSON string of the form
         *  "fieldname&lt;type&gt;" or "-fieldname&lt;type&gt;" for descending order, where fieldname is the name of a
         *  string or number field, and type is either a number, a string, or a JSON array of strings. The type part is
         *  optional, and defaults to number. Some examples are "foo", "-foo", "bar&lt;string&gt;", "-foo&lt;number&gt;" and
         *  ["-foo&lt;number&gt;", "bar&lt;string&gt;"]. String fields that are used for sorting must not be analyzed
         *  fields. Fields that are used for sorting must be indexed by the same indexer that is used for the search query.
         */
        sort?: string[];
        /** Do not wait for the index to finish building to return results. */
        stale?: PostSearchAsStreamConstants.Stale | string;
        /** This field defines an array of names of string fields, for which counts are requested. The response contains
         *  counts for each unique value of this field name among the documents that match the search query. Faceting must
         *  be enabled for this parameter to function. This option is only available when making global queries.
         */
        counts?: string[];
        /** Restrict results to documents with a dimension equal to the specified label(s). The search matches only
         *  documents containing the value that was provided in the named field. It differs from using "fieldname:value" in
         *  the q parameter only in that the values are not analyzed. Faceting must be enabled for this parameter to
         *  function.
         */
        drilldown?: string[][];
        /** Field by which to group search matches. A string that contains the name of a string field. Fields containing
         *  other data such as numbers, objects, or arrays cannot be used. This option is only available when making global
         *  queries.
         */
        groupField?: string;
        /** Maximum group count. This field can be used only if group_field is specified. This option is only available
         *  when making global queries.
         */
        groupLimit?: number;
        /** This field defines the order of the groups in a search that uses group_field. The default sort order is
         *  relevance. This field can have the same values as the sort field, so single fields and arrays of fields are
         *  supported. This option is only available when making global queries.
         */
        groupSort?: string[];
        /** This field defines ranges for faceted, numeric search fields. The value is a JSON object where the fields
         *  names are faceted numeric search fields, and the values of the fields are JSON objects. The field names of the
         *  JSON objects are names for ranges. The values are strings that describe the range, for example "[0 TO 10]". This
         *  option is only available when making global queries.
         */
        ranges?: JsonObject;
        headers?: OutgoingHttpHeaders;
    }
    /** Constants for the `postSearchAsStream` operation. */
    namespace PostSearchAsStreamConstants {
        /** Do not wait for the index to finish building to return results. */
        enum Stale {
            OK = "ok"
        }
    }
    /** Parameters for the `getSearchInfo` operation. */
    interface GetSearchInfoParams {
        /** Path parameter to specify the database name. */
        db: string;
        /** Path parameter to specify the design document name. The design document name is the design document ID
         *  excluding the `_design/` prefix.
         */
        ddoc: string;
        /** Path parameter to specify the index name. */
        index: string;
        headers?: OutgoingHttpHeaders;
    }
    /** Parameters for the `headReplicationDocument` operation. */
    interface HeadReplicationDocumentParams {
        /** Path parameter to specify the document ID. */
        docId: string;
        /** Header parameter to specify a double quoted document revision token for cache control. */
        ifNoneMatch?: string;
        headers?: OutgoingHttpHeaders;
    }
    /** Parameters for the `headSchedulerDocument` operation. */
    interface HeadSchedulerDocumentParams {
        /** Path parameter to specify the document ID. */
        docId: string;
        headers?: OutgoingHttpHeaders;
    }
    /** Parameters for the `headSchedulerJob` operation. */
    interface HeadSchedulerJobParams {
        /** Path parameter to specify the replication job id. */
        jobId: string;
        headers?: OutgoingHttpHeaders;
    }
    /** Parameters for the `deleteReplicationDocument` operation. */
    interface DeleteReplicationDocumentParams {
        /** Path parameter to specify the document ID. */
        docId: string;
        /** Header parameter to specify the document revision. Alternative to rev query parameter. */
        ifMatch?: string;
        /** Query parameter to specify whether to store in batch mode. The server will respond with a HTTP 202 Accepted
         *  response code immediately.
         */
        batch?: DeleteReplicationDocumentConstants.Batch | string;
        /** Query parameter to specify a document revision. */
        rev?: string;
        headers?: OutgoingHttpHeaders;
    }
    /** Constants for the `deleteReplicationDocument` operation. */
    namespace DeleteReplicationDocumentConstants {
        /** Query parameter to specify whether to store in batch mode. The server will respond with a HTTP 202 Accepted response code immediately. */
        enum Batch {
            OK = "ok"
        }
    }
    /** Parameters for the `getReplicationDocument` operation. */
    interface GetReplicationDocumentParams {
        /** Path parameter to specify the document ID. */
        docId: string;
        /** Header parameter to specify a double quoted document revision token for cache control. */
        ifNoneMatch?: string;
        /** Query parameter to specify whether to include attachments bodies in a response. */
        attachments?: boolean;
        /** Query parameter to specify whether to include the encoding information in attachment stubs if the particular
         *  attachment is compressed.
         */
        attEncodingInfo?: boolean;
        /** Query parameter to specify whether to include a list of conflicted revisions in each returned document.
         *  Active only when `include_docs` is `true`.
         */
        conflicts?: boolean;
        /** Query parameter to specify whether to include a list of deleted conflicted revisions in the
         *  `_deleted_conflicts` property of the returned document.
         */
        deletedConflicts?: boolean;
        /** Query parameter to specify whether to force retrieving latest leaf revision, no matter what rev was
         *  requested.
         */
        latest?: boolean;
        /** Query parameter to specify whether to include the last update sequence for the document. */
        localSeq?: boolean;
        /** Query parameter to specify whether to include document meta information. Acts the same as specifying all of
         *  the conflicts, deleted_conflicts and open_revs query parameters.
         */
        meta?: boolean;
        /** Query parameter to specify a document revision. */
        rev?: string;
        /** Query parameter to specify whether to include a list of all known document revisions. */
        revs?: boolean;
        /** Query parameter to specify whether to includes detailed information for all known document revisions. */
        revsInfo?: boolean;
        headers?: OutgoingHttpHeaders;
    }
    /** Parameters for the `putReplicationDocument` operation. */
    interface PutReplicationDocumentParams {
        /** Path parameter to specify the document ID. */
        docId: string;
        /** HTTP request body for replication operations. */
        replicationDocument: ReplicationDocument;
        /** Header parameter to specify the document revision. Alternative to rev query parameter. */
        ifMatch?: string;
        /** Query parameter to specify whether to store in batch mode. The server will respond with a HTTP 202 Accepted
         *  response code immediately.
         */
        batch?: PutReplicationDocumentConstants.Batch | string;
        /** Query parameter to specify whether to prevent insertion of conflicting document revisions. If false, a
         *  well-formed _rev must be included in the document. False is used by the replicator to insert documents into the
         *  target database even if that leads to the creation of conflicts.
         */
        newEdits?: boolean;
        /** Query parameter to specify a document revision. */
        rev?: string;
        headers?: OutgoingHttpHeaders;
    }
    /** Constants for the `putReplicationDocument` operation. */
    namespace PutReplicationDocumentConstants {
        /** Query parameter to specify whether to store in batch mode. The server will respond with a HTTP 202 Accepted response code immediately. */
        enum Batch {
            OK = "ok"
        }
    }
    /** Parameters for the `getSchedulerDocs` operation. */
    interface GetSchedulerDocsParams {
        /** Query parameter to specify the number of returned documents to limit the result to. */
        limit?: number;
        /** Query parameter to specify the number of records before starting to return the results. */
        skip?: number;
        /** Query parameter to include only replication documents in the specified states. String must be a
         *  comma-delimited string.
         */
        states?: GetSchedulerDocsConstants.States[] | string[];
        headers?: OutgoingHttpHeaders;
    }
    /** Constants for the `getSchedulerDocs` operation. */
    namespace GetSchedulerDocsConstants {
        /** Query parameter to include only replication documents in the specified states. String must be a comma-delimited string. */
        enum States {
            INITIALIZING = "initializing",
            ERROR = "error",
            PENDING = "pending",
            RUNNING = "running",
            CRASHING = "crashing",
            COMPLETED = "completed",
            FAILED = "failed"
        }
    }
    /** Parameters for the `getSchedulerDocument` operation. */
    interface GetSchedulerDocumentParams {
        /** Path parameter to specify the document ID. */
        docId: string;
        headers?: OutgoingHttpHeaders;
    }
    /** Parameters for the `getSchedulerJobs` operation. */
    interface GetSchedulerJobsParams {
        /** Query parameter to specify the number of returned jobs to limit the result to. */
        limit?: number;
        /** Query parameter to specify the number of records before starting to return the results. */
        skip?: number;
        headers?: OutgoingHttpHeaders;
    }
    /** Parameters for the `getSchedulerJob` operation. */
    interface GetSchedulerJobParams {
        /** Path parameter to specify the replication job id. */
        jobId: string;
        headers?: OutgoingHttpHeaders;
    }
    /** Parameters for the `getSessionInformation` operation. */
    interface GetSessionInformationParams {
        headers?: OutgoingHttpHeaders;
    }
    /** Parameters for the `getSecurity` operation. */
    interface GetSecurityParams {
        /** Path parameter to specify the database name. */
        db: string;
        headers?: OutgoingHttpHeaders;
    }
    /** Parameters for the `putSecurity` operation. */
    interface PutSecurityParams {
        /** Path parameter to specify the database name. */
        db: string;
        /** Schema for names and roles to map to a database permission. */
        admins?: SecurityObject;
        /** Schema for names and roles to map to a database permission. */
        members?: SecurityObject;
        /** Database permissions for Cloudant users and/or API keys. */
        cloudant?: JsonObject;
        /** Manage permissions using the `_users` database only. */
        couchdbAuthOnly?: boolean;
        headers?: OutgoingHttpHeaders;
    }
    /** Constants for the `putSecurity` operation. */
    namespace PutSecurityConstants {
        /** Database permissions for Cloudant users and/or API keys. */
        enum Cloudant {
            READER = "_reader",
            WRITER = "_writer",
            ADMIN = "_admin",
            REPLICATOR = "_replicator",
            DB_UPDATES = "_db_updates",
            DESIGN = "_design",
            SHARDS = "_shards",
            SECURITY = "_security"
        }
    }
    /** Parameters for the `postApiKeys` operation. */
    interface PostApiKeysParams {
        headers?: OutgoingHttpHeaders;
    }
    /** Parameters for the `putCloudantSecurityConfiguration` operation. */
    interface PutCloudantSecurityConfigurationParams {
        /** Path parameter to specify the database name. */
        db: string;
        /** Database permissions for Cloudant users and/or API keys. */
        cloudant: JsonObject;
        /** Schema for names and roles to map to a database permission. */
        admins?: SecurityObject;
        /** Schema for names and roles to map to a database permission. */
        members?: SecurityObject;
        /** Manage permissions using the `_users` database only. */
        couchdbAuthOnly?: boolean;
        headers?: OutgoingHttpHeaders;
    }
    /** Constants for the `putCloudantSecurityConfiguration` operation. */
    namespace PutCloudantSecurityConfigurationConstants {
        /** Database permissions for Cloudant users and/or API keys. */
        enum Cloudant {
            READER = "_reader",
            WRITER = "_writer",
            ADMIN = "_admin",
            REPLICATOR = "_replicator",
            DB_UPDATES = "_db_updates",
            DESIGN = "_design",
            SHARDS = "_shards",
            SECURITY = "_security"
        }
    }
    /** Parameters for the `getCorsInformation` operation. */
    interface GetCorsInformationParams {
        headers?: OutgoingHttpHeaders;
    }
    /** Parameters for the `putCorsConfiguration` operation. */
    interface PutCorsConfigurationParams {
        /** An array of strings that contain allowed origin domains. You have to specify the full URL including the
         *  protocol. It is recommended that only the HTTPS protocol is used. Subdomains count as separate domains, so you
         *  have to specify all subdomains used.
         */
        origins: string[];
        /** Boolean value to allow authentication credentials. If set to true, browser requests must be done by using
         *  withCredentials = true.
         */
        allowCredentials?: boolean;
        /** Boolean value to turn CORS on and off. */
        enableCors?: boolean;
        headers?: OutgoingHttpHeaders;
    }
    /** Parameters for the `headAttachment` operation. */
    interface HeadAttachmentParams {
        /** Path parameter to specify the database name. */
        db: string;
        /** Path parameter to specify the document ID. */
        docId: string;
        /** Path parameter to specify the attachment name. */
        attachmentName: string;
        /** Header parameter to specify the document revision. Alternative to rev query parameter. */
        ifMatch?: string;
        /** Header parameter to specify a double quoted document revision token for cache control. */
        ifNoneMatch?: string;
        /** Query parameter to specify a document revision. */
        rev?: string;
        headers?: OutgoingHttpHeaders;
    }
    /** Parameters for the `deleteAttachment` operation. */
    interface DeleteAttachmentParams {
        /** Path parameter to specify the database name. */
        db: string;
        /** Path parameter to specify the document ID. */
        docId: string;
        /** Path parameter to specify the attachment name. */
        attachmentName: string;
        /** Header parameter to specify the document revision. Alternative to rev query parameter. */
        ifMatch?: string;
        /** Query parameter to specify a document revision. */
        rev?: string;
        /** Query parameter to specify whether to store in batch mode. The server will respond with a HTTP 202 Accepted
         *  response code immediately.
         */
        batch?: DeleteAttachmentConstants.Batch | string;
        headers?: OutgoingHttpHeaders;
    }
    /** Constants for the `deleteAttachment` operation. */
    namespace DeleteAttachmentConstants {
        /** Query parameter to specify whether to store in batch mode. The server will respond with a HTTP 202 Accepted response code immediately. */
        enum Batch {
            OK = "ok"
        }
    }
    /** Parameters for the `getAttachment` operation. */
    interface GetAttachmentParams {
        /** Path parameter to specify the database name. */
        db: string;
        /** Path parameter to specify the document ID. */
        docId: string;
        /** Path parameter to specify the attachment name. */
        attachmentName: string;
        /** The type of the response:  or *_/_*. */
        accept?: string;
        /** Header parameter to specify the document revision. Alternative to rev query parameter. */
        ifMatch?: string;
        /** Header parameter to specify a double quoted document revision token for cache control. */
        ifNoneMatch?: string;
        /** Header parameter to specify the byte range for a request. This allows the implementation of resumable
         *  downloads and skippable streams. This is available for all attachments inside CouchDB.
         */
        range?: string;
        /** Query parameter to specify a document revision. */
        rev?: string;
        headers?: OutgoingHttpHeaders;
    }
    /** Parameters for the `putAttachment` operation. */
    interface PutAttachmentParams {
        /** Path parameter to specify the database name. */
        db: string;
        /** Path parameter to specify the document ID. */
        docId: string;
        /** Path parameter to specify the attachment name. */
        attachmentName: string;
        /** HTTP request body for attachment operations. */
        attachment: NodeJS.ReadableStream | Buffer;
        /** Content-Type of the attachment. */
        contentType: string;
        /** Header parameter to specify the document revision. Alternative to rev query parameter. */
        ifMatch?: string;
        /** Query parameter to specify a document revision. */
        rev?: string;
        headers?: OutgoingHttpHeaders;
    }
    /** Parameters for the `headLocalDocument` operation. */
    interface HeadLocalDocumentParams {
        /** Path parameter to specify the database name. */
        db: string;
        /** Path parameter to specify the document ID. */
        docId: string;
        /** Header parameter to specify a double quoted document revision token for cache control. */
        ifNoneMatch?: string;
        headers?: OutgoingHttpHeaders;
    }
    /** Parameters for the `deleteLocalDocument` operation. */
    interface DeleteLocalDocumentParams {
        /** Path parameter to specify the database name. */
        db: string;
        /** Path parameter to specify the document ID. */
        docId: string;
        /** Query parameter to specify whether to store in batch mode. The server will respond with a HTTP 202 Accepted
         *  response code immediately.
         */
        batch?: DeleteLocalDocumentConstants.Batch | string;
        headers?: OutgoingHttpHeaders;
    }
    /** Constants for the `deleteLocalDocument` operation. */
    namespace DeleteLocalDocumentConstants {
        /** Query parameter to specify whether to store in batch mode. The server will respond with a HTTP 202 Accepted response code immediately. */
        enum Batch {
            OK = "ok"
        }
    }
    /** Parameters for the `getLocalDocument` operation. */
    interface GetLocalDocumentParams {
        /** Path parameter to specify the database name. */
        db: string;
        /** Path parameter to specify the document ID. */
        docId: string;
        /** The type of the response: application/json, multipart/mixed, multipart/related, or application/octet-stream. */
        accept?: GetLocalDocumentConstants.Accept | string;
        /** Header parameter to specify a double quoted document revision token for cache control. */
        ifNoneMatch?: string;
        /** Query parameter to specify whether to include attachments bodies in a response. */
        attachments?: boolean;
        /** Query parameter to specify whether to include the encoding information in attachment stubs if the particular
         *  attachment is compressed.
         */
        attEncodingInfo?: boolean;
        /** Query parameter to specify whether to include the last update sequence for the document. */
        localSeq?: boolean;
        headers?: OutgoingHttpHeaders;
    }
    /** Constants for the `getLocalDocument` operation. */
    namespace GetLocalDocumentConstants {
        /** The type of the response: application/json, multipart/mixed, multipart/related, or application/octet-stream. */
        enum Accept {
            APPLICATION_JSON = "application/json",
            MULTIPART_MIXED = "multipart/mixed",
            MULTIPART_RELATED = "multipart/related",
            APPLICATION_OCTET_STREAM = "application/octet-stream"
        }
    }
    /** Parameters for the `putLocalDocument` operation. */
    interface PutLocalDocumentParams {
        /** Path parameter to specify the database name. */
        db: string;
        /** Path parameter to specify the document ID. */
        docId: string;
        /** HTTP request body for Document operations. */
        document: Document | NodeJS.ReadableStream | Buffer;
        /** The type of the input. */
        contentType?: PutLocalDocumentConstants.ContentType | string;
        /** Query parameter to specify whether to store in batch mode. The server will respond with a HTTP 202 Accepted
         *  response code immediately.
         */
        batch?: PutLocalDocumentConstants.Batch | string;
        headers?: OutgoingHttpHeaders;
    }
    /** Constants for the `putLocalDocument` operation. */
    namespace PutLocalDocumentConstants {
        /** The type of the input. */
        enum ContentType {
            APPLICATION_JSON = "application/json",
            MULTIPART_MIXED = "multipart/mixed",
            MULTIPART_RELATED = "multipart/related",
            APPLICATION_OCTET_STREAM = "application/octet-stream"
        }
        /** Query parameter to specify whether to store in batch mode. The server will respond with a HTTP 202 Accepted response code immediately. */
        enum Batch {
            OK = "ok"
        }
    }
    /** Parameters for the `postRevsDiff` operation. */
    interface PostRevsDiffParams {
        /** Path parameter to specify the database name. */
        db: string;
        /** HTTP request body for operations with Document revisions. */
        documentRevisions: JsonObject;
        headers?: OutgoingHttpHeaders;
    }
    /** Parameters for the `getShardsInformation` operation. */
    interface GetShardsInformationParams {
        /** Path parameter to specify the database name. */
        db: string;
        headers?: OutgoingHttpHeaders;
    }
    /** Parameters for the `getDocumentShardsInfo` operation. */
    interface GetDocumentShardsInfoParams {
        /** Path parameter to specify the database name. */
        db: string;
        /** Path parameter to specify the document ID. */
        docId: string;
        headers?: OutgoingHttpHeaders;
    }
    /** Parameters for the `headUpInformation` operation. */
    interface HeadUpInformationParams {
        headers?: OutgoingHttpHeaders;
    }
    /** Parameters for the `getActiveTasks` operation. */
    interface GetActiveTasksParams {
        headers?: OutgoingHttpHeaders;
    }
    /** Parameters for the `getUpInformation` operation. */
    interface GetUpInformationParams {
        headers?: OutgoingHttpHeaders;
    }
    /** Parameters for the `getActivityTrackerEvents` operation. */
    interface GetActivityTrackerEventsParams {
        headers?: OutgoingHttpHeaders;
    }
    /** Parameters for the `postActivityTrackerEvents` operation. */
    interface PostActivityTrackerEventsParams {
        /** An array of event types that are being sent to IBM Cloud Activity Tracker for the IBM Cloudant instance.
         *  "management" is a required element of this array.
         */
        types: PostActivityTrackerEventsConstants.Types | string[];
        headers?: OutgoingHttpHeaders;
    }
    /** Constants for the `postActivityTrackerEvents` operation. */
    namespace PostActivityTrackerEventsConstants {
        /** Types */
        enum Types {
            MANAGEMENT = "management",
            DATA = "data"
        }
    }
    /** Parameters for the `getCurrentThroughputInformation` operation. */
    interface GetCurrentThroughputInformationParams {
        headers?: OutgoingHttpHeaders;
    }
    /*************************
     * model interfaces
     ************************/
    /** Schema for information about a running task. */
    interface ActiveTask {
        /** The total count of attempted doc revisions fetched with `_bulk_get`. Available for `replication` type tasks. */
        bulk_get_attempts?: number;
        /** The total count of successful docs fetched with `_bulk_get`. Available for `replication` type tasks. */
        bulk_get_docs?: number;
        /** Processed changes. Available for `database_compaction`, `indexer`, `search_indexer`, `view_compaction` type
         *  tasks.
         */
        changes_done?: number;
        /** The count of changes not yet replicated. Available for `replication` type tasks. */
        changes_pending?: number;
        /** Specifies the checkpoint interval in ms. Available for `replication` type tasks. */
        checkpoint_interval?: number;
        /** The source sequence id which was last successfully replicated. Available for `replication` type tasks. */
        checkpointed_source_seq?: string;
        /** The replication configured to be continuous. Available for `replication` type tasks. */
        continuous?: boolean;
        /** Source database. */
        database: string;
        /** The design document that belongs to this task. Available for `indexer`, `search_indexer`, `view_compaction`
         *  type tasks.
         */
        design_document?: string;
        /** Replication document ID. Available for `replication` type tasks. */
        doc_id?: string;
        /** Number of document write failures. Available for `replication` type tasks. */
        doc_write_failures?: number;
        /** Number of documents read. Available for `replication` type tasks. */
        docs_read?: number;
        /** Number of documents written to target. Available for `replication` type tasks. */
        docs_written?: number;
        /** The search index that belongs to this task. Available for `search_indexer` type tasks. */
        index?: string;
        /** Indexer process ID. Available for `indexer` type tasks. */
        indexer_pid?: string;
        /** The count of docs which have been read from the source. Available for `replication` type tasks. */
        missing_revisions_found?: number;
        /** Cluster node where the task is running. */
        node: string;
        /** The phase the active task is in. `docid_sort`, `docid_copy`, `document_copy` phases are available for
         *  `database_compaction`, while `ids` and `view` phases are available for `view_compaction` type tasks.
         */
        phase?: ActiveTask.Constants.Phase | string;
        /** Process ID. */
        pid: string;
        /** Process status. */
        process_status?: ActiveTask.Constants.ProcessStatus | string;
        /** Current percentage progress. Available for `database_compaction`, `indexer`, `search_indexer`,
         *  `view_compaction` type tasks.
         */
        progress?: number;
        /** Replication ID. Available for `replication` type tasks. */
        replication_id?: string;
        /** Indicates whether a compaction retry is currently running on the database. Available for
         *  `database_compaction` type tasks.
         */
        retry?: boolean;
        /** The count of revisions which have been checked since this replication began. Available for `replication`
         *  type tasks.
         */
        revisions_checked?: number;
        /** Replication source. Available for `replication` type tasks. */
        source?: string;
        /** The last sequence number obtained from the source database changes feed. Available for `replication` type
         *  tasks.
         */
        source_seq?: string;
        /** Schema for a Unix epoch timestamp. */
        started_on: number;
        /** Replication target. Available for `replication` type tasks. */
        target?: string;
        /** The last sequence number processed by the replicator. Available for `replication` type tasks. */
        through_seq?: string;
        /** Total changes to process. Available for `database_compaction`, `indexer`, `search_indexer`,
         *  `view_compaction` type tasks.
         */
        total_changes?: number;
        /** Operation type. */
        type: ActiveTask.Constants.Type | string;
        /** Schema for a Unix epoch timestamp. */
        updated_on: number;
        /** Name of user running replication or owning the indexer. Available for `indexer`, `replication` type tasks. */
        user?: string;
        /** Number of view indexes. Available for `view_compaction` type tasks. */
        view?: number;
    }
    namespace ActiveTask {
        namespace Constants {
            /** The phase the active task is in. `docid_sort`, `docid_copy`, `document_copy` phases are available for `database_compaction`, while `ids` and `view` phases are available for `view_compaction` type tasks. */
            enum Phase {
                DOCID_SORT = "docid_sort",
                DOCID_COPY = "docid_copy",
                DOCUMENT_COPY = "document_copy",
                IDS = "ids",
                VIEW = "view"
            }
            /** Process status. */
            enum ProcessStatus {
                EXITING = "exiting",
                GARBAGE_COLLECTING = "garbage_collecting",
                RUNNABLE = "runnable",
                RUNNING = "running",
                SUSPENDED = "suspended",
                WAITING = "waiting"
            }
            /** Operation type. */
            enum Type {
                DATABASE_COMPACTION = "database_compaction",
                INDEXER = "indexer",
                REPLICATION = "replication",
                SEARCH_INDEXER = "search_indexer",
                VIEW_COMPACTION = "view_compaction"
            }
        }
    }
    /** Schema for Activity Tracker events. */
    interface ActivityTrackerEvents {
        /** An array of event types that are being sent to IBM Cloud Activity Tracker for the IBM Cloudant instance.
         *  "management" is a required element of this array.
         */
        types: ActivityTrackerEvents.Constants.Types | string[];
    }
    namespace ActivityTrackerEvents {
        namespace Constants {
            /** An array of event types that are being sent to IBM Cloud Activity Tracker for the IBM Cloudant instance. "management" is a required element of this array. */
            enum Types {
                MANAGEMENT = "management",
                DATA = "data"
            }
        }
    }
    /** Schema for the result of an all documents queries operation. */
    interface AllDocsQueriesResult {
        /** An array of result objects - one for each query. Each result object contains the same fields as the response
         *  to a regular `/_all_docs` request.
         */
        results: AllDocsResult[];
    }
    /** Schema for an all documents query operation. */
    interface AllDocsQuery {
        /** Parameter to specify whether to include the encoding information in attachment stubs if the particular
         *  attachment is compressed.
         */
        att_encoding_info?: boolean;
        /** Parameter to specify whether to include attachments bodies in a response. */
        attachments?: boolean;
        /** Parameter to specify whether to include a list of conflicted revisions in each returned document. Active
         *  only when `include_docs` is `true`.
         */
        conflicts?: boolean;
        /** Parameter to specify whether to return the documents in descending by key order. */
        descending?: boolean;
        /** Parameter to specify whether to include the full content of the documents in the response. */
        include_docs?: boolean;
        /** Parameter to specify whether the specified end key should be included in the result. */
        inclusive_end?: boolean;
        /** Parameter to specify the number of returned documents to limit the result to. */
        limit?: number;
        /** Parameter to specify the number of records before starting to return the results. */
        skip?: number;
        /** Parameter to specify whether to include in the response an update_seq value indicating the sequence id of
         *  the database the view reflects.
         */
        update_seq?: boolean;
        /** Schema for a document ID. */
        end_key?: string;
        /** Schema for a document ID. */
        key?: string;
        /** Schema for a list of document IDs. */
        keys?: string[];
        /** Schema for a document ID. */
        start_key?: string;
    }
    /** Schema for the result of an all documents operation. */
    interface AllDocsResult {
        /** Number of total rows. */
        total_rows: number;
        /** List of doc results. */
        rows: DocsResultRow[];
        /** Current update sequence for the database. */
        update_seq?: string;
    }
    /** Schema for a full text search analyzer. */
    interface Analyzer {
        /** Schema for the name of the Apache Lucene analyzer to use for text indexing. The default value varies
         *  depending on the analyzer usage:
         *  * For search indexes the default is `standard` * For query text indexes the default is `keyword` * For a query
         *  text index default_field the default is `standard`.
         */
        name?: Analyzer.Constants.Name | string;
        /** Custom stopwords to use with the named analyzer. */
        stopwords?: string[];
    }
    namespace Analyzer {
        namespace Constants {
            /** Schema for the name of the Apache Lucene analyzer to use for text indexing. The default value varies depending on the analyzer usage: * For search indexes the default is `standard` * For query text indexes the default is `keyword` * For a query text index default_field the default is `standard`. */
            enum Name {
                CLASSIC = "classic",
                EMAIL = "email",
                KEYWORD = "keyword",
                SIMPLE = "simple",
                STANDARD = "standard",
                WHITESPACE = "whitespace",
                ARABIC = "arabic",
                ARMENIAN = "armenian",
                BASQUE = "basque",
                BULGARIAN = "bulgarian",
                BRAZILIAN = "brazilian",
                CATALAN = "catalan",
                CJK = "cjk",
                CHINESE = "chinese",
                CZECH = "czech",
                DANISH = "danish",
                DUTCH = "dutch",
                ENGLISH = "english",
                FINNISH = "finnish",
                FRENCH = "french",
                GERMAN = "german",
                GREEK = "greek",
                GALICIAN = "galician",
                HINDI = "hindi",
                HUNGARIAN = "hungarian",
                INDONESIAN = "indonesian",
                IRISH = "irish",
                ITALIAN = "italian",
                JAPANESE = "japanese",
                LATVIAN = "latvian",
                NORWEGIAN = "norwegian",
                PERSIAN = "persian",
                POLISH = "polish",
                PORTUGUESE = "portuguese",
                ROMANIAN = "romanian",
                RUSSIAN = "russian",
                SPANISH = "spanish",
                SWEDISH = "swedish",
                THAI = "thai",
                TURKISH = "turkish",
                PERFIELD = "perfield"
            }
        }
    }
    /** Schema for a search analyzer configuration. */
    interface AnalyzerConfiguration {
        /** Schema for the name of the Apache Lucene analyzer to use for text indexing. The default value varies
         *  depending on the analyzer usage:
         *  * For search indexes the default is `standard` * For query text indexes the default is `keyword` * For a query
         *  text index default_field the default is `standard`.
         */
        name?: AnalyzerConfiguration.Constants.Name | string;
        /** Custom stopwords to use with the named analyzer. */
        stopwords?: string[];
        /** Schema for mapping a field name to a per field analyzer. */
        fields?: JsonObject;
    }
    namespace AnalyzerConfiguration {
        namespace Constants {
            /** Schema for the name of the Apache Lucene analyzer to use for text indexing. The default value varies depending on the analyzer usage: * For search indexes the default is `standard` * For query text indexes the default is `keyword` * For a query text index default_field the default is `standard`. */
            enum Name {
                CLASSIC = "classic",
                EMAIL = "email",
                KEYWORD = "keyword",
                SIMPLE = "simple",
                STANDARD = "standard",
                WHITESPACE = "whitespace",
                ARABIC = "arabic",
                ARMENIAN = "armenian",
                BASQUE = "basque",
                BULGARIAN = "bulgarian",
                BRAZILIAN = "brazilian",
                CATALAN = "catalan",
                CJK = "cjk",
                CHINESE = "chinese",
                CZECH = "czech",
                DANISH = "danish",
                DUTCH = "dutch",
                ENGLISH = "english",
                FINNISH = "finnish",
                FRENCH = "french",
                GERMAN = "german",
                GREEK = "greek",
                GALICIAN = "galician",
                HINDI = "hindi",
                HUNGARIAN = "hungarian",
                INDONESIAN = "indonesian",
                IRISH = "irish",
                ITALIAN = "italian",
                JAPANESE = "japanese",
                LATVIAN = "latvian",
                NORWEGIAN = "norwegian",
                PERSIAN = "persian",
                POLISH = "polish",
                PORTUGUESE = "portuguese",
                ROMANIAN = "romanian",
                RUSSIAN = "russian",
                SPANISH = "spanish",
                SWEDISH = "swedish",
                THAI = "thai",
                TURKISH = "turkish",
                PERFIELD = "perfield"
            }
        }
    }
    /** Schema for api keys. */
    interface ApiKeysResult {
        /** ok. */
        ok: boolean;
        /** The generated api key. */
        key: string;
        /** The password associated with the api key. */
        password: string;
    }
    /** Schema for an attachment. */
    interface Attachment {
        /** Attachment MIME type. */
        content_type?: string;
        /** Base64-encoded content. Available if attachment content is requested by using the query parameters
         *  `attachments=true` or `atts_since`. Note that when used with a view or changes feed `include_docs` must also be
         *  `true`.
         */
        data?: string;
        /** Content hash digest. It starts with prefix which announce hash type (e.g. `md5-`) and continues with
         *  Base64-encoded hash digest.
         */
        digest?: string;
        /** Compressed attachment size in bytes. Available if content_type was in list of compressible types when the
         *  attachment was added and the query parameter `att_encoding_info` is `true`. Note that when used with a view or
         *  changes feed `include_docs` must also be `true`.
         */
        encoded_length?: number;
        /** Compression codec. Available if content_type was in list of compressible types when the attachment was added
         *  and the and the query parameter `att_encoding_info` is `true`. Note that when used with a view or changes feed
         *  `include_docs` must also be `true`.
         */
        encoding?: string;
        /** True if the attachment follows in a multipart request or response. */
        follows?: boolean;
        /** Real attachment size in bytes. Not available if inline attachment content requested. */
        length?: number;
        /** Revision number when attachment was added. */
        revpos?: number;
        /** Has `true` value if object contains stub info and no content. Otherwise omitted in response. */
        stub?: boolean;
    }
    /** Schema for submitting documents for bulk modifications. */
    interface BulkDocs {
        /** Array of documents. */
        docs: Document[];
        /** If `false`, prevents the database from assigning them new revision IDs. Default is `true`. */
        new_edits?: boolean;
    }
    /** Schema for a document item in a bulk get query. */
    interface BulkGetQueryDocument {
        /** Includes attachments only since specified revisions. */
        atts_since?: string[];
        /** Schema for a document ID. */
        id: string;
        /** Schema for a document revision identifier. */
        rev?: string;
    }
    /** Schema for the results object of a bulk get operation. */
    interface BulkGetResult {
        /** Results. */
        results: BulkGetResultItem[];
    }
    /** Schema for BulkGetResult object containing a successfully retrieved document or error information. */
    interface BulkGetResultDocument {
        /** Schema for the result of a document modification. */
        error?: DocumentResult;
        /** Schema for a document. */
        ok?: Document;
    }
    /** Schema for the document revisions information from a bulk get operation. */
    interface BulkGetResultItem {
        /** Array of document revisions or error information. */
        docs: BulkGetResultDocument[];
        /** Schema for a document ID. */
        id: string;
    }
    /** Schema for information about the currently provisioned and target throughput capacity. */
    interface CapacityThroughputInformation {
        /** Detailed information about provisioned throughput capacity. */
        current: CapacityThroughputInformationCurrent;
        /** Detailed information about target throughput capacity. */
        target?: CapacityThroughputInformationTarget;
    }
    /** Detailed information about provisioned throughput capacity. */
    interface CapacityThroughputInformationCurrent {
        /** Schema for detailed information about throughput capacity with breakdown by specific throughput requests
         *  classes.
         */
        throughput: ThroughputInformation;
    }
    /** Detailed information about target throughput capacity. */
    interface CapacityThroughputInformationTarget {
        /** Schema for detailed information about throughput capacity with breakdown by specific throughput requests
         *  classes.
         */
        throughput: ThroughputInformation;
    }
    /** Schema for a document leaf with single field rev. */
    interface Change {
        /** Schema for a document revision identifier. */
        rev: string;
    }
    /** Schema for normal changes feed result. */
    interface ChangesResult {
        /** last_seq. */
        last_seq: string;
        /** pending. */
        pending: number;
        /** results. */
        results: ChangesResultItem[];
    }
    /** Schema for an item in the changes results array. */
    interface ChangesResultItem {
        /** List of document's leaves with single field rev. */
        changes: Change[];
        /** if `true` then the document is deleted. */
        deleted?: boolean;
        /** Schema for a document. */
        doc?: Document;
        /** Schema for a document ID. */
        id: string;
        /** Update sequence. */
        seq: string;
    }
    /** Schema for size information of content. */
    interface ContentInformationSizes {
        /** The active size of the content, in bytes. */
        active: number;
        /** The total uncompressed size of the content, in bytes. */
        external: number;
        /** The total size of the content as stored on disk, in bytes. */
        file: number;
    }
    /** Schema for information about the CORS configuration. */
    interface CorsInformation {
        /** Boolean value to allow authentication credentials. If set to true, browser requests must be done by using
         *  withCredentials = true.
         */
        allow_credentials: boolean;
        /** Boolean value to turn CORS on and off. */
        enable_cors: boolean;
        /** An array of strings that contain allowed origin domains. You have to specify the full URL including the
         *  protocol. It is recommended that only the HTTPS protocol is used. Subdomains count as separate domains, so you
         *  have to specify all subdomains used.
         */
        origins: string[];
    }
    /** Schema for information about current consumption of a provisioned throughput capacity. */
    interface CurrentThroughputInformation {
        /** Detailed information about current consumption. */
        throughput: CurrentThroughputInformationThroughput;
    }
    /** Detailed information about current consumption. */
    interface CurrentThroughputInformationThroughput {
        /** Number of global queries conducted against the instance for a given second. */
        query: number;
        /** Number of reads conducted against the instance for a given second. */
        read: number;
        /** Number of writes conducted against the instance for a given second. */
        write: number;
    }
    /** Schema for information about a database. */
    interface DatabaseInformation {
        /** Schema for database cluster information. */
        cluster: DatabaseInformationCluster;
        /** An opaque string that describes the committed state of the database. */
        committed_update_seq?: string;
        /** True if the database compaction routine is operating on this database. */
        compact_running: boolean;
        /** An opaque string that describes the compaction state of the database. */
        compacted_seq?: string;
        /** The name of the database. */
        db_name: string;
        /** The version of the physical format used for the data when it is stored on disk. */
        disk_format_version: number;
        /** A count of the documents in the specified database. */
        doc_count: number;
        /** Number of deleted documents. */
        doc_del_count: number;
        /** The engine used for the database. */
        engine?: string;
        /** Schema for database properties. */
        props: DatabaseInformationProps;
        /** Schema for size information of content. */
        sizes: ContentInformationSizes;
        /** An opaque string that describes the state of the database. Do not rely on this string for counting the
         *  number of updates.
         */
        update_seq: string;
        /** The UUID of the database. */
        uuid?: string;
        /** Information about database's partitioned indexes. */
        partitioned_indexes?: PartitionedIndexesInformation;
    }
    /** Schema for database cluster information. */
    interface DatabaseInformationCluster {
        /** Schema for the number of replicas of a database in a cluster. The cluster is using the default value and it
         *  cannot be changed by the user.
         */
        n: number;
        /** Schema for the number of shards in a database. Each shard is a partition of the hash value range. */
        q: number;
        /** Read quorum. The number of consistent copies of a document that need to be read before a successful reply. */
        r: number;
        /** Write quorum. The number of copies of a document that need to be written before a successful reply. */
        w: number;
    }
    /** Schema for database properties. */
    interface DatabaseInformationProps {
        /** The value is `true` for a partitioned database. */
        partitioned?: boolean;
    }
    /** Schema for a database change event. */
    interface DbEvent {
        /** Database name. */
        db_name: string;
        /** Sequence number. */
        seq: string;
        /** A database event. */
        type: DbEvent.Constants.Type | string;
    }
    namespace DbEvent {
        namespace Constants {
            /** A database event. */
            enum Type {
                CREATED = "created",
                DELETED = "deleted",
                UPDATED = "updated"
            }
        }
    }
    /** Schema for database updates. */
    interface DbUpdates {
        /** Last sequence number. */
        last_seq: string;
        /** results. */
        results: DbEvent[];
    }
    /** Schema for database information keyed by database name. */
    interface DbsInfoResult {
        /** The name of the error. */
        error?: string;
        /** Schema for information about a database. */
        info?: DatabaseInformation;
        /** Database name. */
        key: string;
    }
    /** Schema for a design document. */
    interface DesignDocument {
        /** Schema for a map of attachment name to attachment metadata. */
        _attachments?: JsonObject;
        /** Schema for a list of document revision identifiers. */
        _conflicts?: string[];
        /** Deletion flag. Available if document was removed. */
        _deleted?: boolean;
        /** Schema for a list of document revision identifiers. */
        _deleted_conflicts?: string[];
        /** Document ID. */
        _id?: string;
        /** Document's update sequence in current database. Available if requested with local_seq=true query parameter. */
        _local_seq?: string;
        /** Schema for a document revision identifier. */
        _rev?: string;
        /** Schema for list of revision information. */
        _revisions?: Revisions;
        /** Schema for a list of objects with information about local revisions and their status. */
        _revs_info?: DocumentRevisionStatus[];
        /** Indicates whether to automatically build indexes defined in this design document. */
        autoupdate?: boolean;
        /** Schema for filter functions definition. This schema is a map where keys are the names of the filter
         *  functions and values are the function definition in string format.
         *
         *  Filter function formats, or filters the changes feed that pass filter rules. The function takes 2 parameters:
         *
         *    * `doc`: The document that is being processed.
         *    * `req`: A Request JavaScript object with these properties:
         *
         *      * `body` - string, Request body data as string.
         *        If the request method is GET this field contains the value
         *        `"undefined"`.
         *        If the method is DELETE or HEAD the value is `""` (empty string).
         *      * `cookie` - Cookies object.
         *      * `form` - Form Data object, contains the decoded body as key-value
         *        pairs if the Content-Type header was
         *        application/x-www-form-urlencoded.
         *      * `headers` - Request Headers object.
         *      * `id` - string, requested document id if it was specified
         *        or null otherwise.
         *      * `info` - Database Information object,
         *        see `DatabaseInformation`.
         *      * `method` - string or an array of chars, request method.
         *        String value is a method as one of: HEAD, GET, POST, PUT,
         *        DELETE, OPTIONS, TRACE, COPY. For not supported methods
         *        it will be represented as an array of char codes e.g. for VIEW
         *        it will be 86,73,69,87.
         *      * `path` - array of strings, requested path sections.
         *      * `peer` - string, request source IP address.
         *      * `query` - string, URL query parameters object. Note that multiple
         *        keys are not supported and the last key value suppresses others.
         *      * `requested_path` - array of strings,
         *        actual requested path section.
         *      * `raw_path` - string, raw requested path.
         *      * `userCtx`: User Context Object, containing information about the
         *        user writing the document (if present), see the `UserContext`.
         *      * `secObj`: Security Object, with lists of database security roles,
         *        see the `SecurityObject`.
         *      * `uuid` - string, generated UUID by a specified algorithm in the
         *        config file.
         *
         *  Filter functions must return true if a document passed all the rules.
         */
        filters?: JsonObject;
        /** Search (text) index function definitions. */
        indexes?: JsonObject;
        /** Defines Query Server key to process design document functions. */
        language?: string;
        /** Schema for design document options. */
        options?: DesignDocumentOptions;
        /** Validate document update function can be used to prevent invalid or unauthorized document update requests
         *  from being stored. Validation functions typically examine the structure of the new document to ensure that
         *  required fields are present and to verify that the requesting user should be allowed to make changes to the
         *  document properties. When a write request is received for a given database, the validation function in each
         *  design document in that database is called in an unspecified order. If any of the validation functions throw an
         *  error, the write will not succeed.
         *
         *  The validation function can abort the pending document write by throwing one of two error objects:
         *
         *  ```
         *  // user is not authorized to make the change but may re-authenticate throw({ unauthorized: 'Error message here.'
         *  });
         *
         *  // change is not allowed throw({ forbidden: 'Error message here.' });
         *  ```
         *
         *  The function takes 4 parameters:
         *
         *    * `newDoc` - New version of document that will be stored
         *      from the update request.
         *    * `oldDoc` - Previous version of document that is already stored.
         *    * `userCtx` - User Context Object, containing information about the
         *      user writing the document (if present), see the `UserContext`.
         *    * `secObj` - Security Object, with lists of database security roles,
         *      see the `SecurityObject`.
         */
        validate_doc_update?: string;
        /** Schema for design document views. */
        views?: JsonObject;
        /** DesignDocument accepts additional properties. */
        [propName: string]: any;
    }
    /** Schema for information about a design document. */
    interface DesignDocumentInformation {
        /** name. */
        name: string;
        /** View index information. */
        view_index: DesignDocumentViewIndex;
    }
    /** Schema for design document options. */
    interface DesignDocumentOptions {
        /** Whether this design document describes partitioned or global indexes. */
        partitioned?: boolean;
    }
    /** View index information. */
    interface DesignDocumentViewIndex {
        /** List of collator versions. If there are multiple entries this implies a libicu upgrade has occurred but
         *  compaction has not run yet.
         */
        collator_versions: string[];
        /** Indicates whether a compaction routine is currently running on the view. */
        compact_running: boolean;
        /** Language for the defined views. */
        language: string;
        /** MD5 signature of the views for the design document. */
        signature: string;
        /** Schema for size information of content. */
        sizes: ContentInformationSizes;
        /** Indicates if the view is currently being updated. */
        updater_running: boolean;
        /** Schema for an ability to tell if view is up-to-date without querying it. */
        updates_pending: UpdatesPending;
        /** Number of clients waiting on views from this design document. */
        waiting_clients: number;
        /** Indicates if there are outstanding commits to the underlying database that need to processed. */
        waiting_commit: boolean;
    }
    /** Schema for view functions definition. */
    interface DesignDocumentViewsMapReduce {
        /** JavaScript map function as a string. */
        map: string;
        /** JavaScript reduce function as a string. */
        reduce?: string;
    }
    /** Schema for a row of document information in a DocsResult. */
    interface DocsResultRow {
        /** The cause of the error (if available). */
        caused_by?: string;
        /** The name of the error. */
        error?: string;
        /** The reason the error occurred (if available). */
        reason?: string;
        /** Schema for a document. */
        doc?: Document;
        /** id. */
        id?: string;
        /** Document ID. */
        key: string;
        /** Value of built-in `/_all_docs` style view. */
        value?: DocsResultRowValue;
    }
    /** Value of built-in `/_all_docs` style view. */
    interface DocsResultRowValue {
        /** If `true` then the document is deleted. Not present for undeleted documents. */
        deleted?: boolean;
        /** Schema for a document revision identifier. */
        rev: string;
    }
    /** Schema for a document. */
    interface Document {
        /** Schema for a map of attachment name to attachment metadata. */
        _attachments?: JsonObject;
        /** Schema for a list of document revision identifiers. */
        _conflicts?: string[];
        /** Deletion flag. Available if document was removed. */
        _deleted?: boolean;
        /** Schema for a list of document revision identifiers. */
        _deleted_conflicts?: string[];
        /** Document ID. */
        _id?: string;
        /** Document's update sequence in current database. Available if requested with local_seq=true query parameter. */
        _local_seq?: string;
        /** Schema for a document revision identifier. */
        _rev?: string;
        /** Schema for list of revision information. */
        _revisions?: Revisions;
        /** Schema for a list of objects with information about local revisions and their status. */
        _revs_info?: DocumentRevisionStatus[];
        /** Document accepts additional properties. */
        [propName: string]: any;
    }
    /** Schema for the result of a document modification. */
    interface DocumentResult {
        /** Schema for a document ID. */
        id: string;
        /** Schema for a document revision identifier. */
        rev?: string;
        /** ok. */
        ok?: boolean;
        /** The cause of the error (if available). */
        caused_by?: string;
        /** The name of the error. */
        error?: string;
        /** The reason the error occurred (if available). */
        reason?: string;
    }
    /** Schema for information about revisions and their status. */
    interface DocumentRevisionStatus {
        /** Schema for a document revision identifier. */
        rev: string;
        /** Status of the revision. May be one of: - `available`: Revision is available for retrieving with rev query
         *  parameter - `missing`: Revision is not available - `deleted`: Revision belongs to deleted document.
         */
        status: DocumentRevisionStatus.Constants.Status | string;
    }
    namespace DocumentRevisionStatus {
        namespace Constants {
            /** Status of the revision. May be one of: - `available`: Revision is available for retrieving with rev query parameter - `missing`: Revision is not available - `deleted`: Revision belongs to deleted document. */
            enum Status {
                AVAILABLE = "available",
                MISSING = "missing",
                DELETED = "deleted"
            }
        }
    }
    /** Schema for document shard information. */
    interface DocumentShardInfo {
        /** List of nodes serving a replica of the shard. */
        nodes: string[];
        /** The shard range in which the document is stored. */
        range: string;
    }
    /** Schema for find query execution statistics. */
    interface ExecutionStats {
        /** Time to execute the query. */
        execution_time_ms: number;
        /** Number of results returned. */
        results_returned: number;
        /** Number of documents fetched from the index. */
        total_docs_examined: number;
        /** Number of rows scanned in the index. */
        total_keys_examined: number;
        /** Number of documents fetched from the primary index with the specified read quorum. */
        total_quorum_docs_examined: number;
    }
    /** Schema for information about the index used for a find query. */
    interface ExplainResult {
        /** When `true`, the query is answered using the index only and no documents are fetched. */
        covering: boolean;
        /** Name of database. */
        dbname: string;
        /** Fields that were requested to be projected from the document. If no fields were requested to be projected
         *  this will be empty and all fields will be returned.
         */
        fields: string[];
        /** Schema for information about an index. */
        index: IndexInformation;
        /** The used maximum number of results returned. */
        limit: number;
        /** Arguments passed to the underlying view. */
        mrargs?: ExplainResultMrArgs;
        /** Options used for the request. */
        opts: ExplainResultOpts;
        /** Schema for any JSON type. */
        partitioned?: any;
        /** JSON object describing criteria used to select documents. The selector specifies fields in the document, and
         *  provides an expression to evaluate with the field content or other data.
         *
         *  The selector object must:
         *    * Be structured as valid JSON.
         *    * Contain a valid query expression.
         *
         *  Using a selector is significantly more efficient than using a JavaScript filter function, and is the recommended
         *  option if filtering on document attributes only.
         *
         *  Elementary selector syntax requires you to specify one or more fields, and the corresponding values required for
         *  those fields. You can create more complex selector expressions by combining operators.
         *
         *  Operators are identified by the use of a dollar sign `$` prefix in the name field.
         *
         *  There are two core types of operators in the selector syntax:
         *  * Combination operators: applied at the topmost level of selection. They are used to combine selectors. A
         *  combination operator takes a single argument. The argument is either another selector, or an array of selectors.
         *  * Condition operators: are specific to a field, and are used to evaluate the value stored in that field. For
         *  instance, the basic `$eq` operator matches when the specified field contains a value that is equal to the
         *  supplied argument. See [the Cloudant Docs](https://cloud.ibm.com/docs/Cloudant?topic=Cloudant-operators) for a
         *  list of all available combination and conditional operators.
         *  * Only equality operators such as `$eq`, `$gt`, `$gte`, `$lt`, and `$lte` (but not `$ne`) can be used as the
         *  basis of a query. You should include at least one of these in a selector.
         *
         *  For further reference see
         *  [selector syntax](https://cloud.ibm.com/docs/Cloudant?topic=Cloudant-selector-syntax).
         */
        selector: JsonObject;
        /** Skip parameter used. */
        skip: number;
    }
    /** Arguments passed to the underlying view. */
    interface ExplainResultMrArgs {
        /** Schema for any JSON type. */
        conflicts?: any;
        /** Direction parameter passed to the underlying view. */
        direction?: string;
        /** Schema for any JSON type. */
        end_key?: any;
        /** A parameter that specifies whether to include the full content of the documents in the response in the
         *  underlying view.
         */
        include_docs?: boolean;
        /** Partition parameter passed to the underlying view. */
        partition?: string;
        /** A parameter that specifies returning only documents that match any of the specified keys in the underlying
         *  view.
         */
        reduce?: boolean;
        /** A parameter that specifies whether the view results should be returned form a "stable" set of shards passed
         *  to the underlying view.
         */
        stable?: boolean;
        /** Schema for any JSON type. */
        start_key?: any;
        /** Schema for any JSON type. */
        update?: any;
        /** The type of the underlying view. */
        view_type?: ExplainResultMrArgs.Constants.ViewType | string;
    }
    namespace ExplainResultMrArgs {
        namespace Constants {
            /** The type of the underlying view. */
            enum ViewType {
                MAP = "map",
                REDUCE = "reduce"
            }
        }
    }
    /** Options used for the request. */
    interface ExplainResultOpts {
        /** Opaque bookmark token used when paginating results. */
        bookmark: string;
        /** Conflicts used in the request query. */
        conflicts: boolean;
        /** Execution statistics used in the request query. */
        execution_stats: boolean;
        /** JSON array that uses the field syntax. Use this parameter to specify which fields of a document must be
         *  returned. If it is omitted or empty, the entire document is returned.
         */
        fields: string[];
        /** Limit used in the request query. */
        limit: number;
        /** On which database partition the request was used. If it was not used on a database partition, it returns
         *  with `""`.
         */
        partition: string;
        /** The read quorum that is needed for the result. */
        r: number;
        /** Skip used in the request query. */
        skip: number;
        /** Schema for any JSON type. */
        sort: any;
        /** Stable used in the request query. */
        stable: boolean;
        /** Deprecated: Stale used in the request query. */
        stale: boolean;
        /** Update used in the request query. */
        update: boolean;
        /** Use index used in the request query. */
        use_index: string[];
    }
    /** Schema for the result of a query find operation. */
    interface FindResult {
        /** Opaque bookmark token used when paginating results. */
        bookmark: string;
        /** Documents matching the selector. */
        docs: Document[];
        /** Schema for find query execution statistics. */
        execution_stats?: ExecutionStats;
        /** warning. */
        warning?: string;
    }
    /** Schema for a `json` or `text` query index definition. Indexes of type `text` have additional configuration properties that do not apply to `json` indexes, these are: * `default_analyzer` - the default text analyzer to use * `default_field` - whether to index the text in all document fields and what analyzer to use for that purpose. */
    interface IndexDefinition {
        /** Schema for a full text search analyzer. */
        default_analyzer?: Analyzer;
        /** Schema for the text index default field configuration. The default field is used to index the text of all
         *  fields within a document for use with the `$text` operator.
         */
        default_field?: IndexTextOperatorDefaultField;
        /** List of field objects to index.  Nested fields are also allowed, e.g. `person.name`.
         *
         *  For "json" type indexes each object is a mapping of field name to sort direction (asc or desc).
         *
         *  For "text" type indexes each object has a `name` property of the field name and a `type` property of the field
         *  type (string, number, or boolean).
         */
        fields?: IndexField[];
        /** Whether to scan every document for arrays and store the length for each array found. Set the
         *  index_array_lengths field to false if:
         *  * You do not need to know the length of an array. * You do not use the `$size` operator. * The documents in your
         *  database are complex, or not completely under your control. As a result, it is difficult to estimate the impact
         *  of the extra processing that is needed to determine and store the arrays lengths.
         */
        index_array_lengths?: boolean;
        /** JSON object describing criteria used to select documents. The selector specifies fields in the document, and
         *  provides an expression to evaluate with the field content or other data.
         *
         *  The selector object must:
         *    * Be structured as valid JSON.
         *    * Contain a valid query expression.
         *
         *  Using a selector is significantly more efficient than using a JavaScript filter function, and is the recommended
         *  option if filtering on document attributes only.
         *
         *  Elementary selector syntax requires you to specify one or more fields, and the corresponding values required for
         *  those fields. You can create more complex selector expressions by combining operators.
         *
         *  Operators are identified by the use of a dollar sign `$` prefix in the name field.
         *
         *  There are two core types of operators in the selector syntax:
         *  * Combination operators: applied at the topmost level of selection. They are used to combine selectors. A
         *  combination operator takes a single argument. The argument is either another selector, or an array of selectors.
         *  * Condition operators: are specific to a field, and are used to evaluate the value stored in that field. For
         *  instance, the basic `$eq` operator matches when the specified field contains a value that is equal to the
         *  supplied argument. See [the Cloudant Docs](https://cloud.ibm.com/docs/Cloudant?topic=Cloudant-operators) for a
         *  list of all available combination and conditional operators.
         *  * Only equality operators such as `$eq`, `$gt`, `$gte`, `$lt`, and `$lte` (but not `$ne`) can be used as the
         *  basis of a query. You should include at least one of these in a selector.
         *
         *  For further reference see
         *  [selector syntax](https://cloud.ibm.com/docs/Cloudant?topic=Cloudant-selector-syntax).
         */
        partial_filter_selector?: JsonObject;
    }
    /** Schema for indexed fields for use with declarative JSON query. */
    interface IndexField {
        /** Name of the field. */
        name?: string;
        /** The type of the named field. */
        type?: IndexField.Constants.Type | string;
        /** IndexField accepts additional properties. */
        [propName: string]: any;
    }
    namespace IndexField {
        namespace Constants {
            /** The type of the named field. */
            enum Type {
                BOOLEAN = "boolean",
                NUMBER = "number",
                STRING = "string"
            }
        }
    }
    /** Schema for information about an index. */
    interface IndexInformation {
        /** Design document ID including a `_design/` prefix. */
        ddoc: string;
        /** Schema for a `json` or `text` query index definition. Indexes of type `text` have additional configuration
         *  properties that do not apply to `json` indexes, these are:
         *  * `default_analyzer` - the default text analyzer to use * `default_field` - whether to index the text in all
         *  document fields and what analyzer to use for that purpose.
         */
        def: IndexDefinition;
        /** Index name. */
        name: string;
        /** Indicates if index is partitioned. */
        partitioned?: boolean;
        /** Schema for the type of an index. */
        type: IndexInformation.Constants.Type | string;
    }
    namespace IndexInformation {
        namespace Constants {
            /** Schema for the type of an index. */
            enum Type {
                JSON = "json",
                SPECIAL = "special",
                TEXT = "text"
            }
        }
    }
    /** Schema for the result of creating an index. */
    interface IndexResult {
        /** Id of the design document the index was created in. */
        id: string;
        /** Name of the index created. */
        name: string;
        /** Flag to show whether the index was created or one already exists. */
        result: IndexResult.Constants.Result | string;
    }
    namespace IndexResult {
        namespace Constants {
            /** Flag to show whether the index was created or one already exists. */
            enum Result {
                CREATED = "created",
                EXISTS = "exists"
            }
        }
    }
    /** Schema for the text index default field configuration. The default field is used to index the text of all fields within a document for use with the `$text` operator. */
    interface IndexTextOperatorDefaultField {
        /** Schema for a full text search analyzer. */
        analyzer?: Analyzer;
        /** Whether or not the default_field is enabled. */
        enabled?: boolean;
    }
    /** Schema for information about the indexes in a database. */
    interface IndexesInformation {
        /** Number of total rows. */
        total_rows: number;
        /** Indexes. */
        indexes: IndexInformation[];
    }
    /** Schema for information about known nodes and cluster membership. */
    interface MembershipInformation {
        /** List of nodes this node knows about, including the ones that are part of the cluster. */
        all_nodes: string[];
        /** All cluster nodes. */
        cluster_nodes: string[];
    }
    /** Schema for an OK result. */
    interface Ok {
        /** ok. */
        ok?: boolean;
    }
    /** Schema for information about a database partition. */
    interface PartitionInformation {
        /** The name of the database. */
        db_name: string;
        /** A count of the documents in the specified database partition. */
        doc_count: number;
        /** Number of deleted documents. */
        doc_del_count: number;
        /** The name of the partition in the database. */
        partition: string;
        /** Schema for information about the partition index count and limit in a database. */
        partitioned_indexes?: PartitionInformationIndexes;
        /** The size of active and external data, in bytes. */
        sizes: PartitionInformationSizes;
    }
    /** Schema for information about the partition index count and limit in a database. */
    interface PartitionInformationIndexes {
        /** Total count of the partitioned indexes. */
        count?: number;
        /** The count breakdown of partitioned indexes. */
        indexes?: PartitionInformationIndexesIndexes;
        /** The partitioned index limit. */
        limit?: number;
    }
    /** The count breakdown of partitioned indexes. */
    interface PartitionInformationIndexesIndexes {
        /** Number of partitioned search indexes. */
        search?: number;
        /** Number of partitioned view indexes. */
        view?: number;
    }
    /** The size of active and external data, in bytes. */
    interface PartitionInformationSizes {
        /** The size of live data inside the database, in bytes. */
        active?: number;
        /** The uncompressed size of database contents in bytes. */
        external?: number;
    }
    /** Number of partitioned indexes by type. */
    interface PartitionedIndexesDetailedInformation {
        /** Number of partitioned indexes of search type. */
        search?: number;
        /** Number of partitioned indexes of view type. */
        view?: number;
    }
    /** Information about database's partitioned indexes. */
    interface PartitionedIndexesInformation {
        /** Total number of partitioned indexes in the database. */
        count?: number;
        /** Number of partitioned indexes by type. */
        indexes?: PartitionedIndexesDetailedInformation;
        /** Maximum allowed number of partitioned indexes in the database. */
        limit?: number;
    }
    /** Request parameters to use during target database creation. */
    interface ReplicationCreateTargetParameters {
        /** Schema for the number of replicas of a database in a cluster. The cluster is using the default value and it
         *  cannot be changed by the user.
         */
        n?: number;
        /** Parameter to specify whether to enable database partitions when creating the target database. */
        partitioned?: boolean;
        /** Schema for the number of shards in a database. Each shard is a partition of the hash value range. */
        q?: number;
    }
    /** Schema for a replication source or target database. */
    interface ReplicationDatabase {
        /** Schema for replication source or target database authentication. */
        auth?: ReplicationDatabaseAuth;
        /** Replication request headers. */
        headers?: JsonObject;
        /** Replication database URL. */
        url: string;
    }
    /** Schema for replication source or target database authentication. */
    interface ReplicationDatabaseAuth {
        /** Schema for basic authentication of replication source or target database. */
        basic?: ReplicationDatabaseAuthBasic;
        /** Schema for an IAM API key for replication database authentication. */
        iam?: ReplicationDatabaseAuthIam;
    }
    /** Schema for basic authentication of replication source or target database. */
    interface ReplicationDatabaseAuthBasic {
        /** The password associated with the username. */
        password: string;
        /** The username. */
        username: string;
    }
    /** Schema for an IAM API key for replication database authentication. */
    interface ReplicationDatabaseAuthIam {
        /** IAM API key. */
        api_key: string;
    }
    /** Schema for a replication document. Note that `selector`, `doc_ids`, and `filter` are incompatible with each other. */
    interface ReplicationDocument {
        /** Schema for a map of attachment name to attachment metadata. */
        _attachments?: JsonObject;
        /** Schema for a list of document revision identifiers. */
        _conflicts?: string[];
        /** Deletion flag. Available if document was removed. */
        _deleted?: boolean;
        /** Schema for a list of document revision identifiers. */
        _deleted_conflicts?: string[];
        /** Document ID. */
        _id?: string;
        /** Document's update sequence in current database. Available if requested with local_seq=true query parameter. */
        _local_seq?: string;
        /** Schema for a document revision identifier. */
        _rev?: string;
        /** Schema for list of revision information. */
        _revisions?: Revisions;
        /** Schema for a list of objects with information about local revisions and their status. */
        _revs_info?: DocumentRevisionStatus[];
        /** Cancels the replication. */
        cancel?: boolean;
        /** Defines replication checkpoint interval in milliseconds. */
        checkpoint_interval?: number;
        /** HTTP connection timeout per replication. Even for very fast/reliable networks it might need to be increased
         *  if a remote database is too busy.
         */
        connection_timeout?: number;
        /** Configure the replication to be continuous. */
        continuous?: boolean;
        /** Creates the target database. Requires administrator privileges on target server. */
        create_target?: boolean;
        /** Request parameters to use during target database creation. */
        create_target_params?: ReplicationCreateTargetParameters;
        /** Schema for a list of document IDs. */
        doc_ids?: string[];
        /** The name of a filter function which is defined in a design document in the source database in
         *  {ddoc_id}/{filter} format. It determines which documents get replicated. Using the selector option provides
         *  performance benefits when compared with using the filter option. Use the selector option when possible.
         */
        filter?: string;
        /** Maximum number of HTTP connections per replication. */
        http_connections?: number;
        /** Schema for a map of string key value pairs, such as query parameters. */
        query_params?: JsonObject;
        /** Number of times a replication request is retried. The requests are retried with a doubling exponential
         *  backoff starting at 0.25 seconds, with a cap at 5 minutes.
         */
        retries_per_request?: number;
        /** JSON object describing criteria used to select documents. The selector specifies fields in the document, and
         *  provides an expression to evaluate with the field content or other data.
         *
         *  The selector object must:
         *    * Be structured as valid JSON.
         *    * Contain a valid query expression.
         *
         *  Using a selector is significantly more efficient than using a JavaScript filter function, and is the recommended
         *  option if filtering on document attributes only.
         *
         *  Elementary selector syntax requires you to specify one or more fields, and the corresponding values required for
         *  those fields. You can create more complex selector expressions by combining operators.
         *
         *  Operators are identified by the use of a dollar sign `$` prefix in the name field.
         *
         *  There are two core types of operators in the selector syntax:
         *  * Combination operators: applied at the topmost level of selection. They are used to combine selectors. A
         *  combination operator takes a single argument. The argument is either another selector, or an array of selectors.
         *  * Condition operators: are specific to a field, and are used to evaluate the value stored in that field. For
         *  instance, the basic `$eq` operator matches when the specified field contains a value that is equal to the
         *  supplied argument. See [the Cloudant Docs](https://cloud.ibm.com/docs/Cloudant?topic=Cloudant-operators) for a
         *  list of all available combination and conditional operators.
         *  * Only equality operators such as `$eq`, `$gt`, `$gte`, `$lt`, and `$lte` (but not `$ne`) can be used as the
         *  basis of a query. You should include at least one of these in a selector.
         *
         *  For further reference see
         *  [selector syntax](https://cloud.ibm.com/docs/Cloudant?topic=Cloudant-selector-syntax).
         */
        selector?: JsonObject;
        /** Start the replication at a specific sequence value. */
        since_seq?: string;
        /** Replication socket options. */
        socket_options?: string;
        /** Schema for a replication source or target database. */
        source: ReplicationDatabase;
        /** Deprecated: This setting is forbidden in IBM Cloudant replication documents. This setting may be used with
         *  alternative replication mediators.
         *
         *  Address of a (http or socks5 protocol) proxy server through which replication with the source database should
         *  occur.
         */
        source_proxy?: string;
        /** Schema for a replication source or target database. */
        target: ReplicationDatabase;
        /** Deprecated: This setting is forbidden in IBM Cloudant replication documents. This setting may be used with
         *  alternative replication mediators.
         *
         *  Address of a (http or socks5 protocol) proxy server through which replication with the target database should
         *  occur.
         */
        target_proxy?: string;
        /** Specify whether to use _bulk_get for fetching documents from the source. If unset, the server configured
         *  default will be used.
         */
        use_bulk_get?: boolean;
        /** Specify if checkpoints should be saved during replication. Using checkpoints means a replication can be
         *  efficiently resumed.
         */
        use_checkpoints?: boolean;
        /** Schema for the user context of a session. */
        user_ctx?: UserContext;
        /** Replicate only the winning revisions. Replication with this mode discards conflicting revisions. Replication
         *  IDs and checkpoints generated by this mode are different to those generated by default, so it is possible to
         *  first replicate the winning revisions then later backfill remaining revisions with a regular replication job.
         */
        winning_revs_only?: boolean;
        /** Controls how many documents are processed. After each batch a checkpoint is written so this controls how
         *  frequently checkpointing occurs.
         */
        worker_batch_size?: number;
        /** Controls how many separate processes will read from the changes manager and write to the target. A higher
         *  number can improve throughput.
         */
        worker_processes?: number;
        /** ReplicationDocument accepts additional properties. */
        [propName: string]: any;
    }
    /** Schema for list of revision information. */
    interface Revisions {
        /** Array of valid revision IDs, in reverse order (latest first). */
        ids: string[];
        /** Prefix number for the latest revision. */
        start: number;
    }
    /** Schema for information about missing revs and possible ancestors. */
    interface RevsDiff {
        /** List of missing revisions. */
        missing?: string[];
        /** List of possible ancestor revisions. */
        possible_ancestors?: string[];
    }
    /** Schema for a listing of replication scheduler documents. */
    interface SchedulerDocsResult {
        /** Number of total rows. */
        total_rows: number;
        /** Array of replication scheduler doc objects. */
        docs: SchedulerDocument[];
    }
    /** Schema for a replication scheduler document. */
    interface SchedulerDocument {
        /** Database where replication document came from. */
        database: string;
        /** Replication document ID. */
        doc_id: string;
        /** Consecutive errors count. Indicates how many times in a row this replication has crashed. Replication will
         *  be retried with an exponential backoff based on this number. As soon as the replication succeeds this count is
         *  reset to 0. To can be used to get an idea why a particular replication is not making progress.
         */
        error_count: number;
        /** Replication ID, or null if state is completed or failed. */
        id: string;
        /** Schema for scheduler document information. A JSON object that may contain additional information about the
         *  state. For error states this will contain an error field and string value.
         */
        info: SchedulerInfo;
        /** Timestamp of last state update. */
        last_updated: string;
        /** Cluster node where the job is running. */
        node?: string;
        /** Replication source. */
        source?: string;
        /** Deprecated: Forbidden in IBM Cloudant mediated replications.
         *
         *  Address of the (http or socks5 protocol) proxy server through which replication with the source database occurs.
         */
        source_proxy?: string;
        /** Timestamp of when the replication was started. */
        start_time: string;
        /** Schema for replication state. */
        state: SchedulerDocument.Constants.State | string;
        /** Replication target. */
        target?: string;
        /** Deprecated: Forbidden in IBM Cloudant mediated replications.
         *
         *  Address of the (http or socks5 protocol) proxy server through which replication with the target database occurs.
         */
        target_proxy?: string;
    }
    namespace SchedulerDocument {
        namespace Constants {
            /** Schema for replication state. */
            enum State {
                INITIALIZING = "initializing",
                ERROR = "error",
                PENDING = "pending",
                RUNNING = "running",
                CRASHING = "crashing",
                COMPLETED = "completed",
                FAILED = "failed"
            }
        }
    }
    /** Schema for scheduler document information. A JSON object that may contain additional information about the state. For error states this will contain an error field and string value. */
    interface SchedulerInfo {
        /** The count of changes not yet replicated. */
        changes_pending?: number;
        /** The source sequence id which was last successfully replicated. */
        checkpointed_source_seq?: string;
        /** The count of docs which failed to be written to the target. */
        doc_write_failures?: number;
        /** The count of docs which have been read from the source. */
        docs_read?: number;
        /** The count of docs which have been written to the target. */
        docs_written?: number;
        /** Replication error message. */
        error?: string;
        /** The count of revisions which were found on the source, but missing from the target. */
        missing_revisions_found?: number;
        /** The count of revisions which have been checked since this replication began. */
        revisions_checked?: number;
        /** The last sequence number obtained from the source database changes feed. */
        source_seq?: string;
        /** The last sequence number processed by the replicator. */
        through_seq?: string;
    }
    /** Schema for a replication scheduler job. */
    interface SchedulerJob {
        /** Replication document database. */
        database: string;
        /** Replication document ID. */
        doc_id: string;
        /** Timestamped history of events as a list of objects. */
        history: SchedulerJobEvent[];
        /** Schema for a replication job id. */
        id: string;
        /** Schema for scheduler document information. A JSON object that may contain additional information about the
         *  state. For error states this will contain an error field and string value.
         */
        info: SchedulerInfo;
        /** Cluster node where the job is running. */
        node: string;
        /** Replication process ID. */
        pid: string;
        /** Replication source. */
        source: string;
        /** Timestamp of when the replication was started. */
        start_time: string;
        /** Replication target. */
        target: string;
        /** Name of user running replication. */
        user: string;
    }
    /** Schema for a replication scheduler job event. */
    interface SchedulerJobEvent {
        /** Reason for current state of event. */
        reason?: string;
        /** Timestamp of the event. */
        timestamp: string;
        /** Type of the event. */
        type: string;
    }
    /** Schema for a listing of replication scheduler jobs. */
    interface SchedulerJobsResult {
        /** Number of total rows. */
        total_rows: number;
        /** Array of replication job objects. */
        jobs: SchedulerJob[];
    }
    /** Schema for the output of testing search analyzer tokenization. */
    interface SearchAnalyzeResult {
        /** tokens. */
        tokens: string[];
    }
    /** Schema for a search index definition. */
    interface SearchIndexDefinition {
        /** Schema for a search analyzer configuration. */
        analyzer?: AnalyzerConfiguration;
        /** String form of a JavaScript function that is called for each document in the database. The function takes
         *  the document as a parameter, extracts some data from it, and then calls the `index` function to index that data.
         *  The index function takes 2, or optionally 3, parameters.
         *
         *  * The first parameter is the name of the field you intend to use when
         *    querying the index. If the special value `"default"` is used when you
         *    define the name, you do not have to specify a field name at query time.
         *  * The second parameter is the data to be indexed. This data must be only a
         *    string, number, or boolean. Other types will cause an error to be thrown
         *    by the index function call.
         *  * The optional third parameter is a JavaScript object with these
         *    properties:
         *
         *      * `facet` - boolean, default `false` - Creates a faceted index.
         *      * `index` - boolean, default `true` - If set to `false`, the data
         *        cannot be used for searches, but can still be retrieved from the
         *        index if `store` is set to `true`.
         *      * `store` - boolean, default `true` - If true, the value is returned
         *        in the search result; otherwise, the value is not returned.
         */
        index: string;
    }
    /** Schema for metadata information about a search index. */
    interface SearchIndexInfo {
        /** The committed sequence identifier. */
        committed_seq: number;
        /** The size of the search index on disk. */
        disk_size: number;
        /** The count of the number of indexed documents. */
        doc_count: number;
        /** The number of deleted documents. */
        doc_del_count: number;
        /** The pending sequence identifier. */
        pending_seq: number;
        /** Unique signature of the search index. */
        signature: string;
    }
    /** Schema for search index information. */
    interface SearchInfoResult {
        /** The name of the search index prefixed by the design document ID where the index is stored. */
        name: string;
        /** Schema for metadata information about a search index. */
        search_index: SearchIndexInfo;
    }
    /** Schema for the result of a query search operation. */
    interface SearchResult {
        /** Number of total rows. */
        total_rows: number;
        /** Opaque bookmark token used when paginating results. */
        bookmark?: string;
        /** Grouped search matches. */
        by?: string;
        /** The counts facet syntax returns the number of query results for each unique value of each named field. */
        counts?: JsonObject;
        /** The range facet syntax reuses the standard Lucene syntax for ranges to return counts of results that fit
         *  into each specified category.
         */
        ranges?: JsonObject;
        /** Array of row objects. */
        rows?: SearchResultRow[];
        /** Array of grouped search matches. */
        groups?: SearchResultProperties[];
    }
    /** Schema for the result of a query search operation. */
    interface SearchResultProperties {
        /** Number of total rows. */
        total_rows: number;
        /** Opaque bookmark token used when paginating results. */
        bookmark?: string;
        /** Grouped search matches. */
        by?: string;
        /** The counts facet syntax returns the number of query results for each unique value of each named field. */
        counts?: JsonObject;
        /** The range facet syntax reuses the standard Lucene syntax for ranges to return counts of results that fit
         *  into each specified category.
         */
        ranges?: JsonObject;
        /** Array of row objects. */
        rows?: SearchResultRow[];
    }
    /** Schema for a row of the result of a query search operation. */
    interface SearchResultRow {
        /** Schema for a document. */
        doc?: Document;
        /** Schema for the fields returned by a query search operation, a map of field name to value. */
        fields: JsonObject;
        /** Returns the context in which a search term was mentioned so that you can display more emphasized results to
         *  a user.
         */
        highlights?: JsonObject;
        /** Schema for a document ID. */
        id: string;
    }
    /** Schema for a security document. */
    interface Security {
        /** Schema for names and roles to map to a database permission. */
        admins?: SecurityObject;
        /** Schema for names and roles to map to a database permission. */
        members?: SecurityObject;
        /** Database permissions for Cloudant users and/or API keys. */
        cloudant?: JsonObject;
        /** Manage permissions using the `_users` database only. */
        couchdb_auth_only?: boolean;
    }
    /** Schema for names and roles to map to a database permission. */
    interface SecurityObject {
        /** List of usernames. */
        names?: string[];
        /** List of roles. */
        roles?: string[];
    }
    /** Schema for information about the server instance. */
    interface ServerInformation {
        /** Welcome message. */
        couchdb: string;
        /** List of enabled optional features. */
        features: string[];
        /** Schema for server vendor information. */
        vendor: ServerVendor;
        /** Apache CouchDB version. */
        version: string;
        /** List of feature flags. */
        features_flags: string[];
    }
    /** Schema for server vendor information. */
    interface ServerVendor {
        /** Vendor name. */
        name: string;
        /** Vendor variant. */
        variant?: string;
        /** Vendor version. */
        version?: string;
    }
    /** Schema for session authentication information. */
    interface SessionAuthentication {
        /** authenticated. */
        authenticated?: string;
        /** authentication_db. */
        authentication_db?: string;
        /** authentication_handlers. */
        authentication_handlers: string[];
    }
    /** Schema for information about a session. */
    interface SessionInformation {
        /** ok. */
        ok: boolean;
        /** Schema for session authentication information. */
        info: SessionAuthentication;
        /** Schema for the user context of a session. */
        userCtx: UserContext;
    }
    /** Schema for a shards object that maps the hash value range for each shard to the array of nodes that contain a copy of that shard. */
    interface ShardsInformation {
        /** Mapping of shard hash value range to a list of nodes. */
        shards: JsonObject;
    }
    /** Schema for detailed information about throughput capacity with breakdown by specific throughput requests classes. */
    interface ThroughputInformation {
        /** A number of blocks of throughput units. A block consists of 100 reads/sec, 50 writes/sec, and 5 global
         *  queries/sec of provisioned throughput capacity.
         */
        blocks: number;
        /** Provisioned global queries capacity in operations per second. */
        query: number;
        /** Provisioned reads capacity in operations per second. */
        read: number;
        /** Provisioned writes capacity in operations per second. */
        write: number;
    }
    /** Schema for information about the up state of the server. */
    interface UpInformation {
        /** seeds. */
        seeds: JsonObject;
        /** status. */
        status: UpInformation.Constants.Status | string;
    }
    namespace UpInformation {
        namespace Constants {
            /** status. */
            enum Status {
                MAINTENANCE_MODE = "maintenance_mode",
                NOLB = "nolb",
                OK = "ok"
            }
        }
    }
    /** Schema for an ability to tell if view is up-to-date without querying it. */
    interface UpdatesPending {
        /** Sum of shard copies with the least amount of work to do. */
        minimum: number;
        /** Sum of unique shards. This value is zero when at least one copy of every shard range is up-to-date and the
         *  view is able to answer a query without index building delays.
         */
        preferred: number;
        /** Sum of all shard copies. */
        total: number;
    }
    /** Schema for the user context of a session. */
    interface UserContext {
        /** Database name in the context of the provided operation. */
        db?: string;
        /** User name. */
        name: string;
        /** List of user roles. */
        roles: UserContext.Constants.Roles | string[];
    }
    namespace UserContext {
        namespace Constants {
            /** List of user roles. */
            enum Roles {
                READER = "_reader",
                WRITER = "_writer",
                ADMIN = "_admin",
                REPLICATOR = "_replicator",
                DB_UPDATES = "_db_updates",
                DESIGN = "_design",
                SHARDS = "_shards",
                SECURITY = "_security"
            }
        }
    }
    /** Schema for a set of uuids generated by the server. */
    interface UuidsResult {
        /** uuids. */
        uuids: string[];
    }
    /** Schema for the results of a queries view operation. */
    interface ViewQueriesResult {
        /** An array of result objects - one for each query. Each result object contains the same fields as the response
         *  to a regular view request.
         */
        results: ViewResult[];
    }
    /** Schema for a query view operation. */
    interface ViewQuery {
        /** Parameter to specify whether to include the encoding information in attachment stubs if the particular
         *  attachment is compressed.
         */
        att_encoding_info?: boolean;
        /** Parameter to specify whether to include attachments bodies in a response. */
        attachments?: boolean;
        /** Parameter to specify whether to include a list of conflicted revisions in each returned document. Active
         *  only when `include_docs` is `true`.
         */
        conflicts?: boolean;
        /** Parameter to specify whether to return the documents in descending by key order. */
        descending?: boolean;
        /** Parameter to specify whether to include the full content of the documents in the response. */
        include_docs?: boolean;
        /** Parameter to specify whether the specified end key should be included in the result. */
        inclusive_end?: boolean;
        /** Parameter to specify the number of returned documents to limit the result to. */
        limit?: number;
        /** Parameter to specify the number of records before starting to return the results. */
        skip?: number;
        /** Parameter to specify whether to include in the response an update_seq value indicating the sequence id of
         *  the database the view reflects.
         */
        update_seq?: boolean;
        /** Schema for any JSON type. */
        end_key?: any;
        /** Schema for a document ID. */
        end_key_doc_id?: string;
        /** Parameter to specify whether to group reduced results by key. Valid only if a reduce function defined in the
         *  view. If the view emits key in JSON array format, then it is possible to reduce groups further based on the
         *  number of array elements with the `group_level` parameter.
         */
        group?: boolean;
        /** Parameter to specify a group level to be used. Only applicable if the view uses keys that are JSON arrays.
         *  Implies group is `true`. Group level groups the reduced results by the specified number of array elements. If
         *  unset, results are grouped by the entire array key, returning a reduced value for each complete key.
         */
        group_level?: number;
        /** Schema for any JSON type. */
        key?: any;
        /** Parameter to specify returning only documents that match any of the specified keys. A JSON array of keys
         *  that match the key type emitted by the view function.
         */
        keys?: any[];
        /** Parameter to specify whether to use the reduce function in a map-reduce view. Default is true when a reduce
         *  function is defined.
         */
        reduce?: boolean;
        /** Query parameter to specify whether use the same replica of  the index on each request. The default value
         *  `false` contacts all  replicas and returns the result from the first, fastest, responder. Setting it to `true`
         *  when used in conjunction with `update=false`  may improve consistency at the expense of increased latency and
         *  decreased throughput if the selected replica is not the fastest of the available  replicas.
         *
         *  **Note:** In general setting `true` is discouraged and is strictly not recommended when using `update=true`.
         */
        stable?: boolean;
        /** Schema for any JSON type. */
        start_key?: any;
        /** Schema for a document ID. */
        start_key_doc_id?: string;
        /** Parameter to specify whether or not the view in question should be updated prior to responding to the user.
         *
         *  * `true` - Return results after the view is updated.
         *  * `false` - Return results without updating the view.
         *  * `lazy` - Return the view results without waiting for an update, but update them immediately after the request.
         */
        update?: ViewQuery.Constants.Update | string;
    }
    namespace ViewQuery {
        namespace Constants {
            /** Parameter to specify whether or not the view in question should be updated prior to responding to the user. * `true` - Return results after the view is updated. * `false` - Return results without updating the view. * `lazy` - Return the view results without waiting for an update, but update them immediately after the request. */
            enum Update {
                TRUE = "true",
                FALSE = "false",
                LAZY = "lazy"
            }
        }
    }
    /** Schema for the result of a query view operation. */
    interface ViewResult {
        /** Number of total rows. */
        total_rows?: number;
        /** Current update sequence for the database. */
        update_seq?: string;
        /** rows. */
        rows: ViewResultRow[];
    }
    /** Schema for a row of a view result. */
    interface ViewResultRow {
        /** The cause of the error (if available). */
        caused_by?: string;
        /** The name of the error. */
        error?: string;
        /** The reason the error occurred (if available). */
        reason?: string;
        /** Schema for a document. */
        doc?: Document;
        /** Schema for a document ID. */
        id?: string;
        /** Schema for any JSON type. */
        key: any;
        /** Schema for any JSON type. */
        value: any;
    }
}
export = CloudantV1;
